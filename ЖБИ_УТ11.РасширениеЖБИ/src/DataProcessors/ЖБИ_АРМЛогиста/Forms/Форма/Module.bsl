
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуГрадацииЦен(Поставщик)
	
	Запрос 			= Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",Поставщик);
	Запрос.Текст	= "ВЫБРАТЬ
	            	  |	ЖБИ_ГрадацияЦенПредварительныхСтавок.Партнер КАК Партнер,
	            	  |	ЖБИ_ГрадацияЦенПредварительныхСтавок.Цена КАК Цена,
	            	  |	ЖБИ_ГрадацияЦенПредварительныхСтавок.РасстояниеОт КАК РасстояниеОт,
	            	  |	ЖБИ_ГрадацияЦенПредварительныхСтавок.РасстояниеДо КАК РасстояниеДо,
	            	  |	ЖБИ_ГрадацияЦенПредварительныхСтавок.Автор КАК Автор
	            	  |ИЗ
	            	  |	РегистрСведений.ЖБИ_ГрадацияЦенПредварительныхСтавок КАК ЖБИ_ГрадацияЦенПредварительныхСтавок
	            	  |ГДЕ
	            	  |	ЖБИ_ГрадацияЦенПредварительныхСтавок.Партнер = &Партнер";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Количество()=0 Тогда
		ТаблицаНабораЗаписей 	= РегистрыСведений.ЖБИ_ГрадацияЦенПредварительныхСтавок.ПолучитьПустуюТаблицуНаборЗаписей();
		МакетГрадацииЦен 		= Обработки.ЖБИ_АРМЛогиста.ПолучитьМакет("МакетГрадацииЦенПоПоставщикам");	
		Для Счетчик = 1 По МакетГрадацииЦен.ВысотаТаблицы Цикл			
			РасстояниеОт = Число(СокрЛП(МакетГрадацииЦен.Область(Счетчик, 3, Счетчик, 3).Текст));
			РасстояниеДо = Число(СокрЛП(МакетГрадацииЦен.Область(Счетчик, 5, Счетчик, 5).Текст)); 
			
			НоваяСтр 				= ТаблицаНабораЗаписей.Добавить();
			НоваяСтр.Партнер 		= Поставщик;
			НоваяСтр.РасстояниеОт	= РасстояниеОт;
			НоваяСтр.РасстояниеДо	= РасстояниеДо;
			НоваяСтр.Автор 			= Пользователи.ТекущийПользователь();		
		КонецЦикла;
		
		СообщениеОбОшибке 	= "";
		РезультатЗаписи 	= РегистрыСведений.ЖБИ_ГрадацияЦенПредварительныхСтавок.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,,СообщениеОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючиЗаписиСтатусАктивностиКлиента(ТекСтрока, ОткрытьНовый = Ложь)
	
	Ключ = Новый Структура;
    Ключ.Вставить("Партнер", ТекСтрока.Поставщик);
    КлючЗаписи = РегистрыСведений.ЖБИ_СтатусАктивностиКлиента.СоздатьКлючЗаписи(Ключ);
	
	РегСведАктивностиКлиента = РегистрыСведений.ЖБИ_СтатусАктивностиКлиента.СоздатьМенеджерЗаписи();
	РегСведАктивностиКлиента.Партнер = ТекСтрока.Поставщик;
	РегСведАктивностиКлиента.Прочитать();
	Если РегСведАктивностиКлиента.Выбран() Тогда 
		ОткрытьНовый = Ложь;
	Иначе 
		ОткрытьНовый = Истина;
	КонецЕсли;
	
    Возврат КлючЗаписи;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыДинамическогоСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТаблицаПоставщиков,
	"ТекущаяДатаСеанса",
	ТекущаяДата());
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВзаимодействие,
	"Партнер",
	ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элементы.ОтборПартнер,ТаблицаПредварительныхСтавок,ЭтотОбъект,"Поставщик",Неопределено,Истина);
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элементы.ОтборПартнер,ТаблГрадацииЦен,ЭтотОбъект,"Партнер",Неопределено,Истина);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючЗаписиВзаимодействия(ТекСтрока)
	
	Ключ = Новый Структура;
    Ключ.Вставить("Период", ТекСтрока.Период);
    Ключ.Вставить("Партнер", ТекСтрока.Партнер);
    КлючЗаписи = РегистрыСведений.ЖБИ_ВзаимодействиеСПартнером.СоздатьКлючЗаписи(Ключ);
    Возврат КлючЗаписи;
	
КонецФункции

Процедура ЗаполнитьВзамодействияПартнера(Партнер) Экспорт
	
	ТекущийАктивныйПартнер = Партнер;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВзаимодействие,
	"Партнер",
	Партнер);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТЧ(ИмяТаблицы,Свойство,ЗначениеСвойства,СписокКолонокИсключение,УдалитьУФИндекс = Неопределено)

	//УсловноеОформление.Элементы.Очистить();
	Если УдалитьУФИндекс <> Неопределено Тогда 
		УсловноеОформление.Элементы.Удалить(УдалитьУФИндекс);	
	КонецЕсли;
	
	ЭлементУсловногоОформления 					= УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование 	= Истина;
	ОформлениеУО        						= ЭлементУсловногоОформления.Оформление;
	ОтборУО             						= ЭлементУсловногоОформления.Отбор;
	ОформляемыеПоляУО   						= ЭлементУсловногоОформления.Поля;
	Если ИмяТаблицы = "Список" 		
		И Свойство = "ЦветТекста" Тогда
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.РазницаПроцент");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = 0;
		ЭлементОтбора.Использование  = Истина;
		
		Для Каждого элПоля Из Элементы.Список.ПодчиненныеЭлементы Цикл
			Если элПоля.Имя = "СписокРазницаПроцент" Тогда 
				ОформляемоеПоле					= ОформляемыеПоляУО.Элементы.Добавить(); 
				ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(элПоля.Имя);
				ОформляемоеПоле.Использование 	= Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;	
		
	ИначеЕсли ИмяТаблицы = "ТаблицаПоставщиков" 		
		И Свойство = "ЦветТекста" Тогда 
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаПоставщиков.ДатаКонтроляЦены");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
		ЭлементОтбора.ПравоеЗначение = ТекущаяДатаСеанса();
		ЭлементОтбора.Использование  = Истина;
		
		Для Каждого элПоля Из Элементы.ТаблицаПоставщиков.ПодчиненныеЭлементы Цикл
			Если элПоля.Имя = "ТаблицаПоставщиковДатаКонтроляЦены" Тогда 
				ОформляемоеПоле					= ОформляемыеПоляУО.Элементы.Добавить(); 
				ОформляемоеПоле.Поле 			= Новый ПолеКомпоновкиДанных(элПоля.Имя);
				ОформляемоеПоле.Использование 	= Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоставитьПоставщикаНаПаузуСервер(Команда, Поставщик)
	
	УстановитьПаузу 						= Команда = "КомандаПоставитьНаПаузуПоставщика";
	ПоставщикОбъект 						= Поставщик.ПолучитьОбъект();
	ПоставщикОбъект.ЖБИ_НаПаузе 			= УстановитьПаузу;
	ПоставщикОбъект.ОбменДанными.Загрузка 	= Истина;
	ПоставщикОбъект.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПоставитьТоварНаПаузуСервер(Команда, Поставщик, НоменклатураПоставщика)
	
	УстановитьПаузу = Команда = "КомандаПоставитьНаПаузуТовар";
	Запрос 		 	= Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", Поставщик);
	Запрос.УстановитьПараметр("НоменклатураПоставщика", НоменклатураПоставщика);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖБИ_НоменклатураПоставщиков.Партнер КАК Партнер,
	               |	ЖБИ_НоменклатураПоставщиков.НоменклатураПоставщика КАК НоменклатураПоставщика
	               |ИЗ
	               |	РегистрСведений.ЖБИ_НоменклатураПоставщиков КАК ЖБИ_НоменклатураПоставщиков
	               |ГДЕ
	               |	ЖБИ_НоменклатураПоставщиков.Партнер = &Партнер
	               |	И ЖБИ_НоменклатураПоставщиков.НоменклатураПоставщика = &НоменклатураПоставщика";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда 
		РегНоменклатураПоставщиков 							= РегистрыСведений.ЖБИ_НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
		РегНоменклатураПоставщиков.Партнер 					= РезультатЗапроса.Партнер;
		РегНоменклатураПоставщиков.НоменклатураПоставщика 	= РезультатЗапроса.НоменклатураПоставщика;
		РегНоменклатураПоставщиков.Прочитать();
		Если РегНоменклатураПоставщиков.Выбран() Тогда 
			РегНоменклатураПоставщиков.НаПаузе = УстановитьПаузу;
			РегНоменклатураПоставщиков.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьДатуКонтроляПоставщикаСервер(ДатуКонтроляЦены,Поставщик)
	
	ПоставщикОбъект 						= Поставщик.ПолучитьОбъект();
	ПоставщикОбъект.ЖБИ_ДатаКонтроляЦены 	= ДатуКонтроляЦены;
	ПоставщикОбъект.ОбменДанными.Загрузка 	= Истина;
	ПоставщикОбъект.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИндивидуальнуюЦенуСервер(Команда,Поставщик)
	
	ИндивидуальнаяЦена						= Команда = "КомандаУстановитьИндивидуальнуюЦену";
	ПоставщикОбъект 						= Поставщик.ПолучитьОбъект();
	ПоставщикОбъект.ЖБИ_ИндивидуальнаяЦена 	= ИндивидуальнаяЦена;
	ПоставщикОбъект.ОбменДанными.Загрузка 	= Истина;
	ПоставщикОбъект.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПередатьТоварДругомуПоставщикуСервер(ПоставщикИсточник, ПоставщикПриемник, СообщениеОбОшибки = "")
	
	НачатьТранзакцию();
	Отказ 			= Ложь;
	Запрос 			= Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",ПоставщикИсточник);
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	ЖБИ_НоменклатураПоставщиков.Партнер КАК Партнер,
	             	  |	ЖБИ_НоменклатураПоставщиков.НоменклатураПоставщика КАК НоменклатураПоставщика,
	             	  |	ЖБИ_НоменклатураПоставщиков.ПунктОтгрузки КАК ПунктОтгрузки,
	             	  |	ЖБИ_НоменклатураПоставщиков.СтатусОсторожно КАК СтатусОсторожно,
	             	  |	ЖБИ_НоменклатураПоставщиков.МаркировкаОбщепринятая КАК МаркировкаОбщепринятая,
	             	  |	ЖБИ_НоменклатураПоставщиков.РасширенноеНаименование КАК РасширенноеНаименование,
	             	  |	ЖБИ_НоменклатураПоставщиков.НормативныйДокумент КАК НормативныйДокумент,
	             	  |	ЖБИ_НоменклатураПоставщиков.НормаАвто КАК НормаАвто,
	             	  |	ЖБИ_НоменклатураПоставщиков.Качество КАК Качество,
	             	  |	ЖБИ_НоменклатураПоставщиков.Вес КАК Вес,
	             	  |	ЖБИ_НоменклатураПоставщиков.Объем КАК Объем,
	             	  |	ЖБИ_НоменклатураПоставщиков.Длина КАК Длина,
	             	  |	ЖБИ_НоменклатураПоставщиков.ДиаметрММ КАК ДиаметрММ,
	             	  |	ЖБИ_НоменклатураПоставщиков.ДиаметрВх КАК ДиаметрВх,
	             	  |	ЖБИ_НоменклатураПоставщиков.ДиаметрВых КАК ДиаметрВых,
	             	  |	ЖБИ_НоменклатураПоставщиков.РабочаяДлина КАК РабочаяДлина,
	             	  |	ЖБИ_НоменклатураПоставщиков.ТолщинаСтенки КАК ТолщинаСтенки,
	             	  |	ЖБИ_НоменклатураПоставщиков.Глубина КАК Глубина,
	             	  |	ЖБИ_НоменклатураПоставщиков.ШиринаМакс КАК ШиринаМакс,
	             	  |	ЖБИ_НоменклатураПоставщиков.ШиринаМин КАК ШиринаМин,
	             	  |	ЖБИ_НоменклатураПоставщиков.ВысотаМакс КАК ВысотаМакс,
	             	  |	ЖБИ_НоменклатураПоставщиков.ВысотаМин КАК ВысотаМин,
	             	  |	ЖБИ_НоменклатураПоставщиков.Армирование КАК Армирование,
	             	  |	ЖБИ_НоменклатураПоставщиков.БетонВ КАК БетонВ,
	             	  |	ЖБИ_НоменклатураПоставщиков.ВодонепрW КАК ВодонепрW,
	             	  |	ЖБИ_НоменклатураПоставщиков.МорозF КАК МорозF,
	             	  |	ЖБИ_НоменклатураПоставщиков.СертифицированДо КАК СертифицированДо,
	             	  |	ЖБИ_НоменклатураПоставщиков.Негабаритный КАК Негабаритный,
	             	  |	ЖБИ_НоменклатураПоставщиков.КолВУпаковке КАК КолВУпаковке,
	             	  |	ЖБИ_НоменклатураПоставщиков.ВесАвто КАК ВесАвто,
	             	  |	ЖБИ_НоменклатураПоставщиков.Направление КАК Направление,
	             	  |	ЖБИ_НоменклатураПоставщиков.Коментарий КАК Коментарий,
	             	  |	ЖБИ_НоменклатураПоставщиков.Автор КАК Автор,
	             	  |	ЖБИ_НоменклатураПоставщиков.ДатаОбновления КАК ДатаОбновления,
	             	  |	ЖБИ_НоменклатураПоставщиков.Комментарий КАК Комментарий
	             	  |ИЗ
	             	  |	РегистрСведений.ЖБИ_НоменклатураПоставщиков КАК ЖБИ_НоменклатураПоставщиков
	             	  |ГДЕ
	             	  |	ЖБИ_НоменклатураПоставщиков.Партнер = &Партнер";
					  //| ЖБИ_НоменклатураПоставщиков.НоменклатураПоставщика.Владелец = &Партнер";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();	
	Пока РезультатЗапроса.Следующий() Цикл
		Запись = РегистрыСведений.ЖБИ_НоменклатураПоставщиков.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись,РезультатЗапроса);
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.Партнер = ПоставщикПриемник;
			Попытка
				Запись.Записать(Истина);
			Исключение
				Отказ = Истина;
				СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Возврат Отказ;
			КонецПопытки;
		КонецЕсли;
		
		НоменклатураПоставщиков = Справочники.НоменклатураПоставщиков.НайтиПоРеквизиту("Номенклатура",РезультатЗапроса.НоменклатураПоставщика.Номенклатура,,ПоставщикПриемник);
		Если Не НоменклатураПоставщиков.Пустая() Тогда 
			Запись.НоменклатураПоставщика = НоменклатураПоставщиков;
			Попытка
				Запись.Записать(Истина);
			Исключение
				Отказ = Истина;
				СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Возврат Отказ;
			КонецПопытки;
			Продолжить;
		КонецЕсли;
		СпрОбъект 						= РезультатЗапроса.НоменклатураПоставщика.ПолучитьОбъект();
		СпрОбъект.Владелец 				= ПоставщикПриемник;
		СпрОбъект.ОбменДанными.Загрузка = Истина;
		Попытка
			СпрОбъект.Записать();
		Исключение
			Отказ = Истина;
			СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Отказ;
		КонецПопытки;		
	КонецЦикла;
	
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	НоменклатураПоставщиков.Ссылка КАК Ссылка,
	//               |	НоменклатураПоставщиков.Номенклатура КАК Номенклатура
	//               |ИЗ
	//               |	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	//               |ГДЕ
	//               |	НоменклатураПоставщиков.Владелец = &Партнер";
	//
	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//Пока РезультатЗапроса.Следующий() Цикл
	//	Если Не Справочники.НоменклатураПоставщиков.НайтиПоРеквизиту("Номенклатура",РезультатЗапроса.Номенклатура,,ПоставщикПриемник).Пустая() Тогда 
	//		Продолжить;
	//	КонецЕсли;
	//	СпрОбъект 						= РезультатЗапроса.Ссылка.ПолучитьОбъект();
	//	СпрОбъект.Владелец 				= ПоставщикПриемник;
	//	СпрОбъект.ОбменДанными.Загрузка = Истина;
	//	Попытка
	//		СпрОбъект.Записать();
	//	Исключение
	//		Отказ = Истина;
	//		СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	//		Возврат Отказ;
	//	КонецПопытки;
	//КонецЦикла;	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖБИ_ПрайслистПоставщикаСрезПоследних.Период КАК Период,
	               |	ЖБИ_ПрайслистПоставщикаСрезПоследних.Партнер КАК Партнер,
	               |	ЖБИ_ПрайслистПоставщикаСрезПоследних.НоменклатураПоставщика КАК НоменклатураПоставщика,
	               |	ЖБИ_ПрайслистПоставщикаСрезПоследних.Цена КАК Цена,
	               |	ЖБИ_ПрайслистПоставщикаСрезПоследних.ПредыдущаяДата КАК ПредыдущаяДата,
	               |	ЖБИ_ПрайслистПоставщикаСрезПоследних.ПредыдущаяЦена КАК ПредыдущаяЦена,
	               |	ЖБИ_ПрайслистПоставщикаСрезПоследних.Автор КАК Автор,
	               |	ЖБИ_ПрайслистПоставщикаСрезПоследних.Комментарий КАК Комментарий
	               |ИЗ
	               |	РегистрСведений.ЖБИ_ПрайслистПоставщика.СрезПоследних КАК ЖБИ_ПрайслистПоставщикаСрезПоследних
	               |ГДЕ
	               |	ЖБИ_ПрайслистПоставщикаСрезПоследних.Партнер = &Партнер";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();	
	Пока РезультатЗапроса.Следующий() Цикл
		Запись 			= РегистрыСведений.ЖБИ_ПрайслистПоставщика.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись,РезультатЗапроса);
		Запись.Период 	= ТекущаяДатаСеанса();
		Запись.Партнер 	= ПоставщикПриемник;
		Попытка
			Запись.Записать(Истина);
		Исключение
			Отказ = Истина;
			СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Отказ;
		КонецПопытки;	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяОперации()
	
	ИмяОперации = "";
	ИмяСтраницы = Элементы.СтраницыОсновнаяФорма.ТекущаяСтраница.Имя;	
	Если ИмяСтраницы = "СтраницаСкидок" Тогда
		ИмяОперации = "КомандаТаблицаСкидок";
		Элементы.КомандаТаблицаСкидок.Пометка = Истина;
		Элементы.КомандаТаблицаПоставщиков.Пометка = Ложь;
		Элементы.КомандаТаблицаПредварительныхСтавок.Пометка = Ложь;
	ИначеЕсли ИмяСтраницы = "СтраницаПоставщиков" Тогда
		ИмяОперации = "КомандаТаблицаПоставщиков";
		Элементы.КомандаТаблицаСкидок.Пометка = Ложь;
		Элементы.КомандаТаблицаПоставщиков.Пометка = Истина;
		Элементы.КомандаТаблицаПредварительныхСтавок.Пометка = Ложь;
	ИначеЕсли ИмяСтраницы = "СтраницаПредварительныхСтавок" Тогда
		ИмяОперации = "КомандаТаблицаПредварительныхСтавок";
		Элементы.КомандаТаблицаСкидок.Пометка = Ложь;
		Элементы.КомандаТаблицаПоставщиков.Пометка = Ложь;
		Элементы.КомандаТаблицаПредварительныхСтавок.Пометка = Истина;
	КонецЕсли;
	
	Возврат ИмяОперации;
	
КонецФункции

&НаСервереБезКонтекста
Функция НеИспользуетсяНоменклатураПоставщикаСервер(НоменклатураПоставщика, СообщениеОбОшибки = "")
	
	Отказ = Ложь;	
	СпрОбъект = НоменклатураПоставщика.ПолучитьОбъект();
	СпрОбъект.ЖБИ_НеИспользуется = Истина;
	Попытка
		СпрОбъект.Записать();
	Исключение
		Отказ = Истина;
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Отказ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСкидкуСервер(МассивНоменклатуры,Поставщик,ПроцентСкидки,СообщениеОбОшибки)	
	РезультатЗаписи = Обработки.ЖБИ_АРМЛогиста.ЗаполнитьСкидкуПоПоставщику(МассивНоменклатуры,Поставщик,ПроцентСкидки,СообщениеОбОшибки);	
	Возврат РезультатЗаписи;	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьДопустимуюСкидкуСервер(Поставщик,ПроцентСкидки,СообщениеОбОшибки)	
	РезультатЗаписи = Обработки.ЖБИ_АРМЛогиста.ЗаполнитьДопустимуюСкидкуПоПоставщику(Поставщик,ПроцентСкидки,СообщениеОбОшибки);	
	Возврат РезультатЗаписи;	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьПроцентНаценкиСервер(Поставщик,ПроцентНаценки,СообщениеОбОшибки)	
	РезультатЗаписи = Обработки.ЖБИ_АРМЛогиста.ЗаполнитьЗаполнитьПроцентНаценкиПоПоставщику(Поставщик,ПроцентНаценки,СообщениеОбОшибки);	
	Возврат РезультатЗаписи;	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьТранспортныйПроцентСервер(Поставщик,ТранспортныйПроцент,СообщениеОбОшибки)	
	РезультатЗаписи = Обработки.ЖБИ_АРМЛогиста.ЗаполнитьТранспортныйПроцент(Поставщик,ТранспортныйПроцент,СообщениеОбОшибки);	
	Возврат РезультатЗаписи;	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьЦенуПоставщикаСервер(МассивНоменклатуры,Поставщик,ЦенаПоставщика,СообщениеОбОшибки)
	
	ТаблицаНабораЗаписей = РегистрыСведений.ЖБИ_ПрайслистПоставщика.ПолучитьПустуюТаблицуНаборЗаписей();
	Для Каждого НомСтр Из МассивНоменклатуры Цикл 
		НоваяСтр = ТаблицаНабораЗаписей.Добавить();
		НоваяСтр.Партнер 				= Поставщик;
		НоваяСтр.НоменклатураПоставщика = НомСтр;
		НоваяСтр.Цена 					= ЦенаПоставщика;
		НоваяСтр.Период					= ТекущаяДатаСеанса();
		НоваяСтр.Автор 					= Пользователи.ТекущийПользователь();
	КонецЦикла;
	
	//получим пред. цену и дату
	РегистрыСведений.ЖБИ_ПрайслистПоставщика.ЗаполнитьПредыдущуюЦену(ТаблицаНабораЗаписей,Поставщик);
	
	//СписокСвойствОбновления = "Цена,ПредыдущаяДата,ПредыдущаяЦена,Автор";
	//Результат = РегистрыСведений.ЖБИ_ПрайслистПоставщика.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,СписокСвойствОбновления,, СообщениеОбОшибки);

	Результат = РегистрыСведений.ЖБИ_ПрайслистПоставщика.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,, СообщениеОбОшибки);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция УдалитьПредварительнуюСтавку(ДопПараметры, СообщениеОбОшибке)	
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПунктОтгрузки",ДопПараметры.ПунктОтгрузки);
	СтруктураПараметров.Вставить("Регион",ДопПараметры.Регион);
	СтруктураПараметров.Вставить("Город",ДопПараметры.Город);
	СтруктураПараметров.Вставить("Расстояние",ДопПараметры.Расстояние);
	СтруктураПараметров.Вставить("Ставка",ДопПараметры.Ставка);
	СтруктураПараметров.Вставить("Автор",ДопПараметры.Автор);
	СтруктураПараметров.Вставить("ДатаОбновления",ДопПараметры.ДатаОбновления);
	
	ТаблицаНабораЗаписей = РегистрыСведений.ЖБИ_РасчетПредварительныхСтавок.ЗаполнитьТаблицуНабораЗаписей(СтруктураПараметров);	
	РезультатЗаписи = РегистрыСведений.ЖБИ_РасчетПредварительныхСтавок.ОчиститьЗаписиРегистраСведений(ТаблицаНабораЗаписей,СообщениеОбОшибке);
	
	Возврат РезультатЗаписи;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьРасчетЦенПоПредварительнымСтавкамСервер(Поставщик, ТекущийПользователь, СообщениеОбОшибке)
	
	Запрос				 = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",Поставщик);
	Запрос.Текст		=   "ВЫБРАТЬ
	            		    |	ЖБИ_ГрадацияЦенПредварительныхСтавок.Цена КАК Цена,
	            		    |	ЖБИ_ГрадацияЦенПредварительныхСтавок.РасстояниеОт КАК РасстояниеОт,
	            		    |	ЖБИ_ГрадацияЦенПредварительныхСтавок.РасстояниеДо КАК РасстояниеДо
	            		    |ИЗ
	            		    |	РегистрСведений.ЖБИ_ГрадацияЦенПредварительныхСтавок КАК ЖБИ_ГрадацияЦенПредварительныхСтавок
	            		    |ГДЕ
	            		    |	ЖБИ_ГрадацияЦенПредварительныхСтавок.Партнер = &Партнер
	            		    |
	            		    |УПОРЯДОЧИТЬ ПО
	            		    |	РасстояниеОт";
	РезультатГрадацииЦен = Запрос.Выполнить().Выгрузить(); 
		
	Запрос.Текст		 = "ВЫБРАТЬ
	            		   |	ЖБИ_ПунктыНазначенияОтгрузки.Партнер КАК Поставщик,
	            		   |	ЖБИ_РасчетПредварительныхСтавок.ПунктОтгрузки КАК ПунктОтгрузки,
	            		   |	ЖБИ_РасчетПредварительныхСтавок.Регион КАК Регион,
	            		   |	ЖБИ_РасчетПредварительныхСтавок.Город КАК Город,
	            		   |	ЖБИ_РасчетПредварительныхСтавок.Расстояние КАК Расстояние,
	            		   |	ЖБИ_РасчетПредварительныхСтавок.Автор КАК Автор,
	            		   |	ЖБИ_РасчетПредварительныхСтавок.ДатаОбновления КАК ДатаОбновления
	            		   |ИЗ
	            		   |	РегистрСведений.ЖБИ_РасчетПредварительныхСтавок КАК ЖБИ_РасчетПредварительныхСтавок
	            		   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖБИ_ПунктыНазначенияОтгрузки КАК ЖБИ_ПунктыНазначенияОтгрузки
	            		   |		ПО ЖБИ_РасчетПредварительныхСтавок.ПунктОтгрузки = ЖБИ_ПунктыНазначенияОтгрузки.ПунктНазначенияОтгрузки
	            		   |ГДЕ
	            		   |	ЖБИ_ПунктыНазначенияОтгрузки.Партнер = &Партнер
	            		   |
	            		   |УПОРЯДОЧИТЬ ПО
	            		   |	Расстояние";	
	
	ТаблицаНабораЗаписей = РегистрыСведений.ЖБИ_РасчетПредварительныхСтавок.ПолучитьПустуюТаблицуНаборЗаписей();
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл		
		Если РезультатЗапроса.Расстояние = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		ЦенаРасстояние = 0;
		Для Каждого НомСтр Из РезультатГрадацииЦен Цикл		
			Если РезультатЗапроса.Расстояние <= НомСтр.РасстояниеДо Тогда
				ЦенаРасстояние = НомСтр.Цена;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЦенаРасстояние = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтр 					= ТаблицаНабораЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,РезультатЗапроса);
		НоваяСтр.Ставка				= ЦенаРасстояние*РезультатЗапроса.Расстояние;
		НоваяСтр.Автор  			= ТекущийПользователь;
		НоваяСтр.ДатаОбновления  	= ТекущаяДата();	
	КонецЦикла;
	
	РезультатЗаписи = РегистрыСведений.ЖБИ_РасчетПредварительныхСтавок.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,,СообщениеОбОшибке);
	
КонецФункции

#КонецОбласти

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_ЭЛЕМЕНТОВ_УПРАВЛЕНИЯ_ФОРМЫ

&НаСервере
Процедура УстановитьОтборДинСпискаПоСегменту(СписокСегмент, ИмяОтбора, ВидСравнения)
	Если Элементы.СтраницыОсновнаяФорма.ТекущаяСтраница = Элементы.СтраницаСкидок Тогда 
		ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинСпискаПоСегменту(СписокСегмент,Список,ИмяОтбора,ВидСравнения);
	ИначеЕсли Элементы.СтраницыОсновнаяФорма.ТекущаяСтраница = Элементы.СтраницаПоставщиков Тогда 
		ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинСпискаПоСегменту(СписокСегмент,ТаблицаПоставщиков,ИмяОтбора,ВидСравнения);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПартнерПриИзменении(Элемент)	
	
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,Список,ЭтотОбъект,"Поставщик",Неопределено);
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,ТаблицаПоставщиков,ЭтотОбъект,"Поставщик",Неопределено);
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,ТаблицаПредварительныхСтавок,ЭтотОбъект,"Поставщик",Неопределено,Истина);
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элементы.ОтборПартнер,ТаблГрадацииЦен,ЭтотОбъект,"Партнер",Неопределено,Истина);
	УстановитьДоступностьЭлементовФормы();
	
	Если Элементы.СтраницыОсновнаяФорма.ТекущаяСтраница = Элементы.СтраницаПредварительныхСтавок Тогда
		ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиТаблицаПредварительныхСтавок", 1, Истина);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатураПоставщикаПриИзменении(Элемент)	
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,Список,ЭтотОбъект,"НоменклатураПоставщика",Неопределено);		
КонецПроцедуры

&НаКлиенте
Процедура ОтборАртикулПриИзменении(Элемент)
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,Список,ЭтотОбъект,"Артикул",Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборМаркировкаОбщПриИзменении(Элемент)
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,Список,ЭтотОбъект,"МаркировкаОбщ",Неопределено);
КонецПроцедуры 

&НаКлиенте
Процедура ОтборСегментПриИзменении(Элемент)
	УстановитьОтборДинСпискаПоСегменту(ЭтотОбъект[Элемент.Имя], "Поставщик", ВидСравненияКомпоновкиДанных.ВСписке);
КонецПроцедуры

#Область Команды

&НаКлиенте
Процедура КомандаТаблицаСкидок(Команда)
	
	Элементы.СтраницыОсновнаяФорма.ТекущаяСтраница = Элементы.СтраницаСкидок;
	ИмяОперации = ПолучитьИмяОперации();
	УстановитьДоступностьЭлементовФормы();
	
	ЦветТекста = WebЦвета.Красный;
	УстановитьУсловноеОформлениеТЧ("Список","ЦветТекста",ЦветТекста,Новый СписокЗначений);
	
	Если ЗначениеЗаполнено(ОтборСегмент) Тогда 
		ОтборСегмент.Очистить();
		УстановитьОтборДинСпискаПоСегменту(ОтборСегмент, "Поставщик", ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаПоставщиков(Команда)
	
	Элементы.СтраницыОсновнаяФорма.ТекущаяСтраница = Элементы.СтраницаПоставщиков;
	ИмяОперации = ПолучитьИмяОперации();
	УстановитьДоступностьЭлементовФормы();
	
	ЦветТекста = WebЦвета.Красный;
	УстановитьУсловноеОформлениеТЧ("ТаблицаПоставщиков","ЦветТекста",ЦветТекста,Новый СписокЗначений);
	
	Если ЗначениеЗаполнено(ОтборСегмент) Тогда 
		ОтборСегмент.Очистить();
		УстановитьОтборДинСпискаПоСегменту(ОтборСегмент, "Поставщик", ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаПредварительныхСтавок(Команда)
	Элементы.СтраницыОсновнаяФорма.ТекущаяСтраница = Элементы.СтраницаПредварительныхСтавок;
	ИмяОперации = ПолучитьИмяОперации();
	УстановитьДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьЦену(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура("ИмяСобытия,Поставщик,НоменклатураПоставщика","ВводЗначенияЧислоЦенаПоставщика",ТекДанные.Поставщик,ТекДанные.НоменклатураПоставщика);
	ВыбЗнач = ТекДанные.ЦенаПрайсаСНДС;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(15,2);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите цену", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьСкидку(Команда)
	
	Текст = "Заполнить %скидки "+ПроцентСкидки+" для всей номенклатуры поставщика "+ОтборПартнер;
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросКомандаЗаполнитьСкидку");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьСкидку(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура("ИмяСобытия,Поставщик,НоменклатураПоставщика","ВводЗначенияЧисло",ТекДанные.Поставщик,ТекДанные.НоменклатураПоставщика);
	ВыбЗнач = ТекДанные.Скидка;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(10,2);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите %скидки", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНеИспользуетсяНоменклатураПоставщика(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Удалить номенклатуру поставщика "+ТекДанные.Артикул+" ?";
	СтруктураСобытия = Новый Структура("ИмяСобытия, НоменклатураПоставщика","КомандаНеИспользуетсяНоменклатураПоставщика",ТекДанные.НоменклатураПоставщика);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуВыбораПоставщика()
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура("ИмяСобытия,Поставщик","ВводПоставщика",ТекДанные.Поставщик);
	ВыбЗнач = ТекДанные.Скидка;
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Партнеры"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите поставщика", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПередатьТоварДругомуПоставщику(Команда)
		
	Текст = "Передать товар другому поставщику?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","КомандаПередатьТоварДругомуПоставщику");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьПоставщика(Команда)
	
	ИмяОперации = ПолучитьИмяОперации();
	Если ИмяОперации = "КомандаТаблицаСкидок" Тогда 
		ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Иначе 
		ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПоставщиков");
	КонецЕсли;
	
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлемента",
	Новый Структура("Ключ",ТекДанные.Поставщик),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеПартнера"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьДопустимуюСкидку(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПоставщиков");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура("ИмяСобытия,Поставщик","ВводЗначенияЧислоДопустимаяСкидка",ТекДанные.Поставщик);
	ВыбЗнач = ТекДанные.ДопустимаяСкидка;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(10,2);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите допустимый %скидки", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоставитьНаПаузуПоставщика(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПоставщиков");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.Поставщик,"ЖБИ_НаПаузе") Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Поставить на паузу поставщика "+ТекДанные.Поставщик+" ?";
	СтруктураСобытия = Новый Структура("ИмяСобытия, Поставщик","КомандаПоставитьНаПаузуПоставщика",ТекДанные.Поставщик);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьСПаузыПоставщика(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПоставщиков");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.Поставщик,"ЖБИ_НаПаузе") Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Снять с паузы поставщика "+ТекДанные.Поставщик+" ?";
	СтруктураСобытия = Новый Структура("ИмяСобытия, Поставщик","КомандаСнятьСПаузыПоставщика",ТекДанные.Поставщик);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоставитьНаПаузуТовар(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Артикул = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.НоменклатураПоставщика,"Артикул"); 
	
	Текст = "Поставить на паузу товар "+Артикул+" ?";
	СтруктураСобытия = Новый Структура("ИмяСобытия, Поставщик, НоменклатураПоставщика","КомандаПоставитьНаПаузуТовар",ТекДанные.Поставщик,ТекДанные.НоменклатураПоставщика);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьСПаузыТовар(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Артикул = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.НоменклатураПоставщика,"Артикул"); 
	
	Текст = "Поставить на паузу товар "+Артикул+" ?";
	Текст = "Снять с паузы товар "+ТекДанные.НоменклатураПоставщика+" ?";
	СтруктураСобытия = Новый Структура("ИмяСобытия, Поставщик, НоменклатураПоставщика","КомандаСнятьСПаузыТовар",ТекДанные.Поставщик,ТекДанные.НоменклатураПоставщика);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьДатуКонтроляЦены(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПоставщиков");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура("ИмяСобытия,Поставщик","ВводЗначенияУстановитьДатуКонтроляЦены",ТекДанные.Поставщик);
	ВыбЗнач = ТекущаяДата();
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите дату контроля цены", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьПроцентНаценки(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПоставщиков");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура("ИмяСобытия,Поставщик","ВводЗначенияЧислоПроцентНаценки",ТекДанные.Поставщик);
	ВыбЗнач = ТекДанные.ПроцентНаценки;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(10,2);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите %наценки", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьТранспортныйПроцент(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПоставщиков");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура("ИмяСобытия,Поставщик","ВводЗначенияЧислоТранспортныйПроцент",ТекДанные.Поставщик);
	ВыбЗнач = ТекДанные.ТранспортныйПроцент;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(10,2);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите транспортный %", ОписаниеТипов)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьИндивидуальнуюЦену(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПоставщиков");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИндивидуальнаяЦена = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.Поставщик,"ЖБИ_ИндивидуальнаяЦена");
	ИмяКоманды 			= "КомандаУстановитьИндивидуальнуюЦену";
	Действие 			= "Установить";
	Если ИндивидуальнаяЦена Тогда
		ИмяКоманды = "КомандаСнятьИндивидуальнуюЦену";
		Действие   = "Снять";
	КонецЕсли;
	
	Текст = Действие +" индивидуальные цены для поставщика: "+ТекДанные.Поставщик+" ?";
	СтруктураСобытия = Новый Структура("ИмяСобытия, Поставщик",ИмяКоманды,ТекДанные.Поставщик);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьСтавку(Команда)
	
	СтруктураОтборов = Новый Структура();
	ОткрытьФорму("Обработка.ЖБИ_АРМЛогиста.Форма.ФормаРедактированияСтавки",
	СтруктураОтборов,
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаСозданияСтавки"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьСтавку(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПредварительныхСтавок");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Обработка.ЖБИ_АРМЛогиста.Форма.ФормаРедактированияСтавки",
	Новый Структура("Партнер,ПунктОтгрузки,Регион,Город,Расстояние,Ставка,Автор,ДатаОбновления",ТекДанные.Поставщик,ТекДанные.Откуда,ТекДанные.Регион,ТекДанные.Город,ТекДанные.Расстояние,ТекДанные.Ставка,ТекДанные.Автор,ТекДанные.ДатаОбновления),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеСтавки"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРассчитатьРасстояние(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПредварительныхСтавок");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Обработка.ЖБИ_АРМЛогиста.Форма.ФормаРасчетРасстояния",
	Новый Структура("Поставщик",ТекДанные.Поставщик),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеРасстояние"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНеИспользуется(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПредварительныхСтавок");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Удалить ставку по поставщику "+ТекДанные.Поставщик+", ставка "+ТекДанные.Ставка+"?";
	СтруктураПраметров = Новый Структура("ПунктОтгрузки,Регион,Город,Расстояние,Ставка,Автор,ДатаОбновления",ТекДанные.Откуда,ТекДанные.Регион,ТекДанные.Город,ТекДанные.Расстояние,ТекДанные.Ставка,ТекДанные.Автор,ТекДанные.ДатаОбновления);
	СтруктураСобытия = Новый Структура("ИмяСобытия, ДопПараметры","КомандаНеИспользуется",СтруктураПраметров);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьРегионПоШаблону(Команда)
	
	ОткрытьФорму("Обработка.ЖБИ_АРМЛогиста.Форма.ФормаЗаполненияПредварительнойСтавкиПоШаблону",
	Новый Структура(),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаЗаполненияПредварительнойСтавкиПоШаблону"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьВзаимодействие(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПоставщиков");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Партнер", ТекДанные.Поставщик);
	ЗначенияЗаполнения.Вставить("Исполнитель", ТекущийПользователь);
	
	ОткрытьФорму("РегистрСведений.ЖБИ_ВзаимодействиеСПартнером.Форма.ФормаЗаписи",
	Новый Структура("ЗначенияЗаполнения",ЗначенияЗаполнения),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаСозданияВзаимодействия"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьВзаимодействие(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"СписокВзаимодействие");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КлючЗаписи = ПолучитьКлючЗаписиВзаимодействия(ТекДанные);
	
	ОткрытьФорму("РегистрСведений.ЖБИ_ВзаимодействиеСПартнером.Форма.ФормаЗаписи",
	Новый Структура("Ключ",КлючЗаписи),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированияВзаимодействия"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьСтатусАктивностиКлиента(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПоставщиков");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьНовый = Ложь;
	КлючЗаписи = ПолучитьКлючиЗаписиСтатусАктивностиКлиента(ТекДанные,ОткрытьНовый);
	
	Если ОткрытьНовый Тогда 
		ОткрытьФорму("РегистрСведений.ЖБИ_СтатусАктивностиКлиента.Форма.ФормаЗаписи",
		Новый Структура("Партнер,СтатусКонтрагента,Автор",ТекДанные.Поставщик,ТекДанные.Статус,ТекущийПользователь),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ВводАктивностиКлиента"));
	Иначе
		ОткрытьФорму("РегистрСведений.ЖБИ_СтатусАктивностиКлиента.Форма.ФормаЗаписи",
		Новый Структура("Ключ",КлючЗаписи),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ВводАктивностиКлиента"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаРассчитатьГрадациюЦен(Команда)
	
	Поставщик = ОтборПартнер;
	Если Не ЗначениеЗаполнено(Поставщик) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите поставщика");
		Возврат;
	КонецЕсли;
	Текст = " Выполнить расчет предварительных цен по поставщику " + Поставщик + "?";
	СтруктураСобытия = Новый Структура("ИмяСобытия, Поставщик","КомандаРассчитатьГрадациюЦен",Поставщик);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "СписокПоставщик" Тогда
		КомандаИзменитьПоставщика("");
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "СписокЦенаПрайсаСНДС" Тогда 	
		КомандаИзменитьЦену("");
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "СписокСкидка" Тогда 	
		КомандаИзменитьСкидку("");
	Иначе 
		КомандаИзменитьПоставщика("");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ТаблицаПоставщиков

&НаКлиенте
Процедура ТаблицаПоставщиковПриАктивизацииСтроки(Элемент)	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоставщиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаПоставщиковСсылкаПартнер"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "ТаблицаПоставщиковСсылкаКонтрагент" Тогда
		КомандаИзменитьПоставщика("");
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаПоставщиковПроцентНаценки" Тогда 
		КомандаИзменитьПроцентНаценки("");
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаПоставщиковДопустимаяСкидка" Тогда
		КомандаИзменитьДопустимуюСкидку("");
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаПоставщиковТранспортныйПроцент" Тогда 
		КомандаИзменитьТранспортныйПроцент("");
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаПоставщиковИндивидуальнаяЦена" Тогда 
		КомандаУстановитьИндивидуальнуюЦену("");
	Иначе 
		КомандаИзменитьПоставщика("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоставщиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПоставщиковПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область СписокВзаимодействие

&НаКлиенте
Процедура СписокВзаимодействиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"СписокВзаимодействие");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КлючЗаписи = ПолучитьКлючЗаписиВзаимодействия(ТекДанные);
	
	ОткрытьФорму("РегистрСведений.ЖБИ_ВзаимодействиеСПартнером.Форма.ФормаЗаписи",
	Новый Структура("Ключ",КлючЗаписи),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированияВзаимодействия"));	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВзаимодействиеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ТаблицаПредварительныхСтавок

&НаКлиенте
Процедура ТаблицаПредварительныхСтавокПередУдалением(Элемент, Отказ)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредварительныхСтавокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредварительныхСтавокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	КомандаИзменитьСтавку("");	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиТаблицаПредварительныхСтавок()
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПредварительныхСтавок");
	Если ТекДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ОтборПартнер) Тогда 
		Возврат;
	КонецЕсли;

	ЗаполнитьТаблицуГрадацииЦен(ТекДанные.Поставщик);
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элементы.ОтборПартнер,ТаблГрадацииЦен,ЭтотОбъект,"Партнер",Неопределено,Истина);
	Элементы.ТаблГрадацииЦен.Обновить();
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредварительныхСтавокПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиТаблицаПредварительныхСтавок", 1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ТаблГрадацииЦен

&НаКлиенте
Процедура ТаблГрадацииЦенПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	//Если Копирование Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//Поставщик = ОтборПартнер;
	//Если Не ЗначениеЗаполнено(Поставщик) Тогда 
	//	ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите поставщика");
	//	Возврат;
	//КонецЕсли;
	//
	//ОткрытьФорму("РегистрСведений.ЖБИ_ГрадацияЦенПредварительныхСтавок.ФормаЗаписи",
	//Новый Структура("ЗначенияЗаполнения", Новый Структура("Партнер, Автор", Поставщик, ТекущийПользователь)),
	//ЭтаФорма,,,,
	//Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированияТаблГрадацииЦен"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()

	ИмяОперации = ПолучитьИмяОперации();
	
	ДоступностьПроцентСкидки = ЗначениеЗаполнено(ОтборПартнер) И ИмяОперации = "КомандаТаблицаСкидок";
	Элементы.ПроцентСкидки.Доступность = ДоступностьПроцентСкидки;
	Элементы.КомандаЗаполнитьСкидку.Доступность = ДоступностьПроцентСкидки;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ЭтаФорма.Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты() Цикл
			Если ЭтаФорма.Параметры.Свойство(Реквизит.Имя) Тогда
				ЭтаФорма[Реквизит.Имя] = ЭтаФорма.Параметры[Реквизит.Имя];
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	//КомандаТаблицаСкидок("");
	КомандаТаблицаПоставщиков("");
	УстановитьПараметрыДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатВыполнения = Новый Структура("СообщениеОбОшибке","");	
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		Если ДополнительныеПараметры.Свойство("ИмяСобытия")
			И ЗначениеЗаполнено(ДополнительныеПараметры.ИмяСобытия) Тогда
			Если ДополнительныеПараметры.ИмяСобытия = "ВопросКомандаЗаполнитьСкидку" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				
				СообщениеОбОшибки = "";
				МассивНоменклатуры = Новый Массив;
				РезультатЗаписи = ЗаполнитьСкидкуСервер(МассивНоменклатуры,ОтборПартнер,ПроцентСкидки,СообщениеОбОшибки);
				Если Не РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;
				
				Элементы.Список.Обновить();
				
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВводЗначенияЧисло" Тогда 
				
				Если Результат = Неопределено
					ИЛИ Результат < 0  Тогда 
					Возврат;
				КонецЕсли;
				
				СообщениеОбОшибки = "";
				Поставщик = ДополнительныеПараметры.Поставщик;
				МассивНоменклатуры = Новый Массив;
				МассивНоменклатуры.Добавить(ДополнительныеПараметры.НоменклатураПоставщика);
				РезультатЗаписи = ЗаполнитьСкидкуСервер(МассивНоменклатуры,Поставщик,Результат,СообщениеОбОшибки);
				Если Не РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;
				
				Элементы.Список.Обновить();
				
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВводЗначенияЧислоДопустимаяСкидка" Тогда 
				
				Если Результат = Неопределено  
					ИЛИ Результат = 0 Тогда 
					Возврат;
				КонецЕсли;
				
				СообщениеОбОшибки = "";
				Поставщик = ДополнительныеПараметры.Поставщик;
				РезультатЗаписи = ЗаполнитьДопустимуюСкидкуСервер(Поставщик,Результат,СообщениеОбОшибки);
				Если Не РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;
				
				Элементы.ТаблицаПоставщиков.Обновить();
				
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВводЗначенияЧислоПроцентНаценки" Тогда 
				
				Если Результат = Неопределено  
					ИЛИ Результат = 0 Тогда 
					Возврат;
				КонецЕсли;
				
				СообщениеОбОшибки = "";
				Поставщик = ДополнительныеПараметры.Поставщик;
				РезультатЗаписи = ЗаполнитьПроцентНаценкиСервер(Поставщик,Результат,СообщениеОбОшибки);
				Если Не РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;
				
				Элементы.ТаблицаПоставщиков.Обновить();
				
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВводЗначенияЧислоТранспортныйПроцент" Тогда 
				
				Если Результат = Неопределено
					ИЛИ Результат = 0 Тогда 
					Возврат;
				КонецЕсли;
				
				СообщениеОбОшибки = "";
				Поставщик = ДополнительныеПараметры.Поставщик;
				РезультатЗаписи = ЗаполнитьТранспортныйПроцентСервер(Поставщик,Результат,СообщениеОбОшибки);
				Если Не РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;
				
				Элементы.ТаблицаПоставщиков.Обновить();
				
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВводЗначенияЧислоЦенаПоставщика" Тогда 
				
				Если Результат = Неопределено 
					ИЛИ Результат < 0 Тогда 
					Возврат;
				КонецЕсли;
				
				СообщениеОбОшибки = "";
				Поставщик = ДополнительныеПараметры.Поставщик;
				МассивНоменклатуры = Новый Массив;
				МассивНоменклатуры.Добавить(ДополнительныеПараметры.НоменклатураПоставщика);
				РезультатЗаписи = ЗаполнитьЦенуПоставщикаСервер(МассивНоменклатуры,Поставщик,Результат,СообщениеОбОшибки);
				Если Не РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;
				
				Элементы.Список.Обновить();
				
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВводЗначенияУстановитьДатуКонтроляЦены" Тогда 
				
				Если НЕ ЗначениеЗаполнено(Результат)
					ИЛИ Результат = Неопределено Тогда 
					Возврат;
				КонецЕсли;
				
				ДатуКонтроляЦены 	= Результат;
				Поставщик 			= ДополнительныеПараметры.Поставщик;
				УстановитьДатуКонтроляПоставщикаСервер(ДатуКонтроляЦены, Поставщик);					
				Элементы.ТаблицаПоставщиков.Обновить();
				
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаНеИспользуется" Тогда			
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				ДопПараметры = ДополнительныеПараметры.ДопПараметры;
				СообщениеОбОшибки = "";
				РезультатЗаписи = УдалитьПредварительнуюСтавку(ДопПараметры, СообщениеОбОшибки);
				Если Не РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;
				Элементы.ТаблицаПредварительныхСтавок.Обновить();				
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаНеИспользуетсяНоменклатураПоставщика" Тогда			
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				НоменклатураПоставщика = ДополнительныеПараметры.НоменклатураПоставщика;
				СообщениеОбОшибки = "";
				Отказ = Ложь; 
				Отказ = НеИспользуетсяНоменклатураПоставщикаСервер(НоменклатураПоставщика,СообщениеОбОшибки);	
				Если Отказ Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
					Возврат;
				КонецЕсли;				
				Элементы.Список.Обновить();	
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаПоставитьНаПаузуПоставщика"
				ИЛИ ДополнительныеПараметры.ИмяСобытия = "КомандаСнятьСПаузыПоставщика" Тогда			
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				ИмяСобытия 	= ДополнительныеПараметры.ИмяСобытия;
				Поставщик 	=  ДополнительныеПараметры.Поставщик;
				ПоставитьПоставщикаНаПаузуСервер(ИмяСобытия, Поставщик);					
				Элементы.ТаблицаПоставщиков.Обновить();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаПоставитьНаПаузуТовар"
				ИЛИ ДополнительныеПараметры.ИмяСобытия = "КомандаСнятьСПаузыТовар" Тогда			
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				ИмяСобытия 				= ДополнительныеПараметры.ИмяСобытия;
				Поставщик 				= ДополнительныеПараметры.Поставщик;
				НоменклатураПоставщика 	= ДополнительныеПараметры.НоменклатураПоставщика;
				ПоставитьТоварНаПаузуСервер(ИмяСобытия, Поставщик, НоменклатураПоставщика);					
				Элементы.Список.Обновить();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаУстановитьИндивидуальнуюЦену"
				ИЛИ ДополнительныеПараметры.ИмяСобытия = "КомандаСнятьИндивидуальнуюЦену" Тогда
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				ИмяСобытия 	= ДополнительныеПараметры.ИмяСобытия;
				Поставщик 	= ДополнительныеПараметры.Поставщик;
				УстановитьИндивидуальнуюЦенуСервер(ИмяСобытия,Поставщик);
				Элементы.ТаблицаПоставщиков.Обновить();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаПередатьТоварДругомуПоставщику" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;				
				ПоказатьФормуВыбораПоставщика();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВводПоставщика" Тогда 
				Если Результат = Неопределено
					Или Не ЗначениеЗаполнено(Результат) Тогда 
					Возврат;
				КонецЕсли;	
				
				ЭтоПоставщик = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Результат,"Поставщик"); 
				Если Не ЭтоПоставщик Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю("Нельзя указывать клиента, выберите поставщика");
					Возврат;
				КонецЕсли;
				
				СообщениеОбОшибки 	= "";
				Отказ 				= ПередатьТоварДругомуПоставщикуСервер(ДополнительныеПараметры.Поставщик,Результат,СообщениеОбОшибки);
				Если Отказ Тогда
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
					Возврат;
				КонецЕсли;	
				ОбщегоНазначенияКлиент.СообщитьПользователю("Данные по номенклатуре поставщика обновлены");
				Элементы.Список.Обновить();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаРассчитатьГрадациюЦен" Тогда
				Поставщик 			= ДополнительныеПараметры.Поставщик;
				СообщениеОбОшибки 	= "";
				ВыполнитьРасчетЦенПоПредварительнымСтавкамСервер(Поставщик, ТекущийПользователь, СообщениеОбОшибки);
				Если Не ПустаяСтрока(СообщениеОбОшибки) Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				Иначе 
					ОбщегоНазначенияКлиент.СообщитьПользователю("Расчет градации цен предварительных ставок выполнен");
				КонецЕсли;
				Элементы.ТаблицаПредварительныхСтавок.Обновить();
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;

	Если  ДополнительныеПараметры = "ФормаРедактированиеПартнера" Тогда //редактирвоание партнера 
		//Элементы.ТаблицаПоставщиков.Обновить();
	ИначеЕсли ДополнительныеПараметры = "ФормаСозданияСтавки"
		ИЛИ ДополнительныеПараметры = "ФормаРедактированиеСтавки" // создание/редактирование ставки
		ИЛИ ДополнительныеПараметры = "ФормаЗаполненияПредварительнойСтавкиПоШаблону"
		ИЛИ ДополнительныеПараметры = "ФормаРедактированиеРасстояние" Тогда //заполнение ставки по шаблону
		Элементы.ТаблицаПредварительныхСтавок.Обновить();
	ИначеЕсли ДополнительныеПараметры = "ФормаСозданияВзаимодействия" Тогда //создание взаимодействия		
		Элементы.СписокВзаимодействие.Обновить();
	ИначеЕсли ДополнительныеПараметры = "ФормаРедактированияВзаимодействия" Тогда //редактирвоание взаимодействия
		Элементы.СписокВзаимодействие.Обновить();
	ИначеЕсли ДополнительныеПараметры = "ФормаРедактированияТаблГрадацииЦен" Тогда 
		Элементы.ТаблГрадацииЦен.Обновить();
	ИначеЕсли ДополнительныеПараметры = "ВводАктивностиКлиента" Тогда
		Элементы.ТаблицаПоставщиков.Обновить();	
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаПоставщиков");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущийАктивныйПартнер <> ТекДанные.Поставщик Тогда
		ЗаполнитьВзамодействияПартнера(ТекДанные.Поставщик);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти