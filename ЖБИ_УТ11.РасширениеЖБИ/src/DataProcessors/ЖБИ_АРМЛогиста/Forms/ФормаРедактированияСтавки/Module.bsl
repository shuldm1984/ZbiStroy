
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

&НаКлиенте
Процедура УстановитьДоступностьПолей()
	ДоступностьПолей 					= ЖБИ_ОбщийМодульДокументыСервер.ОпределитьДоступностьРоли("ЖБИ_ОсновнаяРоль");
	//Элементы.ГруппаРасчет.Доступность 	= ДоступностьПолей;
	Элементы.Ставка.Доступность			= ДоступностьПолей; 
	Элементы.Цена.Доступность			= ДоступностьПолей;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормыИнформацию()
	УстановитьДоступностьПолей();	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораАдресныхОбъектов(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИмяУровня = ИмяУровняПоНазваниюЭлемента(Элемент.Имя);
	
	РодительскийИдентификатор = ИдентификаторРодителяУровняАдреса(ИмяУровня, НаселенныйПунктДетально, ТипАдреса);
	Уровень = РаботаСАдресамиКлиентСервер.СопоставлениеНаименованиеУровнюАдреса(ИмяУровня);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипАдреса", ТипАдреса);
	ПараметрыОткрытия.Вставить("Уровень",   Уровень);
	ПараметрыОткрытия.Вставить("Родитель",  РодительскийИдентификатор);
	
	ОткрытьФорму("Обработка.РасширенныйВводКонтактнойИнформации.Форма.ВыборАдресаПоУровню", ПараметрыОткрытия, Элемент);
	Модифицированность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаселенныйПунктДетальноПоИдентификатору(ИдентификаторНаселенногоПункта)
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.СписокРеквизитовНаселенныйПункт(ИдентификаторНаселенногоПункта);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеУровняАдреса(Адрес, ИмяУровня, ДобавлятьСокращение = Истина)
	
	Если ИмяУровня = "Locality"
		И Не РаботаСАдресамиКлиентСервер.ЭтоМуниципальныйАдрес(Адрес.AddressType)
		И Адрес.localityId = Адрес.cityId Тогда
			Возврат "";
	КонецЕсли;
	
	Если Адрес.Свойство(ИмяУровня) И ЗначениеЗаполнено(Адрес[ИмяУровня]) Тогда
		Если ДобавлятьСокращение Тогда
			Сокращение = ?(ПустаяСтрока(Адрес[ИмяУровня +"Type"]), "", " " + Адрес[ИмяУровня +"Type"]);
			Возврат Адрес[ИмяУровня] + Сокращение;
		Иначе
			Возврат Адрес[ИмяУровня];
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаСервереБезКонтекста
Функция ИдентификаторРодителяУровняАдреса(Знач ИмяУровня, Знач НаселенныйПунктДетально, Знач ТипАдреса)
	
	РодительскийИдентификатор = Неопределено;
	ИменаУровнейАдреса = РаботаСАдресамиКлиентСервер.ИменаУровнейАдреса(ТипАдреса, Ложь);
	Для каждого УровеньАдреса Из ИменаУровнейАдреса Цикл
		Если УровеньАдреса = ИмяУровня Тогда
			Возврат РодительскийИдентификатор;
		КонецЕсли;
		Если ЗначениеЗаполнено(НаселенныйПунктДетально[УровеньАдреса + "Id"]) Тогда
			РодительскийИдентификатор = НаселенныйПунктДетально[УровеньАдреса + "Id"];
		КонецЕсли;
	КонецЦикла;
	
	Возврат РодительскийИдентификатор;
	
КонецФункции

&НаКлиенте
Функция ИмяУровняПоНазваниюЭлемента(ИмяЭлемента)
	
	ИменаУровней = Новый Соответствие;
	ИменаУровней.Вставить("СубъектРФ", "Area");
	ИменаУровней.Вставить("Район", "District");
	ИменаУровней.Вставить("МуниципальныйРайон", "MunDistrict");
	ИменаУровней.Вставить("Город", "City");
	ИменаУровней.Вставить("Поселение", "Settlement");
	ИменаУровней.Вставить("ВнутригородскойРайон", "CityDistrict");
	ИменаУровней.Вставить("НаселенныйПункт", "Locality");
	ИменаУровней.Вставить("Территория", "Territory");
	
	Возврат ИменаУровней[ИмяЭлемента];
	
КонецФункции

&НаКлиенте
Процедура ОпределитьПоляАдреса()
	
	Регион               = ПредставлениеУровняАдреса(НаселенныйПунктДетально, "Area");
	Район                = ПредставлениеУровняАдреса(НаселенныйПунктДетально, "District");
	МуниципальныйРайон   = ПредставлениеУровняАдреса(НаселенныйПунктДетально, "MunDistrict", Ложь);
	Город                = ПредставлениеУровняАдреса(НаселенныйПунктДетально, "City");
	Поселение            = ПредставлениеУровняАдреса(НаселенныйПунктДетально, "Settlement", Ложь);
	ВнутригородскойРайон = ПредставлениеУровняАдреса(НаселенныйПунктДетально, "CityDistrict");
	НаселенныйПункт      = ПредставлениеУровняАдреса(НаселенныйПунктДетально, "Locality");
	Территория           = ПредставлениеУровняАдреса(НаселенныйПунктДетально, "Territory");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПартнераНаСервере()	
	Партнер = ПунктОтгрузки.Владелец;		
КонецПроцедуры

&НаСервере
Функция СоздатьОбновитьЗаписиРегистраПредварительныхСтавокСервер(СообщениеОбОшибке)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПунктОтгрузки",ПунктОтгрузки);
	СтруктураПараметров.Вставить("Регион",Регион);
	СтруктураПараметров.Вставить("Город",Город);
	СтруктураПараметров.Вставить("Адрес",Адрес);
	СтруктураПараметров.Вставить("АдресЗначенияПолей",АдресЗначенияПолей);
	СтруктураПараметров.Вставить("Расстояние",Расстояние);
	СтруктураПараметров.Вставить("Ставка",Ставка);
	СтруктураПараметров.Вставить("Автор",Пользователи.ТекущийПользователь());
	СтруктураПараметров.Вставить("ДатаОбновления",ТекущаяДатаСеанса());
	ТаблицаНабораЗаписей = РегистрыСведений.ЖБИ_РасчетПредварительныхСтавок.ЗаполнитьТаблицуНабораЗаписей(СтруктураПараметров);
	
	Результат = РегистрыСведений.ЖБИ_РасчетПредварительныхСтавок.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,, СообщениеОбОшибке);
	Если Не Результат Тогда 
		Возврат Результат;
	КонецЕсли;
	
	//Результат = Обработки.ЖБИ_АРМЛогиста.СоздатьОбновитьЗаписиРегистраСведенийПоРегионуПоставщика(ТаблицаНабораЗаписей,СообщениеОбОшибке);
	//Если Не Результат Тогда 
	//	Возврат Результат;
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти	

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_ЭЛЕМЕНТОВ_УПРАВЛЕНИЯ_ФОРМЫ

&НаКлиенте
Процедура ДекорацияМаршрутНаКартеНажатие(Элемент)
	
	АдресОткуда = ЖБИ_ОбщийМодульКлиентСервер.URLEncode(ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ПунктОтгрузки,"Адрес").Адрес);
	АдресКуда 	= ?(Не ПустаяСтрока(НаселенныйПункт),НаселенныйПункт,Город);
	ЖБИ_ОбщийМодульДокументы.ОткрытьНавигационнуюСсылкуЯндекс(АдресОткуда, АдресКуда);
	
КонецПроцедуры

&НаКлиенте
Процедура СубъектРФНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФормуВыбораАдресныхОбъектов(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГородНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФормуВыбораАдресныхОбъектов(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НаселПунктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФормуВыбораАдресныхОбъектов(Элемент, ДанныеВыбора, СтандартнаяОбработка);		
КонецПроцедуры

&НаКлиенте
Процедура СтавкаПриИзменении(Элемент)	
	Цена = ?(Расстояние = 0,0,Ставка/Расстояние);	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	Ставка = Расстояние * Цена;	
КонецПроцедуры

&НаКлиенте
Процедура СубъектРФОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НаселПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
		
	Сообщение = Новый СообщениеПользователю;
	
	////Откуда
	//Если ПустаяСтрока(ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ПунктОтгрузки,"Регион")) Тогда 
	//	Сообщение.Текст = "Укажите обязательное поле Регион в поле Пункт отгрузки";
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецЕсли;
	//
	//Если ПустаяСтрока(ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ПунктОтгрузки,"Город")) Тогда 
	//	Сообщение.Текст = "Укажите обязательное поле Город в поле Пункт отгрузки";
	//	Сообщение.Сообщить();
	//	Возврат;
	//КонецЕсли;
	
	//Куда
	Если ПустаяСтрока(Регион) Тогда 
		Сообщение.Текст = "Укажите обязательное поле Регион в адресе куда";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Город) Тогда
		Сообщение.Текст = "Укажите обязательное поле Город в адресе куда";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	Результат = СоздатьОбновитьЗаписиРегистраПредварительныхСтавокСервер(СообщениеОбОшибке);
	Если Не Результат Тогда
		Сообщение.Текст = СообщениеОбОшибке;
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли;
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ПунктОтгрузкиПриИзменении(Элемент)
	ЗаполнитьПартнераНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
		ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(
	    Элемент,
		ЭтотОбъект,
		"Адрес",
		СтандартнаяОбработка);
		
КонецПроцедуры

#КонецОбласти

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ЭтаФорма.Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты() Цикл
			Если ЭтаФорма.Параметры.Свойство(Реквизит.Имя) Тогда
				ЭтаФорма[Реквизит.Имя] = ЭтаФорма.Параметры[Реквизит.Имя];
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		Возврат;
	КонецЕсли;
	
	ТипАдреса = "Административно-территориальный";
	НаселенныйПунктДетально = УправлениеКонтактнойИнформацией.ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес); // Новый адрес
	НаселенныйПунктДетально.AddressType = РаботаСАдресамиКлиентСервер.МуниципальныйАдрес();
	
	ЕстьПравоЗагружатьКлассификатор = Обработки.РасширенныйВводКонтактнойИнформации.ЕстьВозможностьИзмененияАдресногоКлассификатора();
	СведенияОАдресномКлассификаторе = УправлениеКонтактнойИнформациейСлужебныйПовтИсп.СведенияОДоступностиАдресногоКлассификатора();
	КлассификаторДоступен           = СведенияОАдресномКлассификаторе["КлассификаторДоступен"];
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СтавкаПриИзменении("");
	ОбновитьЭлементыФормыИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(Элемент, Знач ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ПустаяСтрока(ВыбранноеЗначение) Тогда
		ТекстПредупреждения = НСтр("ru = 'Выбор из списка недоступен, т.к в адресном классификаторе отсутствует информация о адресных сведениях.'");
		ПоказатьПредупреждение(, ТекстПредупреждения );
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		 И ВыбранноеЗначение.Свойство("Идентификатор")
		 И ПустаяСтрока(ВыбранноеЗначение.Идентификатор) Тогда
		 СтандартнаяОбработка = Ложь;
			Возврат;
	КонецЕсли;
	
	СведенияОбАдресе = Новый Структура();
	СведенияОбАдресе.Вставить("Муниципальный", РаботаСАдресамиКлиентСервер.ЭтоМуниципальныйАдрес(ТипАдреса));
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Отказ Или ПустаяСтрока(ВыбранноеЗначение.Идентификатор) Тогда
			Возврат;
		КонецЕсли;
		
		Идентификатор = ВыбранноеЗначение.Идентификатор;
		
	Иначе
		Идентификатор = ВыбранноеЗначение;
	КонецЕсли;
	СведенияОбАдресе.Вставить("Идентификатор", Идентификатор);
	
	СтандартнаяОбработка = Ложь;
	НаселенныйПунктДетально = НаселенныйПунктДетальноПоИдентификатору(СведенияОбАдресе);
	ОпределитьПоляАдреса();
	Элемент.ОбновитьТекстРедактирования();
	
	Если ЕстьПравоЗагружатьКлассификатор И Не КлассификаторДоступен И ВыбранноеЗначение.ПредлагатьЗагрузкуКлассификатора Тогда
		// Предлагаем загрузить классификатор.
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Данные для ""%1"" не загружены.'"));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

