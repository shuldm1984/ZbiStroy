#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ
&НаКлиенте
Перем СтараяНоменклатура; // Используется в механизмах обработчиков событий табличной части Товары
&НаКлиенте
Перем СтараяНоменклатураПоставщика; // Используется в механизмах обработчиков событий табличной части Товары
&НаКлиенте
Перем СтараяХарактеристика; // Используется в механизмах обработчиков событий табличной части Товары
&НаКлиенте
Перем ИзмененаЦена; // Используется в механизмах обработчиков событий табличной части Товары

#КонецОбласти

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
//функция выполняет приведение строки к числу
// Параметры:
//  ЧислоСтрокой           - Строка - Строка приводимая к числу
//  ВозвращатьНеопределено - Булево - Если Истина и строка содержит некорректное значение, то возвращать Неопределено
//
// Возвращаемое значение:
//  Число
//
Функция ПривестиСтрокуКЧислу(ЧислоСтрокой, ВозвращатьНеопределено = Ложь) Экспорт
    
    ОписаниеТипаЧисла = Новый ОписаниеТипов("Число");
    ЗначениеЧисла = ОписаниеТипаЧисла.ПривестиЗначение(ЧислоСтрокой);
    
    Если ВозвращатьНеопределено И (ЗначениеЧисла = 0) Тогда
        
        Стр = Строка(ЧислоСтрокой);
        Если Стр = "" Тогда
            Возврат Неопределено;
        КонецЕсли;
        
        Стр = СтрЗаменить(СокрЛП(Стр), "0", "");
        Если (Стр <> "") И (Стр <> ".") И (Стр <> ",") Тогда
            Возврат Неопределено;
        КонецЕсли;
    КонецЕсли;
    
    Возврат ЗначениеЧисла;    
    
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьТипБулево(Стр)
	
	Результат = Неопределено;
	Если Стр = "Да" Тогда
		Результат = Истина;
	ИначеЕсли Стр = "Нет" Тогда
		Результат = Ложь;
	ИначеЕсли Стр = "Истина" Тогда
		Результат = Истина;
	ИначеЕсли Стр = "Ложь" Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоРегистрацияЦенПоставщика(Форма)
	
	Возврат (ЭтоРегистрацияЦенНоменклатурыПоставщика(Форма)
		ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма)
		ИЛИ ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма));
	
КонецФункции

&НаСервере
Функция ЭтоРегистрацияЦенНоменклатурыПоставщика(Форма)
	
	Возврат (Форма.КодФормы = "РегистрацияЦенНоменклатурыПоставщика");
	
КонецФункции

&НаСервере
Функция ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма)
	
	Возврат (Форма.КодФормы = "ЗагрузкаЦенПоставщикаИзВнешнихФайлов");
	
КонецФункции

&НаСервере
Функция ЭтоУстановкаЦенНоменклатуры(Форма)
	
	Возврат (Форма.КодФормы = "УстановкаЦенНоменклатуры");
	
КонецФункции

&НаСервере
Функция ДобавитьГруппуФормы(Форма,
	                        Имя,
	                        Заголовок,
	                        ОтображатьВШапке,
	                        КартинкаШапки,
	                        ГруппировкаКолонок,
	                        Родитель)
	
	НоваяГруппа                  = Форма.Элементы.Добавить("ДеревоЦен" + Имя, Тип("ГруппаФормы"), ?(Родитель = Неопределено, Форма.Элементы.ДеревоЦен, Родитель));
	НоваяГруппа.Заголовок        = ?(ЗначениеЗаполнено(Заголовок), Заголовок, Имя);
	НоваяГруппа.Вид              = ВидГруппыФормы.ГруппаКолонок;
	НоваяГруппа.Группировка      = ГруппировкаКолонок;
	НоваяГруппа.ОтображатьВШапке = ОтображатьВШапке;
	
	Если ОтображатьВШапке И КартинкаШапки <> Неопределено Тогда
		НоваяГруппа.КартинкаШапки = КартинкаШапки;
	КонецЕсли;
	
	Возврат НоваяГруппа;
	
КонецФункции

&НаСервере
Функция ДобавитьПолеФормы(Форма, Имя, ДополнительныеПараметры)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Заголовок",              Неопределено);
	СтруктураПараметров.Вставить("ОбработчикПриИзменении", "");
	СтруктураПараметров.Вставить("ОбработчикНачалоВыбора", "");
	СтруктураПараметров.Вставить("ШиринаПоля",             0);
	СтруктураПараметров.Вставить("ЦветФона",               Неопределено);
	СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      Неопределено);
	СтруктураПараметров.Вставить("Родитель",               Неопределено);
	СтруктураПараметров.Вставить("КартинкаШапки",          Неопределено);
	СтруктураПараметров.Вставить("ПутьКДанным",            Неопределено);
	СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Ложь);
	СтруктураПараметров.Вставить("СвязиПараметровВыбора",  Неопределено);
	СтруктураПараметров.Вставить("ОтображатьВШапке",       Истина);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДополнительныеПараметры);
	
	НовоеПоле                     = Форма.Элементы.Добавить("ДеревоЦен" + Имя, Тип("ПолеФормы"), ?(СтруктураПараметров.Родитель = Неопределено, Форма.Элементы.ДеревоЦен, СтруктураПараметров.Родитель));
	НовоеПоле.ПутьКДанным         = ?(ЗначениеЗаполнено(СтруктураПараметров.ПутьКДанным), СтруктураПараметров.ПутьКДанным, "ДеревоЦен." + Имя);
	НовоеПоле.Заголовок           = ?(ЗначениеЗаполнено(СтруктураПараметров.Заголовок), СтруктураПараметров.Заголовок, Имя);
	НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	НовоеПоле.Вид                 = ВидПоляФормы.ПолеВвода;
	НовоеПоле.ТолькоПросмотр      = СтруктураПараметров.ТолькоПросмотрПоля;
	НовоеПоле.Ширина              = СтруктураПараметров.ШиринаПоля;
	НовоеПоле.ОтображатьВШапке    = СтруктураПараметров.ОтображатьВШапке;
	
	НовоеПоле.РастягиватьПоГоризонтали = Ложь;
	
	Если СтруктураПараметров.СвязиПараметровВыбора <> Неопределено Тогда
		НовоеПоле.СвязиПараметровВыбора = СтруктураПараметров.СвязиПараметровВыбора;
	КонецЕсли;
	
	Если СтруктураПараметров.ЦветФонаЗаголовка <> Неопределено Тогда
		НовоеПоле.ЦветФонаЗаголовка = СтруктураПараметров.ЦветФонаЗаголовка;
	КонецЕсли;
	
	Если СтруктураПараметров.ЦветФона <> Неопределено Тогда
		НовоеПоле.ЦветФона = СтруктураПараметров.ЦветФона;
	КонецЕсли;
		
	Если СтруктураПараметров.КартинкаШапки <> Неопределено Тогда
		НовоеПоле.КартинкаШапки = СтруктураПараметров.КартинкаШапки;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СтруктураПараметров.ОбработчикПриИзменении) Тогда
		НовоеПоле.УстановитьДействие("ПриИзменении", СтруктураПараметров.ОбработчикПриИзменении);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураПараметров.ОбработчикНачалоВыбора) Тогда
		НовоеПоле.УстановитьДействие("НачалоВыбора", СтруктураПараметров.ОбработчикНачалоВыбора);
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

// Формирует таблицу цен на форме
//
// Параметры:
//  Форма - Управляемая форма
//
&НаСервере
Процедура ПостроитьДеревоЦен(Форма, ИмяТаблицы = "ДеревоЦен") Экспорт
	
	ДобавляемыеКолонкиТаблицыЦен = Новый Массив();
	УдаляемыеКолонкиТаблицыЦен   = Новый Массив();
	УдаляемыеЭлементы            = Новый Массив();
	УсловныеОформления           = Новый Массив();
	
	Если ТипЗнч(Форма.ДеревоЦен) = Тип("ДанныеФормыКоллекция") Тогда
		ДеревоЗначений = Новый ТаблицаЗначений;
	Иначе
		ДеревоЗначений = Новый ДеревоЗначений;
	КонецЕсли;
	
	ДеревоЗначений.Колонки.Добавить("Номенклатура",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоЗначений.Колонки.Добавить("Характеристика",             Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДеревоЗначений.Колонки.Добавить("ИндексКартинки",             Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("ЕдиницаИзмерения",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ДеревоЗначений.Колонки.Добавить("Артикул",                    Новый ОписаниеТипов("Строка"));
	ДеревоЗначений.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	//shuldm +
	ДеревоЗначений.Колонки.Добавить("СтруктураСвойств", 		  Новый ОписаниеТипов("Структура"));
	ДеревоЗначений.Колонки.Добавить("Цена", 		  			  Новый ОписаниеТипов("Число"));
	ДеревоЗначений.Колонки.Добавить("ПредыдущаяДата", 		  	  Новый ОписаниеТипов("Дата"));
	ДеревоЗначений.Колонки.Добавить("ПредыдущаяЦена", 		  	  Новый ОписаниеТипов("Число"));
	//shuldm -
	
	Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
		
		ДеревоЗначений.Колонки.Добавить("НоменклатураПоставщика",     Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков"));
		
		Если ЭтоЗагрузкаЦенПоставщикаИзВнешнихФайлов(Форма) Тогда
			ДеревоЗначений.Колонки.Добавить("НоменклатураНаименование",              Новый ОписаниеТипов("Строка"));
			ДеревоЗначений.Колонки.Добавить("НоменклатураСопоставленаАвтоматически", Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("СтрокаСопоставлена",                    Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("КоличествоНоменклатурыДляВыбора",       Новый ОписаниеТипов("Число"));
			ДеревоЗначений.Колонки.Добавить("АртикулОтличается",                     Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("НоменклатураНаименованиеОтличается",    Новый ОписаниеТипов("Булево"));
			ДеревоЗначений.Колонки.Добавить("ЦенаНеРаспознана",                      Новый ОписаниеТипов("Булево"));
		КонецЕсли;
		
	Иначе
		ДеревоЗначений.Колонки.Добавить("ЦеноваяГруппа",      Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"));
		ДеревоЗначений.Колонки.Добавить("РеквизитСортировки", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
		
		Если ВидЦены.Выбрана Или ВидЦены.Влияет Тогда
			
			ИмяКолонки = ВидЦены.ИмяКолонки;
			
			ДеревоЗначений.Колонки.Добавить(                          ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("СтараяЦена"              + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)), ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ПроцентИзменения"        + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(05, 2, ДопустимыйЗнак.Любой)),           ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("СуммаИзменения"          + ИмяКолонки, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)),           ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ИзмененаВручную"         + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("ИзмененаАвтоматически"   + ИмяКолонки, Новый ОписаниеТипов("Булево"),                                                                 ВидЦены.Наименование);
			ДеревоЗначений.Колонки.Добавить("КартинкаИзмененаВручную" + ИмяКолонки, Новый ОписаниеТипов("Число"),                                                                 ВидЦены.Наименование);
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				ДеревоЗначений.Колонки.Добавить("Упаковка" + ИмяКолонки, Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"), "Упаковка");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкаОтступ = ДеревоЗначений.Колонки.Добавить("Отступ", Новый ОписаниеТипов("Строка"), НСтр("ru = 'Отступ'"));
	
	РеквизитыТаблицыЦен = Форма.ПолучитьРеквизиты(ИмяТаблицы);
	Для Каждого Реквизит Из РеквизитыТаблицыЦен Цикл
		Если СтрНайти(Реквизит.Имя, "ВидЦены") ИЛИ СтрНайти(Реквизит.Имя, "Отступ") Тогда
			УдаляемыеКолонкиТаблицыЦен.Добавить(ИмяТаблицы + "." + Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		Если СтрНайти(Колонка.Имя, "ВидЦены") Тогда
			УдаляемаяКолонка = УдаляемыеКолонкиТаблицыЦен.Найти(ИмяТаблицы + "." + Колонка.Имя);
			Если УдаляемаяКолонка <> Неопределено Тогда
				УдаляемыеКолонкиТаблицыЦен.Удалить(УдаляемаяКолонка);
			Иначе
				ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяТаблицы, Колонка.Заголовок, Истина));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ДобавляемыеКолонкиТаблицыЦен.Добавить(Новый РеквизитФормы(КолонкаОтступ.Имя, КолонкаОтступ.ТипЗначения, ИмяТаблицы, КолонкаОтступ.Заголовок, Истина));
	
	Если УдаляемыеКолонкиТаблицыЦен.Количество() > 0 Или ДобавляемыеКолонкиТаблицыЦен.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеКолонкиТаблицыЦен, УдаляемыеКолонкиТаблицыЦен);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из Форма.Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
		Если СтрНайти(ТекЭлемент.Имя, "ВидЦены") ИЛИ СтрНайти(ТекЭлемент.Имя, "Отступ") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого Оформление Из Форма.УсловноеОформление.Элементы Цикл
		Если Оформление.Представление = "СозданоПрограммно" Тогда
			УсловныеОформления.Добавить(Оформление);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Оформление Из УсловныеОформления Цикл
		Форма.УсловноеОформление.Элементы.Удалить(Оформление);
	КонецЦикла;
	
	Для Каждого ВидЦены Из Форма.ВыбранныеЦены Цикл
		
		ИмяКолонки = ВидЦены.ИмяКолонки;
		
		Если ВидЦены.Выбрана ИЛИ ?(Форма.ОтображатьВлияющиеЦены, ВидЦены.Влияет, Ложь) Тогда
			
			ЦветЗаголовка = Неопределено;
			ЦветФона      = Неопределено;
			КартинкаШапки = Неопределено;
			
			Если ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.Вручную Тогда
				
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗадаватьВручную;
				
			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБ
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗаполнятьПоДаннымИБПриПоступлении Тогда
				
				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенЗаполнятьПоДаннымИБ.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенЗаполнятьПоДаннымИБ;
				
			ИначеЕсли ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.РассчитыватьПоФормуламОтДругихВидовЦен
				ИЛИ ВидЦены.СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.НаценкаНаДругойВидЦен Тогда
				
				ЦветФона      = Метаданные.ЭлементыСтиля.КолонкаЦенРассчитыватьПоФормуламОтДругихВидовЦен.Значение;
				КартинкаШапки = БиблиотекаКартинок.СпособыЗаданияЦенРассчитыватьПоФормуламОтДругихВидовЦен;
				
			КонецЕсли;
			
			НоваяГруппа = ДобавитьГруппуФормы(Форма, "ГруппаЦены" + ИмяКолонки, Строка(ВидЦены.Ссылка) + ", " + Строка(ВидЦены.Валюта), Истина, КартинкаШапки, ГруппировкаКолонок.Горизонтальная, Неопределено);
			
			Если ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма) Или
				ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма) Тогда
				
				Если ЗначениеЗаполнено(Форма.ДатаДействующихЦен) Тогда
					ДатаДействующихЦен = КонецДня(Форма.ДатаДействующихЦен);
				Иначе
					ДатаДействующихЦен = НачалоДня(Форма.Дата)-1;
				КонецЕсли;
				ЗаголовокКолонкиСтараяЦена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Цена на %1'"), Формат(ДатаДействующихЦен, "ДЛФ=D"));
				
			Иначе
				
				ЗаголовокКолонкиСтараяЦена = ?(ВидЦены.Выбрана, НСтр("ru='Действующая цена'"), НСтр("ru='Цена'"));
				
			КонецЕсли;
			
			Если ВидЦены.Выбрана Тогда
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              ЗаголовокКолонкиСтараяЦена);
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"СтараяЦена" + ИмяКолонки, СтруктураПараметров);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Изменение'"));
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"СуммаИзменения" + ИмяКолонки, СтруктураПараметров);
				
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.ВыделятьОтрицательные = Истина;
				НовоеПоле.Подсказка = НСтр("ru = 'Изменение цены'");
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              "%");
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             6);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"ПроцентИзменения" + ИмяКолонки, СтруктураПараметров);
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				НовоеПоле.ВыделятьОтрицательные = Истина;
				НовоеПоле.Подсказка = НСтр("ru = 'Процент изменения цены'");
				
				НоваяГруппаЦена = ДобавитьГруппуФормы(Форма, "ГруппаЦена" + ИмяКолонки, НСтр("ru='Цена'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);
				
				НовоеПоле                     = Форма.Элементы.Добавить("ДеревоЦен" + "Картинка" + ИмяКолонки, Тип("ПолеФормы"), НоваяГруппаЦена);
				НовоеПоле.ПутьКДанным         = "ДеревоЦен.ИзмененаВручную" + ИмяКолонки;
				НовоеПоле.Заголовок           = "";
				НовоеПоле.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
				НовоеПоле.Вид                 = ВидПоляФормы.ПолеКартинки;
				НовоеПоле.ТолькоПросмотр      = Истина;
				НовоеПоле.Ширина              = 2;
				НовоеПоле.ОтображатьВШапке    = Ложь;
				НовоеПоле.КартинкаЗначений = БиблиотекаКартинок.Изменить;
				НовоеПоле.КартинкаШапки = БиблиотекаКартинок.Изменить;
				НовоеПоле.Видимость  = Истина;
				НовоеПоле.РастягиватьПоГоризонтали = Ложь;
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Цена'"));
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенЦенаПриИзменении");
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				
				НовоеПоле = ДобавитьПолеФормы(Форма, ИмяКолонки, СтруктураПараметров);
				
				
			Иначе
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              ЗаголовокКолонкиСтараяЦена);
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
				НовоеПоле = ДобавитьПолеФормы(Форма,"СтараяЦена" + ИмяКолонки, СтруктураПараметров);
				
				НовоеПоле.ЦветТекста = WebЦвета.Серый;
				
			КонецЕсли;
			
			Если Форма.ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяГруппаУпаковка = ДобавитьГруппуФормы(Форма, "ГруппаУпаковки" + ИмяКолонки, НСтр("ru='Ед. изм.'"), Ложь, Неопределено, ГруппировкаКолонок.ВЯчейке, НоваяГруппа);
				
				НоваяСвязь = Новый СвязьПараметраВыбора("Номенклатура", "Элементы." + ИмяТаблицы + ".ТекущиеДанные.Номенклатура", РежимИзмененияСвязанногоЗначения.НеИзменять);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Упаковка'"));
				СтруктураПараметров.Вставить("ОбработчикПриИзменении", "Подключаемый_ДеревоЦенУпаковкаПриИзменении");
				СтруктураПараметров.Вставить("ОбработчикНачалоВыбора", "Подключаемый_ДеревоЦенУпаковкаНачалоВыбора");
				СтруктураПараметров.Вставить("ШиринаПоля",             12);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппаУпаковка);
				СтруктураПараметров.Вставить("СвязиПараметровВыбора",  НовыеСвязи);
				СтруктураПараметров.Вставить("ОтображатьВШапке",       Ложь);
				
				ДобавитьПолеФормы(Форма,"Упаковка" + ИмяКолонки, СтруктураПараметров);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Ед. изм.'"));
				СтруктураПараметров.Вставить("ШиринаПоля",             8);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппаУпаковка);
				СтруктураПараметров.Вставить("ПутьКДанным",            ИмяТаблицы + ".Номенклатура.ЕдиницаИзмерения");
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
				ДобавитьПолеФормы(Форма, "ЕдиницаИзмерения" + ИмяКолонки, СтруктураПараметров);
				
			Иначе
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Заголовок",              НСтр("ru='Ед. изм.'"));
				СтруктураПараметров.Вставить("ШиринаПоля",             8);
				СтруктураПараметров.Вставить("ЦветФона",               ЦветФона);
				СтруктураПараметров.Вставить("ЦветФонаЗаголовка",      ЦветЗаголовка);
				СтруктураПараметров.Вставить("Родитель",               НоваяГруппа);
				СтруктураПараметров.Вставить("ПутьКДанным",            ИмяТаблицы + ".Номенклатура.ЕдиницаИзмерения");
				СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
				
				ДобавитьПолеФормы(Форма, "ЕдиницаИзмерения" + ИмяКолонки, СтруктураПараметров);
			КонецЕсли;
			
			// Условное оформление увеличившихся цен
			НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;
			
			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".СтараяЦена" + ИмяКолонки);
			
			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
			
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноСиний);
			
			// Условное оформление уменьшившихся цен
			НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
			НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
			НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
			НовыйЭлементУсловногоОформления.Использование = Истина;
			
			ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".СтараяЦена" + ИмяКолонки);
			
			НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НовоеПоле.Использование = Истина;
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
			
			НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноЗеленый);
			
			// Условное оформление единиц измерения
			НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, "ДеревоЦенЕдиницаИзмерения" + ИмяКолонки, "ДеревоЦен.Упаковка" + ИмяКолонки);
			
			Если ЭтоРегистрацияЦенПоставщика(Форма) Тогда
				
				// В регистрации цен поставщика - пустая цена не регистрируется при проведении
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".ХарактеристикиИспользуются");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = Ложь;
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не изменяется>'"));
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
				
				//
				
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ".Характеристика");
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ИмяКолонки);
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не изменяется>'"));
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
				
				// В регистрации цен поставщика - пустая цена не регистрируется при проведении
				НовыйЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
				НовыйЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = ИмяКолонки;
				НовыйЭлементУсловногоОформления.Представление = "СозданоПрограммно";
				НовыйЭлементУсловногоОформления.Использование = Истина;
				
				ЭлементОтбора = НовыйЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование = Истина;
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ИмяКолонки);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = 0;
				
				НовоеПоле = НовыйЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НовоеПоле.Использование = Истина;
				НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ПроцентИзменения" + ИмяКолонки);
				
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
				НовыйЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ШиринаПоля",             30);
	СтруктураПараметров.Вставить("ТолькоПросмотрПоля",     Истина);
	
	НовоеПоле = ДобавитьПолеФормы(Форма, "Отступ", СтруктураПараметров);
	НовоеПоле.ЦветТекста = WebЦвета.Серый;
	НовоеПоле.Видимость  = Истина;
	НовоеПоле.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НовоеПоле.РастягиватьПоГоризонтали = Истина;

	ДеревоЦенЗначение = Форма.РеквизитФормыВЗначение(ИмяТаблицы);
	ДеревоЦенЗначение.Колонки.Очистить();
	
	Для Каждого Колонка Из ДеревоЗначений.Колонки Цикл
		ДеревоЦенЗначение.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоЦенЗначение, ИмяТаблицы);
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ВыбранныеЦеныИзменены") Тогда
		Форма.ВыбранныеЦеныИзменены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоОбновлениеЦен") Тогда 
		ЭтоОбновлениеЦен = Параметры.ЭтоОбновлениеЦен;
		ЭтаФорма.Заголовок = "Обновление цен поставщика";
	КонецЕсли;

	КодФормы = "ЗагрузкаЦенПоставщикаИзВнешнихФайлов";
	
	Объект.Дата = КонецДня(ТекущаяДатаСеанса());
	
	ИспользоватьНоменклатуруПоставщиков    = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков");
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	ТипДанныхЗаполнения = ТипЗнч(Параметры.Основание);
	Объект.Партнер = Параметры.Партнер;
	
	Если Параметры.БлокироватьИзменениеОтбораПоПоставщику Тогда
		Элементы.Партнер.ТолькоПросмотр = Параметры.БлокироватьИзменениеОтбораПоПоставщику;
	КонецЕсли;
	
	УстановкаЦенСервер.ИнициализироватьВыбранныеЦены(ЭтаФорма);
	
	Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
		СтрокаТЧ.Выбрана = Параметры.ВидыЦен.Найти(СтрокаТЧ.Ссылка) <> Неопределено;
	КонецЦикла;
	
	ЗаполнитьСлужебныеКолонкиВидовЦен();
	
	ПостроитьДеревоЦен(ЭтаФорма);
	ИнициализироватьТабличныйДокумент();
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		СопоставлятьСправочники = Истина;
	КонецЕсли;

	Если Не ИспользоватьНоменклатуруПоставщиков Тогда
		Элементы.ДеревоЦенНоменклатура.КнопкаВыпадающегоСписка = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьКолонкиВидовЦен(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПринудительноЗакрытьФорму ИЛИ ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Готово И Модифицированность Тогда
		
		Отказ = Истина;
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект),
			НСтр("ru = 'Работа помощника будет завершена,
			           |все введенные данные будут потеряны. Закрыть помощник?'"),
			СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = "Закрыть" Тогда
		ПринудительноЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Настройки.Получить("НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	УстановкаЦенСервер.ИнициализироватьВыбранныеЦены(ЭтаФорма);
	
	НомерКолонки = 3;
	Для Каждого СтрокаТЧ Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма) Цикл
		
		СтрокаТЧ.НаименованиеПоиск = ВРег(СтрЗаменить(СтрокаТЧ.Наименование, " ", ""));
		СтрокаТЧ.ИмяКолонкиMXL = НомерКолонки;
		СтрокаТЧ.Выбрана = Истина;
		
		НомерКолонки = НомерКолонки + 1;
		
	КонецЦикла;
	
	ПостроитьДеревоЦен(ЭтаФорма);
	
	ИнициализироватьТабличныйДокумент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзменении(Элемент)
	
	СопоставлятьСправочники = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияНоменклатурыПриИзменении(Элемент)
	
	УстановитьОтборПоТоварам();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоНоменклатурыДляВыбора = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивНоменклатурыПоставщика = Новый Массив();
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Артикул) Тогда
		
		НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(
			Новый Структура("АртикулПоиск", ВРег(СтрЗаменить(ТекущиеДанные.Артикул, " ", ""))));
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНаименование) Тогда
		
		НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(
			Новый Структура("Наименование", ВРег(СтрЗаменить(ТекущиеДанные.НоменклатураНаименование, " ", ""))));
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если МассивНоменклатурыПоставщика.Найти(НайденнаяСтрока) = Неопределено Тогда
				МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИспользоватьНоменклатуруПоставщиков Тогда
		ЭлементФормы = Элементы.ДеревоЦенНоменклатураПоставщика;
	Иначе
		ЭлементФормы = Элементы.ДеревоЦенНоменклатура;
	КонецЕсли;
	
	ЭлементФормы.СписокВыбора.Очистить();
	
	Если МассивНоменклатурыПоставщика.Количество() > 0 Тогда
		
		Для Каждого ТекЭлемент Из МассивНоменклатурыПоставщика Цикл
			ЭлементФормы.СписокВыбора.Добавить(ТекЭлемент.Ссылка, ТекЭлемент.Наименование + " " + "(" + ТекЭлемент.Артикул + ")");
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	СтараяНоменклатураПоставщика = ТекущиеДанные.НоменклатураПоставщика;
	СтараяНоменклатура = ТекущиеДанные.Номенклатура;
	СтараяХарактеристика = ТекущиеДанные.Характеристика;
	ИзмененаЦена = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные.Номенклатура <> СтараяНоменклатура Или Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		
		Для Каждого ЭлементНоменклатура Из ДеревоЦен Цикл
			Если (ЭлементНоменклатура.Номенклатура = ТекущиеДанные.Номенклатура И ЭлементНоменклатура.Характеристика = ТекущиеДанные.Характеристика)
				ИЛИ (Не ЗначениеЗаполнено(ЭлементНоменклатура.Номенклатура)
				     И ЭлементНоменклатура.НоменклатураПоставщика = ТекущиеДанные.НоменклатураПоставщика) Тогда
				
				Если ТекущиеДанные.ПолучитьИдентификатор() <> ЭлементНоменклатура.ПолучитьИдентификатор() И ЗначениеЗаполнено(ЭлементНоменклатура.Номенклатура) Тогда
					Если Не ОтменаРедактирования Тогда
						Отказ = Истина;
						ОчиститьСообщения();
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Такая номенклатура уже введена.'"),,
							"ДеревоЦен");
					Иначе
						ТекущиеДанные.Номенклатура = СтараяНоменклатура;
						ТекущиеДанные.Характеристика = СтараяХарактеристика;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДеревоЦенНоменклатураПриИзмененииСервер(Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
		И Не ЗначениеЗаполнено(ТекущиеДанные.НоменклатураПоставщика) Тогда
		Если Не ОтменаРедактирования Тогда
			Отказ = Истина;
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Номенклатура не выбрана.'"),,
				"ДеревоЦен");
		Иначе
			ТекущиеДанные.НоменклатураПоставщика = СтараяНоменклатураПоставщика;
			ТекущиеДанные.Номенклатура = СтараяНоменклатура;
			ТекущиеДанные.Характеристика = СтараяХарактеристика;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные.Характеристика <> СтараяХарактеристика Тогда
		
		Для Каждого ЭлементНоменклатура Из ДеревоЦен Цикл
			Если (ЭлементНоменклатура.Номенклатура = ТекущиеДанные.Номенклатура И ЭлементНоменклатура.Характеристика = ТекущиеДанные.Характеристика)
				ИЛИ (Не ЗначениеЗаполнено(ЭлементНоменклатура.Номенклатура)
				     И ЭлементНоменклатура.НоменклатураПоставщика = ТекущиеДанные.НоменклатураПоставщика) Тогда
				
				Если ТекущиеДанные.ПолучитьИдентификатор() <> ЭлементНоменклатура.ПолучитьИдентификатор() Тогда
					Если Не ОтменаРедактирования Тогда
						Отказ = Истина;
						ОчиститьСообщения();
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Такая номенклатура уже введена.'"),,
							"ДеревоЦен");
					Иначе
						ТекущиеДанные.Номенклатура = СтараяНоменклатура;
						ТекущиеДанные.Характеристика = СтараяХарактеристика;
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДеревоЦенХарактеристикаПриИзмененииСервер(Элементы.ДеревоЦен.ТекущиеДанные.ПолучитьИдентификатор());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыДеревоЦен

&НаКлиенте
Процедура ДеревоЦенНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура(
				"Ссылка, Партнер",
				ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"),
				Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ТекущаяСтрока.СтрокаСопоставлена = ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоЦен.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура(
				"Ссылка, Партнер",
				ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"),
				Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоЦен.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура(
				"Ссылка,Партнер",
				ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"),
				Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ТекущаяСтрока.СтрокаСопоставлена = ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенЦенаПриИзмененииКлиент(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки  = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");
	Если СтрНайти(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены") Тогда
		ИмяТекущейКолонки = СтрЗаменить(ИмяТекущейКолонки, "ПроцентИзмененияВидЦены", "ВидЦены");
		ТекущиеДанные[ИмяТекущейКолонки] = Окр(
			ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки]
			*((ТекущиеДанные["ПроцентИзменения" + ИмяТекущейКолонки] / 100) + 1), 15, 2);
	КонецЕсли;
	
	ИмяКолонкиУпаковка = СтрЗаменить(
		СтрЗаменить(Элемент.Имя, "ПроцентИзмененияВидЦены", "ВидЦены"), "ДеревоЦенВидЦены", "УпаковкаВидЦены");
		
	Если СтрНайти(ИмяТекущейКолонки, "СуммаИзмененияВидЦены") Тогда
		ИмяТекущейКолонки = СтрЗаменить(ИмяТекущейКолонки, "СуммаИзмененияВидЦены", "ВидЦены");
		ТекущиеДанные[ИмяТекущейКолонки] = ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки] + ТекущиеДанные["СуммаИзменения" + ИмяТекущейКолонки];
		Если ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки] <> 0 Тогда
			ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = ТекущиеДанные[ИмяТекущейКолонки] / ТекущиеДанные["СтараяЦена" + ИмяТекущейКолонки] * 100;
		Иначе
			ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
		КонецЕсли;
		ИмяКолонкиУпаковка = СтрЗаменить(СтрЗаменить(Элемент.Имя, "СуммаИзмененияВидЦены", "ВидЦены"), "ДеревоЦенВидЦены", "УпаковкаВидЦены");
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор());
	
	ТекущиеДанные["ИзмененаВручную"+ИмяТекущейКолонки] = Истина;
	
	Если ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки] <> 0 Тогда
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = Окр(
			100 * (ТекущиеДанные[ИмяТекущейКолонки]
			       - ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки]) / ТекущиеДанные["СтараяЦена"+ИмяТекущейКолонки],5,2);
	Иначе
		ТекущиеДанные["ПроцентИзменения"+ИмяТекущейКолонки] = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоЦен.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущейКолонки = СтрЗаменить(Элемент.Имя, "ДеревоЦен", "");

	ДеревоЦенУпаковкаПриИзмененииНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), ИмяТекущейКолонки);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЦенУпаковкаПриИзмененииНаСервере(Идентификатор, ИмяТекущейКолонки)
	УстановкаЦенСервер.ДеревоЦенУпаковкаПриИзменении(ЭтаФорма, Идентификатор, ИмяТекущейКолонки);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоЦенЦенаПриИзменении(Элемент)
	
	ИзмененаЦена = Истина;
	ДеревоЦенЦенаПриИзмененииКлиент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДеревоЦенУпаковкаПриИзменении(Элемент)

	ДеревоЦенУпаковкаПриИзмененииКлиент(Элемент);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервереБезКонтекста
Функция НайтиПунктОтгрузки(НомерПунктаОтгрузки,ПоставщикСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",ПоставщикСсылка);
	Запрос.УстановитьПараметр("НомерОтгрузки",НомерПунктаОтгрузки);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЖБИ_ПунктыНазначенияОтгрузки.Партнер КАК Партнер,
	               |	ЖБИ_ПунктыНазначенияОтгрузки.ПунктНазначенияОтгрузки КАК ПунктНазначенияОтгрузки,
	               |	ЖБИ_ПунктыНазначенияОтгрузки.ПунктНазначенияОтгрузки.НомерОтгрузки КАК ПунктНазначенияОтгрузкиНомерОтгрузки
	               |ИЗ
	               |	РегистрСведений.ЖБИ_ПунктыНазначенияОтгрузки КАК ЖБИ_ПунктыНазначенияОтгрузки
	               |ГДЕ
				   |	ЖБИ_ПунктыНазначенияОтгрузки.Партнер = &Партнер
	               |	И ЖБИ_ПунктыНазначенияОтгрузки.НомерОтгрузки = &НомерОтгрузки";
	
	СпрОтгрузки  		= Справочники.ЖБИ_ПунктыНазначенияОтгрузки.ПустаяСсылка();
	РезультатЗапроса 	= Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда 
		СпрОтгрузки = РезультатЗапроса.ПунктНазначенияОтгрузки;	
	КонецЕсли;
	
	//
	//Если ТипЗнч(НомерПунктаОтгрузки) = Тип("Число") Тогда
	//	СпрОтгрузки = Справочники.ЖБИ_ПунктыНазначенияОтгрузки.НайтиПоРеквизиту("НомерОтгрузки",НомерПунктаОтгрузки,,ПоставщикСсылка);
	//КонецЕсли;
	
	Возврат СпрОтгрузки;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьПолучитьНормативныйДокументСервер(Стр)
	
	НормативныйДокументСсылка = Справочники.ЖБИ_НормативныеДокументы.НайтиПоНаименованию(Стр);
	Если НормативныйДокументСсылка.Пустая() Тогда 
		НормативныйДокументОбъект = Справочники.ЖБИ_НормативныеДокументы.СоздатьЭлемент();
		НормативныйДокументОбъект.УстановитьНовыйКод();
		НормативныйДокументОбъект.Наименование = Стр;
		Попытка
			НормативныйДокументОбъект.Записать();
		Исключение
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
			Возврат ЕстьОшибки;
		КонецПопытки;
	КонецЕсли;
	
	Возврат НормативныйДокументСсылка.Ссылка;
	
КонецФункции

&НаКлиенте
Функция ВыполнитьКонтрольСтрок();
	
	ЕстьОшибки = Ложь;	
	ОчиститьСообщения();	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "Не заполнен поле <Поставщик>";
		Сообщение.Сообщить();
		ЕстьОшибки = Истина;
		Возврат ЕстьОшибки;
	КонецЕсли;
	
	Для НомерСтрокиОбласти = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл
		АртикулСтр = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,1).Текст); 
		Если ПустаяСтрока(АртикулСтр)  Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заполнен поле <Артикул>: "+АртикулСтр+", строка:"+НомерСтрокиОбласти;
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		АртикулНаименование = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,2).Текст); 
		Если ПустаяСтрока(АртикулНаименование)  Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заполнен поле <Номенклатура поставщика>: "+АртикулНаименование+", строка:"+НомерСтрокиОбласти;
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЭтоОбновлениеЦен Тогда 
			Продолжить;
		КонецЕсли;
		
		Результат = Неопределено;
		ПунктОтгрузкиНомерПоУмолчанию = 1;
		ПунктОтгрузки = ПривестиСтрокуКЧислу(СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,4).Текст),Истина);		 
		Если ПунктОтгрузки = Неопределено  Тогда
			Результат = НайтиПунктОтгрузки(ПунктОтгрузкиНомерПоУмолчанию,Объект.Партнер);
			Если Результат.Пустая() Тогда 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "В карточке поставщика "+Объект.Партнер+" не заполнено <Пункт отгрузки и № отгрузки>";
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				Возврат ЕстьОшибки;
				Прервать;
			КонецЕсли;
		Иначе 
			Результат = НайтиПунктОтгрузки(ПунктОтгрузки,Объект.Партнер);
			Если Результат.Пустая() Тогда
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "В карточке поставщика "+Объект.Партнер+" не заполнено <Пункт отгрузки и № отгрузки>";
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				Возврат ЕстьОшибки;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,4).Расшифровка = Результат;
		
		Результат = Неопределено;
		СтатусОсторожноСтр = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,5).Текст);
		Если ЗначениеЗаполнено(СтатусОсторожноСтр) Тогда
			Результат = ПроверитьТипБулево(СтатусОсторожноСтр);
			Если Результат = Неопределено Тогда 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не корректно заполнено поле <Статус осторожно>. Строка должна быть в формате Истина/Ложь или Да/Нет,строка:"+НомерСтрокиОбласти;
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				Возврат ЕстьОшибки;
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,5).Расшифровка = Результат;
		
		Результат = Неопределено;
		МаркировкаОбщепринятаяСтр = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,6).Текст);
		Если ЗначениеЗаполнено(МаркировкаОбщепринятаяСтр) Тогда
			Результат = МаркировкаОбщепринятаяСтр;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,6).Расшифровка = Результат;
		
		Результат = Неопределено;
		РасширенноеНаименованиеСтр = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,7).Текст);
		Если ЗначениеЗаполнено(РасширенноеНаименованиеСтр) Тогда
			Результат = РасширенноеНаименованиеСтр;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,7).Расшифровка = Результат;
		
		Результат = Неопределено;
		НормативныйДокументСтр = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,8).Текст);
		Если НЕ ПустаяСтрока(НормативныйДокументСтр) Тогда
			НормативныйДокументСсылка = СоздатьПолучитьНормативныйДокументСервер(НормативныйДокументСтр);			
			ТабличныйДокумент.Область(НомерСтрокиОбласти,8).Расшифровка = НормативныйДокументСсылка;		
		Иначе 
			ТабличныйДокумент.Область(НомерСтрокиОбласти,8).Расшифровка = НормативныйДокументСтр;
		КонецЕсли;		
		
		Результат = Неопределено;
		НормаПогрузки = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,9).Текст);
		Если ПустаяСтрока(НормаПогрузки)  Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = "Не заполнен поле <Норма погрузки>, строка:"+НомерСтрокиОбласти;
			Сообщение.Сообщить();
			ЕстьОшибки = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(НормаПогрузки) Тогда
			Результат = ПривестиСтрокуКЧислу(НормаПогрузки);
			Если Результат  = Неопределено Тогда 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не корректно заполнено поле <Норма погрузки>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				Возврат ЕстьОшибки;
			КонецЕсли;
			Если Результат<=0 Тогда 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не заполнен поле <Норма погрузки>, строка:"+НомерСтрокиОбласти;
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЕсли; 
		ТабличныйДокумент.Область(НомерСтрокиОбласти,9).Расшифровка = Результат;
		
		Результат = Неопределено;
		Качество = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,10).Текст);
		Если ЗначениеЗаполнено(Качество) Тогда
			Результат = ПривестиСтрокуКЧислу(Качество);
			Если Результат  = Неопределено Тогда 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не корректно заполнено поле <Качество>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				Возврат ЕстьОшибки;
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,10).Расшифровка = Результат;
		
		Результат = Неопределено;
		Вес = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,11).Текст);
		Если ЗначениеЗаполнено(Вес) Тогда
			Результат = ПривестиСтрокуКЧислу(Вес);
			Если Результат  = Неопределено Тогда 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не корректно заполнено поле <Вес>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				Возврат ЕстьОшибки;
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,11).Расшифровка = Результат;
		
		Результат = Неопределено;
		Объем = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,12).Текст);
		Если ЗначениеЗаполнено(Объем) Тогда
			Результат = ПривестиСтрокуКЧислу(Объем);
			Если Результат  = Неопределено Тогда 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не корректно заполнено поле <Объем>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				Возврат ЕстьОшибки;
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,12).Расшифровка = Результат;
		
		Результат = Неопределено;
		Мощность = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,13).Текст);
		Если ЗначениеЗаполнено(Мощность) Тогда
			Результат = ПривестиСтрокуКЧислу(Мощность);
			Если Результат  = Неопределено Тогда 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не корректно заполнено поле <Производственные мощности, шт./м2>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				Возврат ЕстьОшибки;
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,13).Расшифровка = Результат;
		
		//Результат = Неопределено;
		//ДиаметрММСтр = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,14).Текст);
		//Если ЗначениеЗаполнено(ДиаметрММСтр) Тогда
		//	Результат = ДиаметрММСтр;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,14).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//ОтверстиеММ = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,15).Текст);
		//Если ЗначениеЗаполнено(ДиаметрММСтр) Тогда
		//	Результат = ОтверстиеММ;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,15).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//ДиаметрВхСтр = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,16).Текст);
		//Если ЗначениеЗаполнено(ДиаметрВхСтр) Тогда
		//	Результат = ДиаметрВхСтр;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,16).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//ДиаметрВыхСтр = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,17).Текст);
		//Если ЗначениеЗаполнено(ДиаметрВыхСтр) Тогда
		//	Результат = ДиаметрВыхСтр;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,17).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//РабочаяДлина = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,18).Текст);
		//Если ЗначениеЗаполнено(РабочаяДлина) Тогда
		//	Результат = ПривестиСтрокуКЧислу(РабочаяДлина);
		//	Если Результат  = Неопределено Тогда 
		//		Сообщение = Новый СообщениеПользователю();
		//		Сообщение.Текст = "Не корректно заполнено поле <Рабочая длина>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
		//		Сообщение.Сообщить();
		//		ЕстьОшибки = Истина;
		//		Возврат ЕстьОшибки;
		//	КонецЕсли;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,18).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//ТолщинаСтенки = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,19).Текст);
		//Если ЗначениеЗаполнено(ТолщинаСтенки) Тогда
		//	Результат = ПривестиСтрокуКЧислу(ТолщинаСтенки);
		//	Если Результат  = Неопределено Тогда 
		//		Сообщение = Новый СообщениеПользователю();
		//		Сообщение.Текст = "Не корректно заполнено поле <Толщина стенки>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
		//		Сообщение.Сообщить();
		//		ЕстьОшибки = Истина;
		//		Возврат ЕстьОшибки;
		//	КонецЕсли;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,19).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//Глубина = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,20).Текст);
		//Если ЗначениеЗаполнено(Глубина) Тогда
		//	Результат = ПривестиСтрокуКЧислу(Глубина);
		//	Если Результат  = Неопределено Тогда 
		//		Сообщение = Новый СообщениеПользователю();
		//		Сообщение.Текст = "Не корректно заполнено поле <Глубина>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
		//		Сообщение.Сообщить();
		//		ЕстьОшибки = Истина;
		//		Возврат ЕстьОшибки;
		//	КонецЕсли;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,20).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//ШирМакс = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,21).Текст);
		//Если ЗначениеЗаполнено(ШирМакс) Тогда
		//	Результат = ПривестиСтрокуКЧислу(ШирМакс);
		//	Если Результат  = Неопределено Тогда 
		//		Сообщение = Новый СообщениеПользователю();
		//		Сообщение.Текст = "Не корректно заполнено поле <Шир. макс>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
		//		Сообщение.Сообщить();
		//		ЕстьОшибки = Истина;
		//		Возврат ЕстьОшибки;
		//	КонецЕсли;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,21).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//ШирМин = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,22).Текст);
		//Если ЗначениеЗаполнено(ШирМин) Тогда
		//	Результат = ПривестиСтрокуКЧислу(ШирМин);
		//	Если Результат  = Неопределено Тогда 
		//		Сообщение = Новый СообщениеПользователю();
		//		Сообщение.Текст = "Не корректно заполнено поле <Шир. мин>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
		//		Сообщение.Сообщить();
		//		ЕстьОшибки = Истина;
		//		Возврат ЕстьОшибки;
		//	КонецЕсли;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,22).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//ВысотаМакс = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,23).Текст);
		//Если ЗначениеЗаполнено(ВысотаМакс) Тогда
		//	Результат = ПривестиСтрокуКЧислу(ВысотаМакс);
		//	Если Результат  = Неопределено Тогда 
		//		Сообщение = Новый СообщениеПользователю();
		//		Сообщение.Текст = "Не корректно заполнено поле <Высота, макс>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
		//		Сообщение.Сообщить();
		//		ЕстьОшибки = Истина;
		//		Возврат ЕстьОшибки;
		//	КонецЕсли;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,23).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//ВысотаМин = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,24).Текст);
		//Если ЗначениеЗаполнено(ВысотаМин) Тогда
		//	Результат = ПривестиСтрокуКЧислу(ВысотаМин);
		//	Если Результат  = Неопределено Тогда 
		//		Сообщение = Новый СообщениеПользователю();
		//		Сообщение.Текст = "Не корректно заполнено поле <Высота, мин>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
		//		Сообщение.Сообщить();
		//		ЕстьОшибки = Истина;
		//		Возврат ЕстьОшибки;
		//	КонецЕсли;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,24).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//Армирование = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,25).Текст);
		//Если ЗначениеЗаполнено(Армирование) Тогда
		//	Результат = ПроверитьТипБулево(Армирование);
		//	Если Результат = Неопределено Тогда 
		//		Сообщение = Новый СообщениеПользователю();
		//		Сообщение.Текст = "Не корректно заполнено поле <Армирование>. Строка должна быть в формате Истина/Ложь или Да/Нет,строка:"+НомерСтрокиОбласти;
		//		Сообщение.Сообщить();
		//		ЕстьОшибки = Истина;
		//		Возврат ЕстьОшибки;
		//	КонецЕсли;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,25).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//Бетон = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,26).Текст);
		//Если ЗначениеЗаполнено(Бетон) Тогда
		//	Результат = ПривестиСтрокуКЧислу(Бетон);
		//	Если Результат  = Неопределено Тогда 
		//		Сообщение = Новый СообщениеПользователю();
		//		Сообщение.Текст = "Не корректно заполнено поле <Бетон,В>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
		//		Сообщение.Сообщить();
		//		ЕстьОшибки = Истина;
		//		Возврат ЕстьОшибки;
		//	КонецЕсли;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,26).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//ВодонепрW = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,27).Текст);
		//Если ЗначениеЗаполнено(ВодонепрW) Тогда
		//	Результат = ПривестиСтрокуКЧислу(ВодонепрW);
		//	Если Результат  = Неопределено Тогда 
		//		Сообщение = Новый СообщениеПользователю();
		//		Сообщение.Текст = "Не корректно заполнено поле <Водонепр,W>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
		//		Сообщение.Сообщить();
		//		ЕстьОшибки = Истина;
		//		Возврат ЕстьОшибки;
		//	КонецЕсли;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,27).Расшифровка = Результат;
		//
		//Результат = Неопределено;
		//МорозF = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,28).Текст);
		//Если ЗначениеЗаполнено(МорозF) Тогда
		//	Результат = ПривестиСтрокуКЧислу(МорозF);
		//	Если Результат  = Неопределено Тогда 
		//		Сообщение = Новый СообщениеПользователю();
		//		Сообщение.Текст = "Не корректно заполнено поле <Мороз,F>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
		//		Сообщение.Сообщить();
		//		ЕстьОшибки = Истина;
		//		Возврат ЕстьОшибки;
		//	КонецЕсли;
		//КонецЕсли;
		//ТабличныйДокумент.Область(НомерСтрокиОбласти,28).Расшифровка = Результат;
		
		Результат = Неопределено;
		СертифицированДоСтр = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,14).Текст); 
		Если ЗначениеЗаполнено(СертифицированДоСтр) Тогда
			Результат = СтроковыеФункцииКлиентСервер.СтрокаВДату(СертифицированДоСтр);
			Если Не ЗначениеЗаполнено(Результат) Тогда 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не корректно заполнено поле <Сертифицирован до>. Строка должна быть в формате ДД.ММ.ГГГГ (например,09.08.2019),строка:"+НомерСтрокиОбласти;
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				Возврат ЕстьОшибки;
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,14).Расшифровка = Результат;
		
		Результат = Неопределено;
		НеГабарит = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,15).Текст);
		Если ЗначениеЗаполнено(НеГабарит) Тогда
			Результат = ПроверитьТипБулево(НеГабарит);
			Если Результат = Неопределено Тогда 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не корректно заполнено поле <Не габарит>. Строка должна быть в формате Истина/Ложь или Да/Нет,строка:"+НомерСтрокиОбласти;
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				Возврат ЕстьОшибки;
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,15).Расшифровка = Результат;
		
		Результат = Неопределено;
		КолУпаковке = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,16).Текст);
		Если ЗначениеЗаполнено(КолУпаковке) Тогда
			Результат = ПривестиСтрокуКЧислу(КолУпаковке);
			Если Результат  = Неопределено Тогда 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не корректно заполнено поле <Кол-во в упаковке, шт>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				Возврат ЕстьОшибки;
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,16).Расшифровка = Результат;
		
		Результат = Неопределено;
		ВесВАвто = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,17).Текст);
		Если ЗначениеЗаполнено(ВесВАвто) Тогда
			Результат = ПривестиСтрокуКЧислу(ВесВАвто);
			Если Результат  = Неопределено Тогда 
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = "Не корректно заполнено поле <Вес в авто>. Строка должна быть в формате числа,строка:"+НомерСтрокиОбласти;
				Сообщение.Сообщить();
				ЕстьОшибки = Истина;
				Возврат ЕстьОшибки;
			КонецЕсли;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,17).Расшифровка = Результат;
		
		Результат = Неопределено;
		Направление = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,18).Текст);
		Если Не ПустаяСтрока(Направление) Тогда
			Результат = Направление;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,18).Расшифровка = Результат;
		
		Результат = Неопределено;
		Комментарий = СокрЛП(ТабличныйДокумент.Область(НомерСтрокиОбласти,19).Текст);
		Если Не ПустаяСтрока(Комментарий) Тогда
			Результат = Комментарий;
		КонецЕсли;
		ТабличныйДокумент.Область(НомерСтрокиОбласти,19).Расшифровка = Результат;
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;

КонецФункции

&НаКлиенте
Процедура КомандаКонтрольЗаполнения(Команда)
	
	ЕстьОшибки = ВыполнитьКонтрольСтрок();	
	Если Не ЕстьОшибки Тогда 
		Сообщить("Контроль заполнения пройден");
	Иначе 
		Сообщить("Есть ошибки заполнения макета");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1 Тогда
		
		Попытка
			ЗаполненаНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст)
				                           Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если Не ЗаполненаНоменклатураАртикул Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла.'"));
			Возврат;
		КонецЕсли;
		
		ЕстьОшибки = ВыполнитьКонтрольСтрок();
		Если ЕстьОшибки Тогда
			Возврат;
		КонецЕсли;
		
		Если СопоставлятьСправочники Тогда
			ОчиститьСообщения();
			Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных
			                     |с данными информационной базы. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
			СопоставитьДанныеТабличногоДокументаСНоменклатуройПоставщика();
		КонецЕсли;
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2 Тогда
		
		ОчиститьСообщения();
		
		Если ИспользоватьНоменклатуруПоставщиков Тогда
			ЗаписатьНоменклатуруПоставщика();
		КонецЕсли;
	
		Если ПроверитьЗаполнение() Тогда
			Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2 Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3 Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	
	ЗавершитьРаботуПомощника();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВидыЦен(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Партнер", Объект.Партнер);
	ПараметрыОткрытия.Вставить("ВыбранныеВидыЦен", УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтаФорма));
	
	ОткрытьФорму(
		"Обработка.ЖБИ_ЗагрузкаЦенПоставщикаСХарактеристиками.Форма.ФормаВыбораВидовЦенПоставщика",
		ПараметрыОткрытия,
		ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПоставщика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.НоменклатураПоставщика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.КоличествоНоменклатурыДляВыбора");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<будет создана при загрузке>'"));

	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") Тогда
	
		//

		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПоставщика.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.НоменклатураПоставщика");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.КоличествоНоменклатурыДляВыбора");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Необходимо сопоставить вручную>'"));

	Иначе
		
		//

		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатура.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.Номенклатура");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Необходимо сопоставить вручную>'"));
		
	КонецЕсли;
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПоставщика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНаименование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.НоменклатураНаименованиеОтличается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.LightGoldenRod);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатураПоставщика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенАртикул.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.АртикулОтличается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.LightGoldenRod);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтаФорма, "ДеревоЦенХарактеристика", "ДеревоЦен.ХарактеристикиИспользуются");

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЦенХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЦен.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНоменклатуруПоставщиков");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<пропущена при регистрации>'"));
	
КонецПроцедуры

#Область Прочее

&НаСервере
Процедура ОбновитьКолонкиВидовЦен(ВыбранноеЗначение)
	
	УстановкаЦенСервер.ПеречитатьВыбранныеЦены(ЭтаФорма);
	
	Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
		СтрокаТЧ.Выбрана = НЕ ВыбранноеЗначение.Найти(СтрокаТЧ.Ссылка) = Неопределено;
	КонецЦикла;
	
	ЗаполнитьСлужебныеКолонкиВидовЦен();
	
	ИнициализироватьТабличныйДокумент();
	ПостроитьДеревоЦен(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеКолонкиВидовЦен()

	НомерКолонки = 3;
	Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
		
		СтрокаТЧ.НаименованиеПоиск = ВРег(СтрЗаменить(СтрокаТЧ.Наименование, " ", ""));
		Если СтрокаТЧ.Выбрана Тогда
			СтрокаТЧ.ИмяКолонкиMXL = НомерКолонки;
			НомерКолонки = НомерКолонки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	Если ЭтоОбновлениеЦен Тогда 
		Макет = Обработки.ЖБИ_ЗагрузкаЦенПоставщикаСХарактеристиками.ПолучитьМакет("ОбновлениеЦен");
	Иначе 
		Макет = Обработки.ЖБИ_ЗагрузкаЦенПоставщикаСХарактеристиками.ПолучитьМакет("ЗагрузкаЦен");
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	
	ОбластьТовар = Макет.ПолучитьОбласть("Товар");
	ТабличныйДокумент.Присоединить(ОбластьТовар);
	
	Для Каждого СтрокаТЧ Из ВыбранныеЦены Цикл
		Если Не СтрокаТЧ.Выбрана Тогда
			Продолжить;
		КонецЕсли;
		ОбластьВидЦены = Макет.ПолучитьОбласть("ВидЦены");
		ОбластьВидЦены.Параметры.ВидЦены = СтрокаТЧ.Ссылка;
		ТабличныйДокумент.Присоединить(ОбластьВидЦены);
	КонецЦикла;
	
	ОбластьХарактеристики = Макет.ПолучитьОбласть("Характеристики");
	ТабличныйДокумент.Присоединить(ОбластьХарактеристики);
	
	ТабличныйДокумент.ФиксацияСверху = 1;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТоварам()
	
	Элементы.ДеревоЦен.ОтборСтрок = Неопределено;
	
	Если ВариантОтображенияНоменклатуры = 1 Тогда
		Элементы.ДеревоЦен.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаСопоставлена", Ложь);
	Иначе
		Элементы.ДеревоЦен.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СвязатьНоменклатуруСНоменклатуройПоставщикаСервер(Отказ)
	
	ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(Объект.Товары, Отказ);
	
КонецПроцедуры

//shuldm+
&НаСервере
Функция ОбновитьНоменклатуруПоставщикаСервер(СообщениеОбОшибке)
	
	Если НЕ ЭтоОбновлениеЦен Тогда 
		// 1 свойства номенклатуры поставщика
		ТаблицаНабораЗаписей = РегистрыСведений.ЖБИ_НоменклатураПоставщиков.ПолучитьПустуюТаблицуНаборЗаписей();
		Для Каждого СтрокаТЧ Из ДеревоЦен Цикл
			НоваяСтр = ТаблицаНабораЗаписей.Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтр,СтрокаТЧ.СтруктураСвойств);
			НоваяСтр.Партнер 				= Объект.Партнер;
			НоваяСтр.НоменклатураПоставщика = СтрокаТЧ.НоменклатураПоставщика;
			НоваяСтр.Автор 					= Пользователи.ТекущийПользователь();
			НоваяСтр.ДатаОбновления 		= ТекущаяДатаСеанса();
		КонецЦикла;
		
		Результат = РегистрыСведений.ЖБИ_НоменклатураПоставщиков.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,, СообщениеОбОшибке);
		Если Не Результат Тогда 
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	// 2 цены прайслиста
	ТаблицаНабораЗаписей = РегистрыСведений.ЖБИ_ПрайслистПоставщика.ПолучитьПустуюТаблицуНаборЗаписей();
	//получим пред. цену и дату
	ТЗНоменклатуры = ДанныеФормыВЗначение(ДеревоЦен,Тип("ТаблицаЗначений"));
	РегистрыСведений.ЖБИ_ПрайслистПоставщика.ЗаполнитьПредыдущуюЦену(ТЗНоменклатуры,Объект.Партнер);
	Для Каждого СтрокаТЧ Из ТЗНоменклатуры Цикл
		Если СтрокаТЧ.Цена = 0 Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтр = ТаблицаНабораЗаписей.Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтр,СтрокаТЧ);
		НоваяСтр.Период			= Объект.Дата;
		НоваяСтр.Партнер 		= Объект.Партнер;
		НоваяСтр.Автор 			= Пользователи.ТекущийПользователь();
	КонецЦикла;
	
	Результат = РегистрыСведений.ЖБИ_ПрайслистПоставщика.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,, СообщениеОбОшибке);
	
	Возврат Результат;
	
КонецФункции
//shuldm-

&НаКлиенте
Процедура ЗавершитьРаботуПомощника()
	
	Состояние(НСтр("ru = 'Осуществляется создание документа
	                     |регистрации цен поставщика. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
	
	Объект.Товары.Очистить();
		
	Для Каждого СтрокаТЧ Из ДеревоЦен Цикл
		
		Для Каждого ВидЦены Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма) Цикл
			
			НоваяЦена = СтрокаТЧ[ВидЦены.ИмяКолонки];
			ПроцентИзменения = СтрокаТЧ["ПроцентИзменения" + ВидЦены.ИмяКолонки];
			
			Если НоваяЦена = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если РегистрироватьИзмененныеЦены И ПроцентИзменения = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				НоваяСтрока.Упаковка = СтрокаТЧ["Упаковка" + ВидЦены.ИмяКолонки];
			КонецЕсли;
			НоваяСтрока.НоваяЦена = НоваяЦена;
			НоваяСтрока.ВидЦеныПоставщика = ВидЦены.Ссылка;
			
		КонецЦикла;
		
	КонецЦикла;
	
	//shuldm создание документа изменения цен+
	
	//ДокументОбъект = Новый Структура();
	//ДокументОбъект.Вставить("Партнер", Объект.Партнер);
	//ДокументОбъект.Вставить("Ссылка",  ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"));
	//ДокументОбъект.Вставить("Товары",  Объект.Товары);
	//
	//ЗакупкиКлиент.ПроверитьСопоставленнуюНоменклатуруПоставщика(
	//	ДокументОбъект,
	//	Новый ОписаниеОповещения("ЗавершитьРаботуПомощникаПроверитьСопоставленнуюНоменклатуруПоставщикаЗавершение", ЭтотОбъект),
	//	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика);
		
	СообщениеОбОшибке = "";
	Результат = ОбновитьНоменклатуруПоставщикаСервер(СообщениеОбОшибке);
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = СообщениеОбОшибке;
		Сообщение.Сообщить();
	КонецЕсли;
	//shuldm-
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуПомощникаПроверитьСопоставленнуюНоменклатуруПоставщикаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Нет Тогда
		
		СвязатьНоменклатуруСНоменклатуройПоставщикаСервер(Ложь);
		
		ДокументРегистрацииЦен = СоздатьДокументРегистрацииЦенНоменклатурыПоставщика();
		Если ДокументРегистрацииЦен <> Неопределено Тогда
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДокументРегистрацииЦен);
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Создан документ'"),
				НавигационнаяСсылка,
				ДокументРегистрацииЦен,
				БиблиотекаКартинок.Информация32);
			Оповестить("Запись_РегистрацияЦенНоменклатурыПоставщика",, ДокументРегистрацииЦен);
			Готово = Истина;
			Закрыть();
		Иначе
			ОбновитьСтарыеЦеныНоменклатурыНаСервере();
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось создать документ регистрации цен поставщика'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтраницуПанелиНавигации()
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1 Тогда
		Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияНачало;
		Элементы.НачалоДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3 Тогда
		Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияОкончание;
		Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияПродолжение;
		Элементы.ПродолжениеДалее.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтарыеЦеныНоменклатурыНаСервере()
	
	КэшДанных = Неопределено;
	
	ТаблицаНоменклатуры = УстановкаЦенСервер.ТаблицаТовары(ЭтаФорма, КэшДанных);
	УстановкаЦенСервер.ЗагрузитьСтарыеЦеныНоменклатурыПоставщика(ЭтаФорма, ТаблицаНоменклатуры, КэшДанных);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЦенХарактеристикаПриИзмененииСервер(ИдентификаторСтроки, РассчитатьЦены = Истина)
	
	УстановкаЦенСервер.ДеревоЦенХарактеристикаПриИзменении(ЭтаФорма, ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоЦенНоменклатураПриИзмененииСервер(ИдентификаторСтроки)
	
	ДанныеДляРасчетаВычисляемыхЦенНаКлиенте = Неопределено;
	
	ТекущаяСтрока = ДеревоЦен.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ВидыЦен = УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма);
	Для Каждого ВидЦены Из ВидыЦен Цикл
		
		ИмяКолонки         = ВидЦены.ИмяКолонки;
		ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
		
		Если ИспользоватьУпаковкиНоменклатуры И ЗначениеЗаполнено(ТекущаяСтрока[ИмяКолонкиУпаковка]) Тогда
			ТекущаяСтрока[ИмяКолонкиУпаковка] = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	КэшДанных = УстановкаЦенСервер.ИнициализироватьСтруктуруКэшаДанных();
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.ЦеноваяГруппа    КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.Артикул          КАК Артикул,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик
		|		В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры),
		|		   ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры),
		|		   ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры))
		|		ТОГДА ИСТИНА
		|	ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ХарактеристикиИспользуются
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	СправочникНоменклатура.Ссылка = &Номенклатура
		|");
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|;
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.Характеристика    КАК Характеристика,
			|	ЦеныНоменклатуры.ВидЦеныПоставщика КАК ВидЦены,
			|	ЦеныНоменклатуры.Упаковка          КАК Упаковка
			|ИЗ
			|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ДатаДокумента,
			|	                                                          Номенклатура = &Номенклатура
			|	                                                          И ВидЦеныПоставщика В (&ВидыЦен)) КАК ЦеныНоменклатуры
			|";
			
			Запрос.УстановитьПараметр("ВидыЦен",       УстановкаЦенКлиентСервер.ВыбранныеВидыЦен(ЭтаФорма));
			Запрос.УстановитьПараметр("ДатаДокумента", НачалоДня(Объект.Дата) - 1);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		ВыборкаНоменклатура = МассивРезультатов[0].Выбрать();
		
		Если ВыборкаНоменклатура.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаНоменклатура,,"Артикул");
		КонецЕсли;
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ВыборкаУпаковки = МассивРезультатов[1].Выбрать();
			Пока ВыборкаУпаковки.Следующий() Цикл
				ТекущаяСтрока["Упаковка" + УстановкаЦенСервер.ИмяКолонкиПоВидуЦены(ВыборкаУпаковки.ВидЦены, КэшДанных)] = ВыборкаУпаковки.Упаковка;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
		
	КонецЕсли;
	
	// Загрузка старых цен и процента изменения
	ТаблицаЗначений = УстановкаЦенСервер.СоздатьТаблицуТовары(Истина);
	Для Каждого СтрокаВидЦены Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма) Цикл
		
		ИмяКолонки = СтрокаВидЦены.ИмяКолонки;
		ИмяКолонкиУпаковка = "Упаковка" + ИмяКолонки;
		
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.НоменклатураПоставщика = ТекущаяСтрока.НоменклатураПоставщика;
		НоваяСтрока.Номенклатура           = ТекущаяСтрока.Номенклатура;
		НоваяСтрока.Характеристика         = ТекущаяСтрока.Характеристика;
		НоваяСтрока.ВидЦены                = СтрокаВидЦены.Ссылка;
		НоваяСтрока.Цена                   = ТекущаяСтрока[ИмяКолонки];
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			НоваяСтрока.Упаковка = ТекущаяСтрока[ИмяКолонкиУпаковка];
		КонецЕсли;
		
	КонецЦикла;
	
	УстановкаЦенСервер.ЗагрузитьСтарыеЦеныНоменклатуры(ЭтаФорма, ТаблицаЗначений, КэшДанных);
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументРегистрацииЦенНоменклатурыПоставщика()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ДокументРегистрацииЦен = ОбработкаОбъект.СоздатьДокументРегистрацииЦенНоменклатурыПоставщика(РегистрироватьИзмененныеЦены);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	Возврат ДокументРегистрацииЦен;
	
КонецФункции

&НаСервере
Процедура СопоставитьДанныеТабличногоДокументаСНоменклатуройПоставщика()
	
	ДеревоЦен.Очистить();
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Т.Артикул      КАК Артикул,
		|	Т.Артикул      КАК АртикулПоиск,
		|	Т.Наименование КАК Наименование,
		|	Т.Наименование КАК НаименованиеПоиск,
		|	Т.Номенклатура   КАК Номенклатура,
		|	Т.Характеристика КАК Характеристика,
		|	Т.Ссылка         КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК Т
		|ГДЕ
		|	НЕ Т.ЭтоГруппа
		|	И НЕ Т.ПометкаУдаления
		|	И Т.Владелец = &Партнер
		|");
		
	Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
	НоменклатураПоставщика.Загрузить(Запрос.Выполнить().Выгрузить());
		
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Т.Артикул      КАК Артикул,
		|	Т.Артикул      КАК АртикулПоиск,
		|	Т.Наименование КАК Наименование,
		|	Т.Наименование КАК НаименованиеПоиск,
		|	Т.Ссылка       КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Т
		|ГДЕ
		|	НЕ Т.ЭтоГруппа
		|	И НЕ Т.ПометкаУдаления
		|");
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", "Справочник.Номенклатура");
	НоменклатураБД = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из НоменклатураПоставщика Цикл
		
		ТекСтрока.АртикулПоиск = ВРег(СтрЗаменить(ТекСтрока.Артикул, " ", ""));
		ТекСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(ТекСтрока.Наименование, " ", ""));
		
	КонецЦикла;
	
	// Сопоставление данных прайс-листа с данными информационной базы
	КолонкаАртикул      = "C1";
	КолонкаНоменклатура = "C2";
	
	НомерСтроки = 2;
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненаНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаАртикул).Текст)
	                               Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаНоменклатура).Текст);
								   
	Пока ЗаполненаНоменклатураАртикул Цикл

		
		//СтруктураСвойств = Новый Структура("ПунктОтгрузки,СтатусОсторожно,МаркировкаОбщепринятая,РасширенноеНаименование,НормативныйДокумент,НормаАвто,Качество,Вес,Объем,Длина,ДиаметрММ,ОтверстиеММ,ДиаметрВх,ДиаметрВых,РабочаяДлина,ТолщинаСтенки,Глубина,ШиринаМакс,ШиринаМин,ВысотаМакс,ВысотаМин,Армирование,БетонВ,ВодонепрW,МорозF,СертифицированДо,Негабаритный,КолВУпаковке,ВесАвто,Направление,Комментарий");
		СтруктураСвойств = Новый Структура("ПунктОтгрузки,СтатусОсторожно,МаркировкаОбщепринятая,РасширенноеНаименование,НормативныйДокумент,НормаАвто,Качество,Вес,Объем,Мощность,СертифицированДо,Негабаритный,КолВУпаковке,ВесАвто,Направление,Комментарий");
		НоваяСтрока = ДеревоЦен.Добавить();
		
		НоваяСтрока.СтруктураСвойств = СтруктураСвойств;
		//Заполнение свойств номекнлатуры поставщика +
		НоваяСтрока.СтруктураСвойств.ПунктОтгрузки = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C4").Расшифровка;
		НоваяСтрока.СтруктураСвойств.СтатусОсторожно = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C5").Расшифровка;
		НоваяСтрока.СтруктураСвойств.МаркировкаОбщепринятая = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C6").Расшифровка;
		НоваяСтрока.СтруктураСвойств.РасширенноеНаименование = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C7").Расшифровка;
		НоваяСтрока.СтруктураСвойств.НормативныйДокумент = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C8").Расшифровка;
		НоваяСтрока.СтруктураСвойств.НормаАвто = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C9").Расшифровка;
		НоваяСтрока.СтруктураСвойств.Качество = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C10").Расшифровка;
		НоваяСтрока.СтруктураСвойств.Вес = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C11").Расшифровка;
		НоваяСтрока.СтруктураСвойств.Объем = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C12").Расшифровка;
		НоваяСтрока.СтруктураСвойств.Мощность = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C13").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.ДиаметрММ = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C14").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.ОтверстиеММ = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C15").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.ДиаметрВх = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C16").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.ДиаметрВых = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C17").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.РабочаяДлина = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C18").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.ТолщинаСтенки = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C19").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.Глубина = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C20").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.ШиринаМакс = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C21").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.ШиринаМин = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C22").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.ВысотаМакс = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C23").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.ВысотаМин =  ТабличныйДокумент.Область("R" + СтроковыйНомер + "C24").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.Армирование = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C25").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.БетонВ = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C26").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.ВодонепрW = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C27").Расшифровка;
		//НоваяСтрока.СтруктураСвойств.МорозF = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C28").Расшифровка;
		НоваяСтрока.СтруктураСвойств.СертифицированДо = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C14").Расшифровка;
		НоваяСтрока.СтруктураСвойств.Негабаритный = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C15").Расшифровка;
		НоваяСтрока.СтруктураСвойств.КолВУпаковке = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C16").Расшифровка;
		НоваяСтрока.СтруктураСвойств.ВесАвто = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C17").Расшифровка;
		НоваяСтрока.СтруктураСвойств.Направление = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C18").Расшифровка;
		НоваяСтрока.СтруктураСвойств.Комментарий = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C19").Расшифровка;
		//Заполнение свойств номекнлатуры поставщика -
		
		Попытка
			// 100 - Длина наименования номенклатуры поставщика
			НоваяСтрока.Артикул = ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаАртикул).Текст;
			НоваяСтрока.НоменклатураНаименование = Лев(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаНоменклатура).Текст, 100);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Для Каждого СтрокаТЧ Из УстановкаЦенКлиентСервер.ВыбранныеСтрокиТаблицыВидовЦен(ЭтаФорма) Цикл
			ЦенаНоменклатуры = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C" + СтрокаТЧ.ИмяКолонкиMXL).Текст;
			НоваяСтрока[СтрокаТЧ.ИмяКолонки] = ЦенаНоменклатуры;
		КонецЦикла;
		
		//shuldm убрал поиск по наименованию+
		НоваяСтрока.Цена = ТабличныйДокумент.Область("R" + СтроковыйНомер + "C3").Текст;

		МассивНоменклатурыПоставщика = Новый Массив();		
		Если ЗначениеЗаполнено(НоваяСтрока.Артикул) Тогда			
			НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(
				Новый Структура(
					"АртикулПоиск",
					ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", ""))));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
			КонецЦикла;			
		КонецЕсли;
				
		Если МассивНоменклатурыПоставщика.Количество() = 1 Тогда
			
			НоваяСтрока.КоличествоНоменклатурыДляВыбора = 1;
			НоваяСтрока.НоменклатураПоставщика = МассивНоменклатурыПоставщика[0].Ссылка;
			
			НайденныеСтроки = НоменклатураБД.НайтиСтроки(Новый Структура("АртикулПоиск",ВРег(НоваяСтрока.Артикул)));
			Если НайденныеСтроки.Количество()>0 Тогда 
				НоваяСтрока.Номенклатура = НайденныеСтроки[0].Ссылка;
				НоваяСтрока.НоменклатураСопоставленаАвтоматически = Истина;
			КонецЕсли;
			НоваяСтрока.Характеристика = МассивНоменклатурыПоставщика[0].Характеристика;
			
			Если НоваяСтрока.НоменклатураНаименование <> МассивНоменклатурыПоставщика[0].Наименование Тогда
				НоваяСтрока.НоменклатураНаименованиеОтличается = Истина;
			КонецЕсли;			
			Если НоваяСтрока.Артикул <> МассивНоменклатурыПоставщика[0].Артикул Тогда
				НоваяСтрока.АртикулОтличается = Истина;
			КонецЕсли;
			
		ИначеЕсли МассивНоменклатурыПоставщика.Количество() > 1 Тогда
			
			НоваяСтрока.КоличествоНоменклатурыДляВыбора = МассивНоменклатурыПоставщика.Количество();			
			Для Каждого ТекЭлемент Из МассивНоменклатурыПоставщика Цикл
				
				НоваяСтрока.НоменклатураПоставщика = ТекЭлемент.Ссылка;
				
				НайденныеСтроки = НоменклатураБД.НайтиСтроки(Новый Структура("АртикулПоиск",ВРег(НоваяСтрока.Артикул)));
				Если НайденныеСтроки.Количество()>0 Тогда 
					НоваяСтрока.Номенклатура = НайденныеСтроки[0].Ссылка;
					НоваяСтрока.НоменклатураСопоставленаАвтоматически = Истина;
				КонецЕсли;
				ТекЭлемент.Характеристика = ТекЭлемент.Характеристика;
				
				Если НоваяСтрока.НоменклатураНаименование <> ТекЭлемент.Наименование Тогда
					НоваяСтрока.НоменклатураНаименованиеОтличается = Истина;
				КонецЕсли;				
				Если НоваяСтрока.Артикул <> ТекЭлемент.Артикул Тогда
					НоваяСтрока.АртикулОтличается = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли МассивНоменклатурыПоставщика.Количество() = 0 Тогда
			
			НоваяСтрока.КоличествоНоменклатурыДляВыбора = 1;
			НайденныеСтроки = НоменклатураБД.НайтиСтроки(Новый Структура("АртикулПоиск",ВРег(НоваяСтрока.Артикул)));
			Если НайденныеСтроки.Количество()>0 Тогда 
				НоваяСтрока.Номенклатура = НайденныеСтроки[0].Ссылка;	
			КонецЕсли;
			
		КонецЕсли;		
		//shuldm-
		
		Если     НоваяСтрока.НоменклатураСопоставленаАвтоматически
			И Не НоваяСтрока.АртикулОтличается И
			  Не НоваяСтрока.НоменклатураНаименованиеОтличается Тогда
			
			НоваяСтрока.СтрокаСопоставлена = Истина;
			
		КонецЕсли;
		
		НоваяСтрока.ХарактеристикиИспользуются = Справочники.Номенклатура.ХарактеристикиИспользуются(НоваяСтрока.Номенклатура);
		
		НомерСтроки = НомерСтроки + 1;
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Попытка
			ЗаполненаНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаАртикул).Текст)
			                               Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаНоменклатура).Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	ОбновитьСтарыеЦеныНоменклатурыНаСервере();
	
	УстановитьОтборПоТоварам();
	
	СопоставлятьСправочники = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНоменклатуруПоставщика()
	
	Отказ = Ложь;
	
	Для Каждого ТекСтрока Из ДеревоЦен Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И Не ЗначениеЗаполнено(ТекСтрока.НоменклатураНаименование) Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнено наименование номенклатуры в строке %НомерСтроки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", ДеревоЦен.Индекс(ТекСтрока) + 1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ДеревоЦен", ДеревоЦен.Индекс(ТекСтрока)+1, "НоменклатураНаименование"),
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДеревоЦен Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) Тогда
			
			НоваяНоменклатураПоставщика = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
			НоваяНоменклатураПоставщика.Владелец = Объект.Партнер;
			НоваяНоменклатураПоставщика.Наименование = ТекСтрока.НоменклатураНаименование;
			НоваяНоменклатураПоставщика.Артикул = ТекСтрока.Артикул;
			НоваяНоменклатураПоставщика.УстановитьНовыйКод();
			
			Попытка
				НоваяНоменклатураПоставщика.Записать();
				ТекСтрока.НоменклатураПоставщика = НоваяНоменклатураПоставщика.Ссылка;
				ТекСтрока.НоменклатураСопоставленаАвтоматически = Истина;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		Иначе
			
			ТекСтрока.НоменклатураСопоставленаАвтоматически = Истина;
			
		КонецЕсли;
		
		Если (ТекСтрока.НоменклатураНаименованиеОтличается Или ТекСтрока.АртикулОтличается)
			И ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) Тогда
			
			Попытка
				ЗаблокироватьДанныеДляРедактирования(ТекСтрока.НоменклатураПоставщика);
				НоменклатураПоставщикаОбъект = ТекСтрока.НоменклатураПоставщика.ПолучитьОбъект();
				НоменклатураПоставщикаОбъект.Наименование = ТекСтрока.НоменклатураНаименование;
				НоменклатураПоставщикаОбъект.Артикул      = ТекСтрока.Артикул;
				НоменклатураПоставщикаОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
		//shuldm+
		Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Номенклатура)
			И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда 
			Попытка
				ЗаблокироватьДанныеДляРедактирования(ТекСтрока.НоменклатураПоставщика);
				НоменклатураПоставщикаОбъект = ТекСтрока.НоменклатураПоставщика.ПолучитьОбъект();
				НоменклатураПоставщикаОбъект.Номенклатура = ТекСтрока.Номенклатура;
				НоменклатураПоставщикаОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		//shuldm-
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	КэшДанных = Неопределено;
	ТаблицаТовары = УстановкаЦенСервер.ТаблицаТовары(ЭтаФорма, КэшДанных, Ложь);
	ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаТовары, "НомерСтроки");
	
	Ценообразование.ПроверитьКорректностьЗаполненияДокументаУстановкиЦенНоменклатурыПоставщика(
		ЭтаФорма.Объект, ТаблицаТовары, Отказ);
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти
