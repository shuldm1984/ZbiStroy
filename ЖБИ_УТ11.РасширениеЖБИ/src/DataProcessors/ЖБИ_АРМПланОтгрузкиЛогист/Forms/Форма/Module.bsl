
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

&НаКлиенте
Процедура ОпределитьДоступностьКоманд()
	
	Профиль 			= ЖБИ_ОбщийМодульСервер.ПолучитьПрофильПользователяГруппа(ТекущийПользователь);
	ДоступностьКоманд 	= Профиль = ПредопределенноеЗначение("Справочник.ПрофилиГруппДоступа.ЗакупкиИЗапасы");
	Элементы.ТаблицаОЛИЗКонтекстноеМенюКомандаПоставитьНаПаузу.Доступность 			= НЕ ДоступностьКоманд;
	Элементы.ТаблицаОЛИЗКонтекстноеМенюКомандаСнятьСПаузы.Доступность 				= НЕ ДоступностьКоманд;
	Элементы.ТаблицаОЛИЗКонтекстноеМенюКомандаУказатьПриоритет.Доступность 			= НЕ ДоступностьКоманд;
	Элементы.ТаблицаОЛИЗКонтекстноеМенюКомандаУказатьПриоритетСредний.Доступность 	= НЕ ДоступностьКоманд;
	Элементы.ТаблицаОЛИЗКонтекстноеМенюКомандаУказатьПриоритетВысокий.Доступность 	= НЕ ДоступностьКоманд;
	Элементы.ТаблицаОЛИЗКонтекстноеМенюКомандаСнятьПриоритет.Доступность 			= НЕ ДоступностьКоманд;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормыИнформацию()
	ОпределитьДоступностьКоманд();		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВозможностьОтгрузкиПоВсемуПроизводству(ЗаявкаПокупателя, СообщениеОбОшибки)
	
	РезультатПроверки 	= Ложь;
	Запрос 				= Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаПокупателя",ЗаявкаПокупателя);
	Запрос.Текст		= "ВЫБРАТЬ
	            		  |	ЖБИ_ПередачаВОтгрузкуДвижение.ЗаявкаПокупателя КАК ЗаявкаПокупателя,
	            		  |	ЕСТЬNULL(ЗаказПоставщикуТовары.Ссылка, ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)) КАК ЗаказПоставщику,
	            		  |	ЖБИ_ПередачаВОтгрузкуОстатки.Номенклатура.Артикул КАК Артикул
	            		  |ИЗ
	            		  |	РегистрНакопления.ЖБИ_ПередачаВОтгрузку.Остатки(, ЗаявкаПокупателя = &ЗаявкаПокупателя) КАК ЖБИ_ПередачаВОтгрузкуОстатки
	            		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЖБИ_ПередачаВОтгрузку КАК ЖБИ_ПередачаВОтгрузкуДвижение
	            		  |		ПО ЖБИ_ПередачаВОтгрузкуОстатки.Организация = ЖБИ_ПередачаВОтгрузкуДвижение.Организация
	            		  |			И ЖБИ_ПередачаВОтгрузкуОстатки.Подразделение = ЖБИ_ПередачаВОтгрузкуДвижение.Подразделение
	            		  |			И ЖБИ_ПередачаВОтгрузкуОстатки.ЗаявкаПокупателя = ЖБИ_ПередачаВОтгрузкуДвижение.ЗаявкаПокупателя
	            		  |			И ЖБИ_ПередачаВОтгрузкуОстатки.ПередачаВОтгрузку = ЖБИ_ПередачаВОтгрузкуДвижение.ПередачаВОтгрузку
	            		  |			И ЖБИ_ПередачаВОтгрузкуОстатки.Поставщик = ЖБИ_ПередачаВОтгрузкуДвижение.Поставщик
	            		  |			И ЖБИ_ПередачаВОтгрузкуОстатки.Номенклатура = ЖБИ_ПередачаВОтгрузкуДвижение.Номенклатура
	            		  |			И ЖБИ_ПередачаВОтгрузкуОстатки.НоменклатураПоставщика = ЖБИ_ПередачаВОтгрузкуДвижение.НоменклатураПоставщика
	            		  |			И ЖБИ_ПередачаВОтгрузкуОстатки.КодСтроки = ЖБИ_ПередачаВОтгрузкуДвижение.КодСтроки
	            		  |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	            		  |		ПО (ЖБИ_ПередачаВОтгрузкуДвижение.ЗаявкаПокупателя = ЗаказПоставщикуТовары.Ссылка.ЖБИ_ДокументОснование)
	            		  |			И (ЖБИ_ПередачаВОтгрузкуДвижение.Организация = ЗаказПоставщикуТовары.Ссылка.Организация)
	            		  |			И (ЖБИ_ПередачаВОтгрузкуДвижение.Подразделение = ЗаказПоставщикуТовары.Ссылка.Подразделение)
	            		  |			И (ЖБИ_ПередачаВОтгрузкуДвижение.Поставщик = ЗаказПоставщикуТовары.Ссылка.Партнер)
	            		  |			И (ЖБИ_ПередачаВОтгрузкуДвижение.Номенклатура = ЗаказПоставщикуТовары.Номенклатура)
	            		  |			И (ЖБИ_ПередачаВОтгрузкуДвижение.НоменклатураПоставщика = ЗаказПоставщикуТовары.НоменклатураПоставщика)
	            		  |			И (ЖБИ_ПередачаВОтгрузкуДвижение.ПередачаВОтгрузку = ЗаказПоставщикуТовары.ЖБИ_ПередачаВОтгрузку)
	            		  |			И (НЕ ЗаказПоставщикуТовары.Ссылка.ПометкаУдаления)
	            		  |ГДЕ
	            		  |	ЖБИ_ПередачаВОтгрузкуДвижение.ПереданоВОтгрузку > 0";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл		
		Если ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(РезультатЗапроса.ЗаказПоставщику,"ЖБИ_НомерСпецификации") = Неопределено Тогда
			СообщениеОбОшибки = "По товару " + РезультатЗапроса.Артикул + " не создан документ Заказ поставщику"; 
			Возврат РезультатПроверки;
		КонецЕсли;
		Если НЕ ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(РезультатЗапроса.ЗаказПоставщику,"ЖБИ_НомерСпецификации") Тогда
			СообщениеОбОшибки = "В Заказе поставщику № "+ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(РезультатЗапроса.ЗаказПоставщику,"Номер") + " не указан № спецификации"; 
			Возврат РезультатПроверки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(РезультатЗапроса.ЗаказПоставщику,"ДатаПоступления")) Тогда
			СообщениеОбОшибки = "В Заказе поставщику № "+ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(РезультатЗапроса.ЗаказПоставщику,"Номер") + " не указана Срок поставщика"; 
			Возврат РезультатПроверки;
		КонецЕсли;
		Если НЕ ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(РезультатЗапроса.ЗаказПоставщику,"Проведен") Тогда
			СообщениеОбОшибки = "Заказ поставщику не проведен № "+ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(РезультатЗапроса.ЗаказПоставщику,"Номер"); 
			Возврат РезультатПроверки;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверки = Истина;
	
	Возврат РезультатПроверки;
		
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСрокПоставщикаСервер(ЗаказПоставщику, СрокПоставщика, СообщениеОбОшибки)
	
	РезультатВыполнения 						=  Истина;
	ЗаказПоставщикуОбъект 						=  ЗаказПоставщику.ПолучитьОбъект();
	ЗаказПоставщикуОбъект.ПоступлениеОднойДатой =  Истина;
	ЗаказПоставщикуОбъект.ДатаПоступления 		=  СрокПоставщика;
	Попытка
		ЗаказПоставщикуОбъект.Записать();
	Исключение
		РезультатВыполнения = Ложь;
		СообщениеОбОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьКомментарийОЛИЗСервер(КомментарийОЛИЗ, СтруктураПараметров, СообщениеОбОшибки)
	
	РезультатВыполнения 	=  Истина;
	
	КодСтроки				= СтруктураПараметров.КодСтроки;
	Поставщик				= СтруктураПараметров.Поставщик;
	Номенклатура			= СтруктураПараметров.Номенклатура;
	НоменклатураПоставщика	= СтруктураПараметров.НоменклатураПоставщика;
	
	ЗаявкаПокупателяОбъект 	=  СтруктураПараметров.ЗаявкаПокупателя.ПолучитьОбъект();
	НайденныеСтроки 		=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.НайтиСтроки(Новый Структура("КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика",КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика));
	Если НайденныеСтроки.Количество()=0 Тогда 
		НоваяСтр 				=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,СтруктураПараметров);
		НоваяСтр.КомментарийОЛИЗ = КомментарийОЛИЗ;
	Иначе 
		НайденныеСтроки[0].КомментарийОЛИЗ = КомментарийОЛИЗ;
	КонецЕсли;
	
	Попытка
		ЗаявкаПокупателяОбъект.Записать();
	Исключение
		РезультатВыполнения = Ложь;
		СообщениеОбОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоставитьНаПаузу(СтруктураПараметров,СообщениеОбОшибки)
	
	РезультатВыполнения 	=  Истина;
	
	КодСтроки				= СтруктураПараметров.КодСтроки;
	Поставщик				= СтруктураПараметров.Поставщик;
	Номенклатура			= СтруктураПараметров.Номенклатура;
	НоменклатураПоставщика	= СтруктураПараметров.НоменклатураПоставщика;
	ПередачаВОтгрузку       = СтруктураПараметров.ПередачаВОтгрузку;
	
	ЗаявкаПокупателяОбъект 	=  СтруктураПараметров.ЗаявкаПокупателя.ПолучитьОбъект();
	НайденныеСтроки 		=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.НайтиСтроки(Новый Структура("КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика,ПередачаВОтгрузку",КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика,ПередачаВОтгрузку));
	Если НайденныеСтроки.Количество()=0 Тогда 
		НоваяСтр 				=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,СтруктураПараметров);
		НоваяСтр.НаПаузе = Истина;
	Иначе 
		НайденныеСтроки[0].НаПаузе = Истина;
	КонецЕсли;
	
	Попытка
		ЗаявкаПокупателяОбъект.Записать();
	Исключение
		РезультатВыполнения = Ложь;
		СообщениеОбОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат РезультатВыполнения;		
	
КонецФункции

&НаСервереБезКонтекста
Функция СнятьСПаузы(СтруктураПараметров,СообщениеОбОшибки)
	
	РезультатВыполнения 	=  Истина;
	
	КодСтроки				= СтруктураПараметров.КодСтроки;
	Поставщик				= СтруктураПараметров.Поставщик;
	Номенклатура			= СтруктураПараметров.Номенклатура;
	НоменклатураПоставщика	= СтруктураПараметров.НоменклатураПоставщика;
	ПередачаВОтгрузку       = СтруктураПараметров.ПередачаВОтгрузку;
	
	ЗаявкаПокупателяОбъект 	=  СтруктураПараметров.ЗаявкаПокупателя.ПолучитьОбъект();
	НайденныеСтроки 		=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.НайтиСтроки(Новый Структура("КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика,ПередачаВОтгрузку",КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика,ПередачаВОтгрузку));
	Если НайденныеСтроки.Количество()=0 Тогда 
		НоваяСтр 				=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,СтруктураПараметров);
		НоваяСтр.НаПаузе = Ложь;
	Иначе 
		НайденныеСтроки[0].НаПаузе = Ложь;
	КонецЕсли;
	
	Попытка
		ЗаявкаПокупателяОбъект.Записать();
	Исключение
		РезультатВыполнения = Ложь;
		СообщениеОбОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат РезультатВыполнения;		
	
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьОтгрузкиТовара(СообщениеОбОшибки)
	
	Результат = Ложь;
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		СообщениеОбОшибки = "Выберите товар";
		Возврат Результат;
	КонецЕсли;
	
	РезультатПроверкиСервер = ПроверитьВозможностьОтгрузкиПоВсемуПроизводству(ТекДанные.ЗаявкаПокупателя, СообщениеОбОшибки); 
	Если НЕ РезультатПроверкиСервер Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого НомСтр Из Элементы.ТаблицаОЛИЗ.ВыделенныеСтроки Цикл 
		ДанныеСтроки = Элементы.ТаблицаОЛИЗ.ДанныеСтроки(НомСтр);
		Если НЕ ПустаяСтрока(ДанныеСтроки.НаПаузе) Тогда
			СообщениеОбОшибки = "Нельзя выполнить отгрузку товара " + ДанныеСтроки.МаркировкаОбщепринятая + ", т.к. товар стоит на паузе"; 
			Возврат Результат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.КонтактныеЛицаПокупателя) Тогда
			СообщениеОбОшибки = "Нельзя выполнить отгрузку товара " + ДанныеСтроки.МаркировкаОбщепринятая + ", т.к. не заполнено поле Контактное лицо покупателя"; 
			Возврат Результат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.КонтактныеЛицаПоставщика) Тогда
			СообщениеОбОшибки = "Нельзя выполнить отгрузку товара " + ДанныеСтроки.МаркировкаОбщепринятая + ", т.к. не заполнено поле Контактное лицо поставщика"; 
			Возврат Результат;
		КонецЕсли;
		Если НЕ ДанныеСтроки.ЕстьФайл Тогда
			СообщениеОбОшибки = "Нельзя выполнить отгрузку товара " + ДанныеСтроки.МаркировкаОбщепринятая + ", т.к. не прикреплен файл счета"; 
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Истина;
	
	Возврат Результат;
		
КонецФункции

Функция ПолучитьСтруктуруЗаполненияОтгурзки() Экспорт 
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Организация");
	СтруктураЗаполнения.Вставить("Подразделение");
	СтруктураЗаполнения.Вставить("КодСтроки");
	СтруктураЗаполнения.Вставить("Номенклатура");
	СтруктураЗаполнения.Вставить("НоменклатураПоставщика");
	СтруктураЗаполнения.Вставить("Цена");
	СтруктураЗаполнения.Вставить("Поставщик");
	СтруктураЗаполнения.Вставить("Покупатель");
	СтруктураЗаполнения.Вставить("ЗаявкаПокупателя");
	СтруктураЗаполнения.Вставить("ПередачаВОтгрузку");
	СтруктураЗаполнения.Вставить("План");
	СтруктураЗаполнения.Вставить("КонтактныеЛицаПоставщика");
	СтруктураЗаполнения.Вставить("КонтактныеЛицаПокупателя");
	СтруктураЗаполнения.Вставить("НормаАвто");
	СтруктураЗаполнения.Вставить("Вес");
	СтруктураЗаполнения.Вставить("ДатаРазмещенияВОтгрузку");
	СтруктураЗаполнения.Вставить("Менеджер");
	СтруктураЗаполнения.Вставить("Негабаритный");
	СтруктураЗаполнения.Вставить("ПунктОтгрузки");
	СтруктураЗаполнения.Вставить("ПунктНазначения");
	
	Возврат СтруктураЗаполнения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварФактическиеОтгрузкиСервер(СтруктураЗаполнения,ФормаИзмОбъект)
	
		ФормаИзмОбъект.Организация		= СтруктураЗаполнения.Организация;
		ФормаИзмОбъект.Подразделение	= СтруктураЗаполнения.Подразделение;
		ФормаИзмОбъект.СтавкаНДС 		= УчетНДСУП.СтавкаНДСПоУмолчанию();
		ФормаИзмОбъект.ПодписантЗаказчик= ЖБИ_ОбщегоНазначенияСервер.ПолучитьПодписантаПоПраву(ФормаИзмОбъект.Ссылка, ФормаИзмОбъект.Организация);
	
		НоваяСтр 						= ФормаИзмОбъект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,СтруктураЗаполнения);
		НоваяСтр.Количество 			= СтруктураЗаполнения.План;
		НоваяСтр.Контрагент 			= ЖБИ_ОбщийМодульДокументы.ЗаполнитьКонтрагентаПартнераПоУмолчанию(НоваяСтр.Поставщик);
		НоваяСтр.МенеджерОС 			= СтруктураЗаполнения.Менеджер;
		НоваяСтр.ДатаОтгрузки	 		= ТекущаяДатаСеанса();
		НоваяСтр.КоличествоКОтгрузке 	= 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтгрузитьВыбранныйТовар(СообщениеОбОшибки)
	
	Результат = ПроверитьВозможностьОтгрузкиТовара(СообщениеОбОшибки);
	Если Не Результат Тогда 
		Возврат;
	КонецЕсли;
	
	ФормаОткрытия 	= ОткрытьФорму("Документ.ЖБИ_ФактическиеОтгрузки.Форма.ФормаДокумента",,ЭтаФорма);	
	ФормаИзмОбъект  = ФормаОткрытия.Объект;
	
	СтруктураЗаполнения = ПолучитьСтруктуруЗаполненияОтгурзки();
	Для Каждого НомСтр Из Элементы.ТаблицаОЛИЗ.ВыделенныеСтроки Цикл
		ДанныеСтроки 			= Элементы.ТаблицаОЛИЗ.ДанныеСтроки(НомСтр);
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения,ДанныеСтроки);
		Вес 					= ЖБИ_ОбщегоНазначенияСервер.ЗаполнитьВесТовара(ДанныеСтроки.Поставщик,ДанныеСтроки.НоменклатураПоставщика);
		СтруктураЗаполнения.Вес = Вес; 
		ЗаполнитьТоварФактическиеОтгрузкиСервер(СтруктураЗаполнения,ФормаИзмОбъект);
	КонецЦикла;
	КопироватьДанныеФормы(ФормаИзмОбъект,ФормаОткрытия.Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УказатьПриоритетНизкий(СтруктураПараметров,СообщениеОбОшибки)
	
	РезультатВыполнения 	=  Истина;
	
	КодСтроки				= СтруктураПараметров.КодСтроки;
	Поставщик				= СтруктураПараметров.Поставщик;
	Номенклатура			= СтруктураПараметров.Номенклатура;
	НоменклатураПоставщика	= СтруктураПараметров.НоменклатураПоставщика;
	
	ЗаявкаПокупателяОбъект 	=  СтруктураПараметров.ЗаявкаПокупателя.ПолучитьОбъект();
	НайденныеСтроки 		=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.НайтиСтроки(Новый Структура("КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика",КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика));
	Если НайденныеСтроки.Количество()=0 Тогда 
		НоваяСтр 				=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,СтруктураПараметров);
		НоваяСтр.Приоритет = 1;
	Иначе 
		НайденныеСтроки[0].Приоритет = 1;
	КонецЕсли;
	
	Попытка
		ЗаявкаПокупателяОбъект.Записать();
	Исключение
		РезультатВыполнения = Ложь;
		СообщениеОбОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат РезультатВыполнения;		
	
КонецФункции

&НаСервереБезКонтекста
Функция УказатьПриоритетСредний(СтруктураПараметров,СообщениеОбОшибки)
	
	РезультатВыполнения 	=  Истина;
	
	КодСтроки				= СтруктураПараметров.КодСтроки;
	Поставщик				= СтруктураПараметров.Поставщик;
	Номенклатура			= СтруктураПараметров.Номенклатура;
	НоменклатураПоставщика	= СтруктураПараметров.НоменклатураПоставщика;
	
	ЗаявкаПокупателяОбъект 	=  СтруктураПараметров.ЗаявкаПокупателя.ПолучитьОбъект();
	НайденныеСтроки 		=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.НайтиСтроки(Новый Структура("КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика",КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика));
	Если НайденныеСтроки.Количество()=0 Тогда 
		НоваяСтр 				=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,СтруктураПараметров);
		НоваяСтр.Приоритет = 2;
	Иначе 
		НайденныеСтроки[0].Приоритет = 2;
	КонецЕсли;
	
	Попытка
		ЗаявкаПокупателяОбъект.Записать();
	Исключение
		РезультатВыполнения = Ложь;
		СообщениеОбОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат РезультатВыполнения;		
	
КонецФункции

&НаСервереБезКонтекста
Функция УказатьПриоритетВысокий(СтруктураПараметров,СообщениеОбОшибки)
	
	РезультатВыполнения 	=  Истина;
	
	КодСтроки				= СтруктураПараметров.КодСтроки;
	Поставщик				= СтруктураПараметров.Поставщик;
	Номенклатура			= СтруктураПараметров.Номенклатура;
	НоменклатураПоставщика	= СтруктураПараметров.НоменклатураПоставщика;
	
	ЗаявкаПокупателяОбъект 	=  СтруктураПараметров.ЗаявкаПокупателя.ПолучитьОбъект();
	НайденныеСтроки 		=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.НайтиСтроки(Новый Структура("КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика",КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика));
	Если НайденныеСтроки.Количество()=0 Тогда 
		НоваяСтр 				=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,СтруктураПараметров);
		НоваяСтр.Приоритет = 3;
	Иначе 
		НайденныеСтроки[0].Приоритет = 3;
	КонецЕсли;
	
	Попытка
		ЗаявкаПокупателяОбъект.Записать();
	Исключение
		РезультатВыполнения = Ложь;
		СообщениеОбОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат РезультатВыполнения;		
	
КонецФункции

&НаСервереБезКонтекста
Функция СнятьПриоритет(СтруктураПараметров,СообщениеОбОшибки)
	
	РезультатВыполнения 	=  Истина;
	
	КодСтроки				= СтруктураПараметров.КодСтроки;
	Поставщик				= СтруктураПараметров.Поставщик;
	Номенклатура			= СтруктураПараметров.Номенклатура;
	НоменклатураПоставщика	= СтруктураПараметров.НоменклатураПоставщика;
	
	ЗаявкаПокупателяОбъект 	=  СтруктураПараметров.ЗаявкаПокупателя.ПолучитьОбъект();
	НайденныеСтроки 		=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.НайтиСтроки(Новый Структура("КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика",КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика));
	Если НайденныеСтроки.Количество()=0 Тогда 
		НоваяСтр 				=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,СтруктураПараметров);
		НоваяСтр.Приоритет = "";
	Иначе 
		НайденныеСтроки[0].Приоритет = "";
	КонецЕсли;
	
	Попытка
		ЗаявкаПокупателяОбъект.Записать();
	Исключение
		РезультатВыполнения = Ложь;
		СообщениеОбОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат РезультатВыполнения;		
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьКомментарийОССервер(КомментарийОС, СтруктураПараметров, СообщениеОбОшибки)
	
	РезультатВыполнения 	=  Истина;
	
	КодСтроки				= СтруктураПараметров.КодСтроки;
	Поставщик				= СтруктураПараметров.Поставщик;
	Номенклатура			= СтруктураПараметров.Номенклатура;
	НоменклатураПоставщика	= СтруктураПараметров.НоменклатураПоставщика;
	
	ЗаявкаПокупателяОбъект 	=  СтруктураПараметров.ЗаявкаПокупателя.ПолучитьОбъект();
	НайденныеСтроки 		=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.НайтиСтроки(Новый Структура("КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика",КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика));
	Если НайденныеСтроки.Количество()=0 Тогда 
		НоваяСтр 				=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,СтруктураПараметров);
		НоваяСтр.КомментарийОС = КомментарийОС;
	Иначе 
		НайденныеСтроки[0].КомментарийОС = КомментарийОС;
	КонецЕсли;
	
	Попытка
		ЗаявкаПокупателяОбъект.Записать();
	Исключение
		РезультатВыполнения = Ложь;
		СообщениеОбОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьКонтактныеЛицаПоставщикСервер(КонтактныеЛица, СтруктураПараметров, СообщениеОбОшибки)
	
	РезультатВыполнения 	=  Истина;
	
	КодСтроки				= СтруктураПараметров.КодСтроки;
	Поставщик				= СтруктураПараметров.Поставщик;
	Номенклатура			= СтруктураПараметров.Номенклатура;
	НоменклатураПоставщика	= СтруктураПараметров.НоменклатураПоставщика;
	ПередачаВОтгрузку       = СтруктураПараметров.ПередачаВОтгрузку;
	
	ЗаявкаПокупателяОбъект 	=  СтруктураПараметров.ЗаявкаПокупателя.ПолучитьОбъект();
	НайденныеСтроки 		=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.НайтиСтроки(Новый Структура("КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика,ПередачаВОтгрузку",КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика,ПередачаВОтгрузку));
	Если НайденныеСтроки.Количество()=0 Тогда 
		НоваяСтр 				=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,СтруктураПараметров);
		НоваяСтр.КонтактныеЛицаПоставщика = КонтактныеЛица;
	Иначе 
		НайденныеСтроки[0].КонтактныеЛицаПоставщика = КонтактныеЛица;
	КонецЕсли;
	
	Попытка
		ЗаявкаПокупателяОбъект.Записать();
	Исключение
		РезультатВыполнения = Ложь;
		СообщениеОбОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
 //   Свойства				=  "КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика,КонтактныеЛицаПоставщика";
 //   ЗаявкаПокупателяОбъект 	=  СтруктураПараметров.ЗаявкаПокупателя.ПолучитьОбъект();
 //   
 //   ИндексПоследнего 		= ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Количество() - 1;
 //   Для Индекс = 0 По ИндексПоследнего Цикл
 //   	Если //ЗначениеЗаполнено(ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация[ИндексПоследнего - Индекс].КонтактныеЛицаПоставщика)
 //   		ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация[ИндексПоследнего - Индекс].Поставщик = Поставщик Тогда 
 //   		ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Удалить(ИндексПоследнего - Индекс);		
 //   	КонецЕсли;
 //   КонецЦикла; 
 //   
 //   Запрос 					= Новый Запрос;
 //   Запрос.УстановитьПараметр("ЗаявкаПокупателя",СтруктураПараметров.ЗаявкаПокупателя);
 //   Запрос.УстановитьПараметр("Поставщик",Поставщик);
 //   Запрос.Текст 			= "ВЫБРАТЬ
 //   							|	ЖБИ_ПередачаВОтгрузкуОстатки.Организация КАК Организация,
 //   							|	ЖБИ_ПередачаВОтгрузкуОстатки.Подразделение КАК Подразделение,
 //   							|	ЖБИ_ПередачаВОтгрузкуОстатки.ЗаявкаПокупателя КАК ЗаявкаПокупателя,
 //   							|	ЖБИ_ПередачаВОтгрузкуОстатки.ПередачаВОтгрузку КАК ПередачаВОтгрузку,
 //   							|	ЖБИ_ПередачаВОтгрузкуОстатки.Поставщик КАК Поставщик,
 //   							|	ЖБИ_ПередачаВОтгрузкуОстатки.Номенклатура КАК Номенклатура,
 //   							|	ЖБИ_ПередачаВОтгрузкуОстатки.НоменклатураПоставщика КАК НоменклатураПоставщика,
 //   							|	ЖБИ_ПередачаВОтгрузкуОстатки.КодСтроки КАК КодСтроки
 //   							|ИЗ
 //   							|	РегистрНакопления.ЖБИ_ПередачаВОтгрузку КАК ЖБИ_ПередачаВОтгрузкуОстатки
 //   							|ГДЕ
 //   							//|	ЖБИ_ПередачаВОтгрузкуОстатки.ГрузитсяОстаток > 0
 //   							|	ЖБИ_ПередачаВОтгрузкуОстатки.ЗаявкаПокупателя = &ЗаявкаПокупателя
 //   							|	И ЖБИ_ПередачаВОтгрузкуОстатки.Поставщик = &Поставщик";
 //   
 //   РезультатЗапроса = Запрос.Выполнить().Выбрать();
 //   Пока РезультатЗапроса.Следующий() Цикл 
 //   	НайденныеСтроки 		=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.НайтиСтроки(Новый Структура(Свойства,РезультатЗапроса.КодСтроки,РезультатЗапроса.Поставщик,РезультатЗапроса.Номенклатура,РезультатЗапроса.НоменклатураПоставщика,КонтактныеЛица));
 //   	Если НайденныеСтроки.Количество()=0 Тогда 
 //   		НоваяСтр 				=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Добавить();
 //   		ЗаполнитьЗначенияСвойств(НоваяСтр,РезультатЗапроса);
 //   		НоваяСтр.КонтактныеЛицаПоставщика = КонтактныеЛица;
 //   	//Иначе 
 //   		//НайденныеСтроки[0].КонтактныеЛицаПоставщика = КонтактныеЛица;
 //   	КонецЕсли;		
 //   КонецЦикла;
 //
 //   Попытка
 //   	ЗаявкаПокупателяОбъект.Записать();
 //   Исключение
 //   	РезультатВыполнения = Ложь;
 //   	СообщениеОбОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
 //   КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьКонтактныеЛицаПокупательСервер(КонтактныеЛица, СтруктураПараметров, СообщениеОбОшибки)
	
	РезультатВыполнения 	=  Истина;
	
	КодСтроки				= СтруктураПараметров.КодСтроки;
	Поставщик				= СтруктураПараметров.Поставщик;
	Номенклатура			= СтруктураПараметров.Номенклатура;
	НоменклатураПоставщика	= СтруктураПараметров.НоменклатураПоставщика;
	
	ЗаявкаПокупателяОбъект 	=  СтруктураПараметров.ЗаявкаПокупателя.ПолучитьОбъект();
	НайденныеСтроки 		=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.НайтиСтроки(Новый Структура("КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика",КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика));
	Если НайденныеСтроки.Количество()=0 Тогда 
		НоваяСтр 				=  ЗаявкаПокупателяОбъект.ВспомогательнаяИнформация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,СтруктураПараметров);
		НоваяСтр.КонтактныеЛицаПокупателя = КонтактныеЛица;
	Иначе 
		НайденныеСтроки[0].КонтактныеЛицаПокупателя = КонтактныеЛица;
	КонецЕсли;
	
	Попытка
		ЗаявкаПокупателяОбъект.Записать();
	Исключение
		РезультатВыполнения = Ложь;
		СообщениеОбОшибки 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ДинамическийСписокВТаблицуЗначений(ЗаявкаПокупателя, Поставщик)
	
	//Получаем схема компановки данных (здесь хранится текст запроса)
	Схема = Элементы.ТаблицаОЛИЗ.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	//Получаем настройки пользователя (отборы, сортировки и т.п.)
	Настройки = Элементы.ТаблицаОЛИЗ.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	//Выводим динамический список в таблицу значений
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗДинСписок = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	ТЗРезультат = ТЗДинСписок.Скопировать(Новый Структура("ЗаявкаПокупателя, Поставщик",ЗаявкаПокупателя, Поставщик));
	ТЗРезультат.Сортировать("Поставщик");
	
	//Возвращаем полученную таблицу значений
	Возврат ТЗРезультат;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТоварыКЗакупки(ЗаявкаПокупателя, Поставщик)
	
	ТаблицаТовары = ДинамическийСписокВТаблицуЗначений(ЗаявкаПокупателя, Поставщик);
	Возврат ТаблицаТовары;
	
КонецФункции

&НаСервере
Функция СоздатьНовыйЗаказПоставщику(ОтборПоставщик,ТаблицаТовары)
	
	Отказ 											= Ложь;
	ДатаАктуальности 								= ТекущаяДатаСеанса();
	НайденныеСтроки 								= ТаблицаТовары.НайтиСтроки(Новый Структура("ЗаказПоставщику,Поставщик",Документы.ЗаказПоставщику.ПустаяСсылка(),ОтборПоставщик));
	ДокЗаказПоставщику 								= Документы.ЗаказПоставщику.СоздатьДокумент();
	ДокЗаказПоставщику.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ДокЗаказПоставщику.Дата							= ДатаАктуальности;
	ДокЗаказПоставщику.Организация 					= НайденныеСтроки[0].Организация;
	ДокЗаказПоставщику.Подразделение 				= НайденныеСтроки[0].Подразделение;
	ДокЗаказПоставщику.Партнер 						= НайденныеСтроки[0].Поставщик;
	ДокЗаказПоставщику.ЗаполнитьУсловияЗакупокПоУмолчанию(Ложь);
	//ДокЗаказПоставщику.Контрагент				= 
	ДокЗаказПоставщику.Менеджер 					= ТекущийПользователь;//НайденныеСтроки[0].Менеджер;
	ДокЗаказПоставщику.Валюта 						= НайденныеСтроки[0].ЗаявкаПокупателя.Валюта;
	ДокЗаказПоставщику.РегистрироватьЦеныПоставщика	= Истина;
	ДокЗаказПоставщику.Склад 						= Справочники.Склады.СкладПоУмолчанию();
		//ФормаЗаказа.ЗаполнитьУсловияЗакупокПоУмолчанию(Ложь);
	
	// заполнение реквизита ЗакупкаПодДеятельность
	//ДокЗаказПоставщику.НалогообложениеНДС		= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	//ДокЗаказПоставщику.ЗакупкаПодДеятельность   = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	//ПараметрыЗаполнения 						= Документы.ЗаказПоставщику.ПараметрыЗаполненияВидаДеятельностиНДС(ДокЗаказПоставщику);
	//УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ДокЗаказПоставщику.ЗакупкаПодДеятельность, ПараметрыЗаполнения);
	ДокЗаказПоставщику.ЦенаВключаетНДС 			= Истина;
	ДокЗаказПоставщику.ФормаОплаты 				= Перечисления.ФормыОплаты.Безналичная;
	ДокЗаказПоставщику.БанковскийСчет 			= Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДокЗаказПоставщику.Организация, ДокЗаказПоставщику.Валюта, ДокЗаказПоставщику.НаправлениеДеятельности);
	
	КэшированныеЗначения						= Неопределено;
	СтруктураПересчетаСуммы 					= ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокЗаказПоставщику);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
		Новый Структура("НалогообложениеНДС, Дата", ДокЗаказПоставщику.НалогообложениеНДС, ДатаАктуальности));		
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");	
	Для Каждого СтрокаЗаказа Из НайденныеСтроки Цикл
		НоваяСтрокаЗаказа = ДокЗаказПоставщику.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаказа, СтрокаЗаказа);
		НоваяСтрокаЗаказа.КодСтроки 					= 0; //если 0, тогда срабатывает событие, которое перенумерует строки
		НоваяСтрокаЗаказа.ЖБИ_ПередачаВОтгрузку 		= СтрокаЗаказа.ПередачаВОтгрузку;
		НоваяСтрокаЗаказа.Количество 					= СтрокаЗаказа.План;
		НоваяСтрокаЗаказа.КоличествоУпаковок			= СтрокаЗаказа.План;
		НоваяСтрокаЗаказа.Упаковка 						= СтрокаЗаказа.Номенклатура.ЕдиницаИзмерения;		
		НоваяСтрокаЗаказа.Склад 						= Справочники.Склады.СкладПоУмолчанию();	
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаЗаказа, СтруктураДействий, КэшированныеЗначения);
		
		НоваяСтрокаЗаказа.ЖБИ_ЦенаПоставщика 			= СтрокаЗаказа.ЦенаПоставщика;
		Сумма 											= НоваяСтрокаЗаказа.ЖБИ_ЦенаПоставщика * НоваяСтрокаЗаказа.Количество;
		ТекПроцентНДС 									= УчетНДСУПКлиентСервер.ПолучитьСтавкуНДС(НоваяСтрокаЗаказа.СтавкаНДС);
		
		СуммаНДСПоставщика								= УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
															Сумма,
															ТекПроцентНДС,
															ДокЗаказПоставщику.ЦенаВключаетНДС,
															ДокЗаказПоставщику.НалогообложениеНДС);
																
		НоваяСтрокаЗаказа.ЖБИ_Сумма 					= Окр(Сумма + ?(ДокЗаказПоставщику.ЦенаВключаетНДС, 0, СуммаНДСПоставщика), 2, РежимОкругления.Окр15как20);		
	КонецЦикла;
	
	ДокЗаказПоставщику.СпособДоставки					= Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
	ДокЗаказПоставщику.АдресДоставкиДляПоставщика       = НайденныеСтроки[0].ПунктНазначения;
	ДокЗаказПоставщику.ЖБИ_ДокументОснование			= НайденныеСтроки[0].ЗаявкаПокупателя;
	ДокЗаказПоставщику.ЖБИ_НомерСпецификации			= Документы.ЗаказПоставщику.ЗаполнитьНомерСпецификации();
	ДокЗаказПоставщику.ЖБИ_ДатаСпецификации				= ДатаАктуальности;
	ДокЗаказПоставщику.ЖБИ_УсловиеВДоговоре1			= Справочники.ЖБИ_УсловияПоОплатеВДоговоре.НайтиПоРеквизиту("СлужебныйКод",1);
	ДокЗаказПоставщику.ЖБИ_УсловиеВДоговоре2			= Справочники.ЖБИ_УсловияПоОплатеВДоговоре.НайтиПоРеквизиту("СлужебныйКод",2);
	ДокЗаказПоставщику.ЖБИ_УсловиеВДоговоре3			= Справочники.ЖБИ_УсловияПоОплатеВДоговоре.НайтиПоРеквизиту("СлужебныйКод",3);
	ДокЗаказПоставщику.ЖБИ_УсловиеВДоговоре4			= Справочники.ЖБИ_УсловияПоОплатеВДоговоре.НайтиПоРеквизиту("СлужебныйКод",4);
		
	ДокЗаказПоставщику.Приоритет             			= Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокЗаказПоставщику.Приоритет);
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам") Тогда
		ДокЗаказПоставщику.Статус = Перечисления.СтатусыЗаказовПоставщикам.Закрыт;
	Иначе
		ДокЗаказПоставщику.Статус = Перечисления.СтатусыЗаказовПоставщикам.Согласован;
	КонецЕсли;
	ДокЗаказПоставщику.ПорядокРасчетов       			= ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(ДокЗаказПоставщику);
	
	ПараметрыЗаполнения = Документы.ЗаказПоставщику.ПараметрыЗаполненияНалогообложенияНДСЗакупки(ДокЗаказПоставщику);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(ДокЗаказПоставщику.НалогообложениеНДС, ПараметрыЗаполнения);
	
	ПараметрыЗаполнения = Документы.ЗаказПоставщику.ПараметрыЗаполненияВидаДеятельностиНДС(ДокЗаказПоставщику);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ДокЗаказПоставщику.ЗакупкаПодДеятельность, ПараметрыЗаполнения);
	
	УчетНДСУП.СкорректироватьСтавкуНДСВТЧДокумента(ДокЗаказПоставщику, ДокЗаказПоставщику.Товары);
	
	ДокЗаказПоставщику.ВариантПриемкиТоваров 			= Константы.ВариантПриемкиТоваров.Получить();
	Попытка 
		ДокЗаказПоставщику.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	
	Если НЕ Отказ Тогда 
		ЗаказПоставщикуДляПечати = ДокЗаказПоставщику.Ссылка;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТоварЗаказаПоставщикуСервер(ЗаявкаПокупателя, Поставщик)
	
	РезультатВыполнения = Истина;
	ТаблицаТовары 		= ЗаполнитьТоварыКЗакупки(ЗаявкаПокупателя, Поставщик);
	Если ТаблицаТовары.Количество() = 0 Тогда
		РезультатВыполнения = Ложь;
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	//выберим товары, у которых не заполнен документ Заявка поставщику
	ТаблПоставщики 	= ТаблицаТовары.Скопировать(Новый Структура("ЗаказПоставщику",Документы.ЗаказПоставщику.ПустаяСсылка()),"Поставщик");
	ТаблПоставщики.Свернуть("Поставщик");
	
	НачатьТранзакцию();
	Для Каждого НомСтр Из ТаблПоставщики Цикл  
		Отказ = СоздатьНовыйЗаказПоставщику(НомСтр.Поставщик,ТаблицаТовары);
		Если Отказ Тогда
			ОтменитьТранзакцию();
			РезультатВыполнения = Ложь;
			Возврат РезультатВыполнения;
		КонецЕсли;
	КонецЦикла;
	ЗафиксироватьТранзакцию();
	
	Возврат РезультатВыполнения;
						
КонецФункции

&НаКлиенте
Процедура СоздатьЗаявкуПоставщику(ТекДанные)
	
	ЗаявкаПокупателя 	= ТекДанные.ЗаявкаПокупателя; 
	Поставщик 			= ТекДанные.Поставщик;
	//ФормаОткрытия 	= ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаДокумента",,ЭтаФорма);	
	//ИзмОбъект  		= ФормаОткрытия.Объект;
	РезультатВыполнения = ЗаполнитьТоварЗаказаПоставщикуСервер(ЗаявкаПокупателя, Поставщик);
	Если РезультатВыполнения Тогда 
		Элементы.ТаблицаОЛИЗ.Обновить();
		ОбщегоНазначенияКлиент.СообщитьПользователю("Заявка поставщику создана");
		Печать("");
	КонецЕсли;
	//КопироватьДанныеФормы(ИзмОбъект,ФормаОткрытия.Объект);
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяОперации()
	
	ИмяОперации = "";
	ИмяСтраницы = Элементы.СтраницыОсновнаяФорма.ТекущаяСтраница.Имя;	
	Если ИмяСтраницы = "СтраницаЛогист" Тогда
		ИмяОперации = "КомандаКомандаПланОтгрузкиЛогист";
		Элементы.КомандаПланОтгрузкиЛогист.Пометка = Истина;
	КонецЕсли;
	
	Возврат ИмяОперации;
	
КонецФункции

#КонецОбласти

#Область Печать

&НаСервере
Функция ПолучитьСписокПечатныхФорм()
	
	СтруктураПечатныхФорм = Новый Структура;	
	СтруктураПечатныхФорм.Вставить("ЖБИ_ЗаявкаПоставщику", "ЖБИ - Заявка поставщику");
	СтруктураПечатныхФорм.Вставить("ЖБИ_Спецификация", "ЖБИ - Спецификация");
	
	Возврат СтруктураПечатныхФорм;
	
КонецФункции

&НаКлиенте
Процедура Печать(Команда)
	 
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Команда = "" Тогда 
		ИмяФормыПечати = "ЖБИ_ЗаявкаПоставщику";
		ЗаказПоставщику = ЗаказПоставщикуДляПечати; 
		ЗаказПоставщикуДляПечати = ПредопределенноеЗначение("Документ.ЗаказПоставщику.ПустаяСсылка");
	Иначе 
		ИмяФормыПечати = СтрЗаменить(Команда.Имя, "Печать_", "");
		ЗаказПоставщику = ТекДанные.ЗаказПоставщику; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗаказПоставщику) Тогда 
		Возврат;
	КонецЕсли;	

	МассивПечатныхФорм 	= ПечатьСерверный(ИмяФормыПечати,ЗаказПоставщику);
	Если ЗначениеЗаполнено(МассивПечатныхФорм) Тогда
		ЖБИ_ОбщийМодульКлиентСервер.СформироватьПечатнуюФорму(ЭтаФорма,МассивПечатныхФорм);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПечатьСерверный(ИмяФормыПечати, ЗаказПоставщику)
	
	МассивПечатныхФорм = Новый Массив;
	
	КоллекцияПечатныхФорм 	= Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("Картинка");	
	КоллекцияПечатныхФорм.Колонки.Добавить("ПолныйПутьКМакету");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяФайлаПечатнойФормы");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяВРЕГ");
	НоваяСтр 				= КоллекцияПечатныхФорм.Добавить();
	НоваяСтр.ИмяВРЕГ		= ВРЕГ(ИмяФормыПечати);
	НоваяСтр.ИмяМакета      = ИмяФормыПечати;
	
	ПараметрыПечати 		= Новый Структура("ДополнитьКомплектВнешнимиПечатнымиФормами",Ложь);
	МассивОбъектов			= Новый Массив;
	МассивОбъектов.Добавить(ЗаказПоставщику);
	Документы.ЗаказПоставщику.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, Новый СписокЗначений, Новый Структура, МассивПечатныхФорм);
	
	Возврат МассивПечатныхФорм;
	
КонецФункции

#КонецОбласти

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_ЭЛЕМЕНТОВ_УПРАВЛЕНИЯ_ФОРМЫ

#Область Отборы

&НаСервере
Процедура УстановитьОтборДинСпискаПоСегменту(СписокСегмент, ИмяОтбора, ВидСравнения)	
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинСпискаПоСегменту(СписокСегмент,ТаблицаОЛИЗ,ИмяОтбора,ВидСравнения);	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПунктОтгрузкиПриИзменении(Элемент)	
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,ТаблицаОЛИЗ,ЭтотОбъект,"ПунктОтгрузки",Неопределено);	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПунктНазначенияПриИзменении(Элемент)
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,ТаблицаОЛИЗ,ЭтотОбъект,"ПунктНазначения",Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоставщикПриИзменении(Элемент)
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,ТаблицаОЛИЗ,ЭтотОбъект,"Поставщик",Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСегментПриИзменении(Элемент)
	УстановитьОтборДинСпискаПоСегменту(ЭтотОбъект[Элемент.Имя], "Поставщик", ВидСравненияКомпоновкиДанных.ВСписке);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПокупательПриИзменении(Элемент)
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,ТаблицаОЛИЗ,ЭтотОбъект,"Покупатель",Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборНоменклатураПриИзменении(Элемент)
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,ТаблицаОЛИЗ,ЭтотОбъект,"Номенклатура",Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаявкаПокупателяПриИзменении(Элемент)
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,ТаблицаОЛИЗ,ЭтотОбъект,"ЗаявкаПокупателя",Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборНегабаритныйПриИзменении(Элемент)
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,ТаблицаОЛИЗ,ЭтотОбъект,"Негабаритный",Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,ТаблицаОЛИЗ,ЭтотОбъект,"Организация",Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОтборТипОтгрузкиПриИзменении(Элемент)
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,ТаблицаОЛИЗ,ЭтотОбъект,"ТипОтгрузки",Неопределено);
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура КомандаОтгрузить(Команда)
		
	Текст = "Выполнить отгрузку?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","КомандаОтгрузить");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаУказатьПриоритетНизкий(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	СтруктураСобытия 	= Новый Структура("ИмяСобытия,ЗаявкаПокупателя,КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика","КомандаПоставитьНаПаузу",ТекДанные.ЗаявкаПокупателя,ТекДанные.КодСтроки,ТекДанные.Поставщик,ТекДанные.Номенклатура,ТекДанные.НоменклатураПоставщика);
	СообщениеОбОшибки 	= "";
	РезультатЗаписи 	= УказатьПриоритетНизкий(СтруктураСобытия,СообщениеОбОшибки);
	Если НЕ РезультатЗаписи Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
	КонецЕсли;	
	
	Элементы.ТаблицаОЛИЗ.Обновить();
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаУказатьПриоритетСредний(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	СтруктураСобытия 	= Новый Структура("ИмяСобытия,ЗаявкаПокупателя,КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика","КомандаПоставитьНаПаузу",ТекДанные.ЗаявкаПокупателя,ТекДанные.КодСтроки,ТекДанные.Поставщик,ТекДанные.Номенклатура,ТекДанные.НоменклатураПоставщика);
	СообщениеОбОшибки 	= "";
	РезультатЗаписи 	= УказатьПриоритетСредний(СтруктураСобытия,СообщениеОбОшибки);
	Если НЕ РезультатЗаписи Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
	КонецЕсли;	
	
	Элементы.ТаблицаОЛИЗ.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУказатьПриоритетВысокий(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	СтруктураСобытия 	= Новый Структура("ИмяСобытия,ЗаявкаПокупателя,КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика","КомандаПоставитьНаПаузу",ТекДанные.ЗаявкаПокупателя,ТекДанные.КодСтроки,ТекДанные.Поставщик,ТекДанные.Номенклатура,ТекДанные.НоменклатураПоставщика);
	СообщениеОбОшибки 	= "";
	РезультатЗаписи 	= УказатьПриоритетВысокий(СтруктураСобытия,СообщениеОбОшибки);
	Если НЕ РезультатЗаписи Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
	КонецЕсли;	
	
	Элементы.ТаблицаОЛИЗ.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьПриоритет(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	СтруктураСобытия 	= Новый Структура("ИмяСобытия,ЗаявкаПокупателя,КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика","КомандаПоставитьНаПаузу",ТекДанные.ЗаявкаПокупателя,ТекДанные.КодСтроки,ТекДанные.Поставщик,ТекДанные.Номенклатура,ТекДанные.НоменклатураПоставщика);
	СообщениеОбОшибки 	= "";
	РезультатЗаписи 	= СнятьПриоритет(СтруктураСобытия,СообщениеОбОшибки);
	Если НЕ РезультатЗаписи Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
	КонецЕсли;	
	
	Элементы.ТаблицаОЛИЗ.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоставитьНаПаузу(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Поставить на паузу?";
	СтруктураСобытия = Новый Структура("ИмяСобытия,ЗаявкаПокупателя,КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика,ПередачаВОтгрузку","КомандаПоставитьНаПаузу",ТекДанные.ЗаявкаПокупателя,ТекДанные.КодСтроки,ТекДанные.Поставщик,ТекДанные.Номенклатура,ТекДанные.НоменклатураПоставщика,ТекДанные.ПередачаВОтгрузку);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьСПаузы(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Снять с паузы?";
	СтруктураСобытия = Новый Структура("ИмяСобытия,ЗаявкаПокупателя,КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика,ПередачаВОтгрузку","КомандаСнятьСПаузы",ТекДанные.ЗаявкаПокупателя,ТекДанные.КодСтроки,ТекДанные.Поставщик,ТекДанные.Номенклатура,ТекДанные.НоменклатураПоставщика,ТекДанные.ПередачаВОтгрузку);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьЗаявкуПоставщику(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Создать заявку поставщику?";
	СтруктураСобытия = Новый Структура("ИмяСобытия, ТекДанные","СоздатьЗаявкуПоставщику",ТекДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);		
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПланОтгрузкиЛогист(Команда)
	
	Элементы.СтраницыОсновнаяФорма.ТекущаяСтраница = Элементы.СтраницаЛогист;
	ИмяОперации = ПолучитьИмяОперации();
	УстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЗаявкуПставщику(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.ЗаказПоставщику) Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаДокумента",
	Новый Структура("Ключ",ТекДанные.ЗаказПоставщику),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ОткрытьЗаявкуПставщику"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьСрокПоставщика(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.ЗаказПоставщику) Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Нельзя указать Срок поставщика, нужно создать Заявку поставщику"); 
		Возврат;
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура("ИмяСобытия,ЗаказПоставщику","ВводСрокПоставщика",ТекДанные.ЗаказПоставщику);
	ВыбЗнач = ТекДанные.СрокПоставщика;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КЧ = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите Срок поставщика", ОписаниеТипов);	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьКомментарийОЛИЗ(Команда)
		
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура("ИмяСобытия,ЗаявкаПокупателя,КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика","ИзменитьКомментарийОЛИЗ",ТекДанные.ЗаявкаПокупателя,ТекДанные.КодСтроки,ТекДанные.Поставщик,ТекДанные.Номенклатура,ТекДанные.НоменклатураПоставщика);
	ВыбЗнач = ТекДанные.КомментарийОЛИЗ;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	КЧ = Новый КвалификаторыСтроки(256);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите Комментарий ОЛИЗ", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьКомментарийОС(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура("ИмяСобытия,ЗаявкаПокупателя,КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика","ИзменитьКомментарийОС",ТекДанные.ЗаявкаПокупателя,ТекДанные.КодСтроки,ТекДанные.Поставщик,ТекДанные.Номенклатура,ТекДанные.НоменклатураПоставщика);
	ВыбЗнач = ТекДанные.КомментарийОС;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	КЧ = Новый КвалификаторыСтроки(256);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите Комментарий ОС", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьКонтактныеЛицаПоставщика(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ЗначениеОтбора 		= Новый Структура("Владелец", ТекДанные.Поставщик);
	ПараметрыВыбора  	= Новый Структура("Отбор,ИмяСобытия,ЗаявкаПокупателя,КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика,ПередачаВОтгрузку",ЗначениеОтбора,"ИзменитьКонтактныеЛицаПоставщик",ТекДанные.ЗаявкаПокупателя,ТекДанные.КодСтроки,ТекДанные.Поставщик,ТекДанные.Номенклатура,ТекДанные.НоменклатураПоставщика,ТекДанные.ПередачаВОтгрузку);
	Оповещение 			= Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, ПараметрыВыбора);
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора",ПараметрыВыбора,ЭтаФорма,,,,Оповещение);
	
	//ВыбЗнач = ТекДанные.КонтактныеЛица;
	//Массив = Новый Массив;
	//Массив.Добавить(Тип("СправочникСсылка.КонтактныеЛицаПартнеров"));
	//ОписаниеТипов = Новый ОписаниеТипов(Массив);
	//Оповещение 	= Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, ПараметрыВыбора);
	//ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Укажите Контактное лицо", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьКонтактныеЛицаПокупателя(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	ЗначениеОтбора 		= Новый Структура("Владелец", ТекДанные.Покупатель);
	ПараметрыВыбора  	= Новый Структура("Отбор,ИмяСобытия,ЗаявкаПокупателя,КодСтроки,Поставщик,Номенклатура,НоменклатураПоставщика",ЗначениеОтбора,"ИзменитьКонтактныеЛицаПокупатель",ТекДанные.ЗаявкаПокупателя,ТекДанные.КодСтроки,ТекДанные.Покупатель,ТекДанные.Номенклатура,ТекДанные.НоменклатураПоставщика);
	Оповещение 			= Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, ПараметрыВыбора);
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора",ПараметрыВыбора,ЭтаФорма,,,,Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаОЛИЗ

&НаКлиенте
Процедура ЗаполнитьВыборАМ()
	
	ВыборАМ = 0;
	Для Каждого НомСтр Из Элементы.ТаблицаОЛИЗ.ВыделенныеСтроки Цикл
		ДанныеСтроки 	= Элементы.ТаблицаОЛИЗ.ДанныеСтроки(НомСтр);
		ВыборАМ = ВыборАМ + ДанныеСтроки.АМ; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСпискаТаблицаОЛИЗ()
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТаблицаОЛИЗ");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВыборАМ();
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОЛИЗВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаОЛИЗСрокПоставщика" Тогда
		КомандаИзменитьСрокПоставщика("");
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаОЛИЗКомментарийОЛИЗ" Тогда
		КомандаИзменитьКомментарийОЛИЗ("");	
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаОЛИЗКомментарийОС" Тогда
		КомандаИзменитьКомментарийОС("");
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаОЛИЗКонтактныеЛицаПоставщика" Тогда
		КомандаИзменитьКонтактныеЛицаПоставщика("");
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаОЛИЗКонтактныеЛицаПокупателя" Тогда
		//КомандаИзменитьКонтактныеЛицаПокупателя("");
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТаблицаОЛИЗНомерЗаявки" Тогда
		ДанныеСтроки 	= Элементы.ТаблицаОЛИЗ.ДанныеСтроки(ВыбраннаяСтрока);
		ОткрытьФорму("Документ.ЖБИ_ЗаявкиПокупателей.Форма.ФормаДокумента",
			Новый Структура("Ключ",ДанныеСтроки.ЗаявкаПокупателя),
			ЭтаФорма,,,,
			Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ОткрытьЗаявкиПокупателей"));	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОЛИЗПриАктивизацииСтроки(Элемент)	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСпискаТаблицаОЛИЗ", 0.2, Истина);	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаКлиенте
Процедура УстановитьПараметрыДинамическогоСписка()
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()

	ИмяОперации = ПолучитьИмяОперации();
	ОбновитьЭлементыФормыИнформацию();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ЭтаФорма.Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты() Цикл
			Если ЭтаФорма.Параметры.Свойство(Реквизит.Имя) Тогда
				ЭтаФорма[Реквизит.Имя] = ЭтаФорма.Параметры[Реквизит.Имя];
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		Возврат;
	КонецЕсли;
	
	ЖБИ_ОбщийМодульКлиентСервер.УстановитьКнопкиПечатиСервер(ПолучитьСписокПечатныхФорм(),ЭтаФорма);
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	УстановитьДоступностьЭлементовФормы();
	Элементы.СтраницыОсновнаяФорма.ТекущаяСтраница = Элементы.СтраницаЛогист;
	ИмяОперации = ПолучитьИмяОперации();
	
	УстановитьПараметрыДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатВыполнения = Новый Структура("СообщениеОбОшибке","");	
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		Если ДополнительныеПараметры.Свойство("ИмяСобытия") Тогда
			Если ДополнительныеПараметры.ИмяСобытия = "СоздатьЗаявкуПоставщику" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				ТекДанные = ДополнительныеПараметры.ТекДанные;
				СоздатьЗаявкуПоставщику(ТекДанные);	
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВводСрокПоставщика" Тогда 			
				Если Результат = Неопределено 
					ИЛИ Не ЗначениеЗаполнено(Результат) Тогда 
					Возврат;
				КонецЕсли;
				СообщениеОбОшибки = "";
				ЗаказПоставщику = ДополнительныеПараметры.ЗаказПоставщику;
				РезультатЗаписи = ЗаполнитьСрокПоставщикаСервер(ЗаказПоставщику,Результат,СообщениеОбОшибки);
				Если НЕ РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;
				Элементы.ТаблицаОЛИЗ.Обновить();
			ИначеЕсли  ДополнительныеПараметры.ИмяСобытия = "ИзменитьКомментарийОЛИЗ" Тогда 
				Если Результат = Неопределено 
					ИЛИ ПустаяСтрока(Результат) Тогда 
					Возврат;
				КонецЕсли;
				СообщениеОбОшибки = "";
				РезультатЗаписи = ИзменитьКомментарийОЛИЗСервер(Результат,ДополнительныеПараметры,СообщениеОбОшибки);
				Если НЕ РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;				
				Элементы.ТаблицаОЛИЗ.Обновить()	
			ИначеЕсли  ДополнительныеПараметры.ИмяСобытия = "ИзменитьКомментарийОС" Тогда 
				Если Результат = Неопределено 
					ИЛИ ПустаяСтрока(Результат) Тогда 
					Возврат;
				КонецЕсли;
				СообщениеОбОшибки = "";
				РезультатЗаписи = ИзменитьКомментарийОССервер(Результат,ДополнительныеПараметры,СообщениеОбОшибки);
				Если НЕ РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;				
				Элементы.ТаблицаОЛИЗ.Обновить();
			ИначеЕсли  ДополнительныеПараметры.ИмяСобытия = "ИзменитьКонтактныеЛицаПоставщик" Тогда 
				Если Результат = Неопределено 
					ИЛИ ПустаяСтрока(Результат) Тогда 
					Возврат;
				КонецЕсли;
				СообщениеОбОшибки = "";
				РезультатЗаписи = ИзменитьКонтактныеЛицаПоставщикСервер(Результат,ДополнительныеПараметры,СообщениеОбОшибки);
				Если НЕ РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;				
				Элементы.ТаблицаОЛИЗ.Обновить();
			ИначеЕсли  ДополнительныеПараметры.ИмяСобытия = "ИзменитьКонтактныеЛицаПокупатель" Тогда 
				Если Результат = Неопределено 
					ИЛИ ПустаяСтрока(Результат) Тогда 
					Возврат;
				КонецЕсли;
				СообщениеОбОшибки = "";
				РезультатЗаписи = ИзменитьКонтактныеЛицаПокупательСервер(Результат,ДополнительныеПараметры,СообщениеОбОшибки);
				Если НЕ РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;				
				Элементы.ТаблицаОЛИЗ.Обновить();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаПоставитьНаПаузу" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				СообщениеОбОшибки = "";
				РезультатЗаписи = ПоставитьНаПаузу(ДополнительныеПараметры,СообщениеОбОшибки);
				Если НЕ РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;				
				Элементы.ТаблицаОЛИЗ.Обновить();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаСнятьСПаузы" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				СообщениеОбОшибки = "";
				РезультатЗаписи = СнятьСПаузы(ДополнительныеПараметры,СообщениеОбОшибки);
				Если НЕ РезультатЗаписи Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;				
				Элементы.ТаблицаОЛИЗ.Обновить();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаОтгрузить" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				СообщениеОбОшибки = "";
				ОтгрузитьВыбранныйТовар(СообщениеОбОшибки);
				Если Не ПустаяСтрока(СообщениеОбОшибки) Тогда 
					ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
				КонецЕсли;				
				Элементы.ТаблицаОЛИЗ.Обновить();					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ОткрытьЗаявкуПставщику" Тогда
		Элементы.ТаблицаОЛИЗ.Обновить();	
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти