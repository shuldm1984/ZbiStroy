

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

&НаСервере
Процедура ОграничитьСортировкуДинСписка()
	
	Поля = Новый Массив;
	Поля.Добавить("ИнфСтатус");
	Поля.Добавить("Сегмент");
	//Поля.Добавить("Статус");
	//Поля.Добавить("ПоследнийИсполнитель"); 
	Поля.Добавить("Наименование");
	Поля.Добавить("ИНН");
	//Поля.Добавить("БизнесРегион"); 
	Поля.Добавить("Телефон");
	Поля.Добавить("Почта"); 
	Поля.Добавить("Сайт");
	Поля.Добавить("Комментарий"); 
	Список.УстановитьОграниченияИспользованияВГруппировке(Поля);
	Список.УстановитьОграниченияИспользованияВОтборе(Поля);
	Список.УстановитьОграниченияИспользованияВПорядке(Поля);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПоследнегоИсполнителя(Партнер, ТекущийПользователь)
	
	Если ЗначениеЗаполнено(Партнер.ОсновнойМенеджер) Тогда 
		Возврат;
	КонецЕсли;
	
	СпрОбъект 						= Партнер.ПолучитьОбъект();
	СпрОбъект.ОсновнойМенеджер 		= ТекущийПользователь;
	СпрОбъект.ОбменДанными.Загрузка = Истина;
	СпрОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура СписокГруппаДоступаУстановитьПараметрыДинамическогоСписка()
	
	Профиль = ЖБИ_ОбщийМодульСервер.ПолучитьПрофильПользователяГруппа(ТекущийПользователь);
	Если Профиль = Справочники.ПрофилиГруппДоступа.ЗакупкиИЗапасы Тогда
		ЭтаФорма.Заголовок = "CRM - Логисты";
	ИначеЕсли Профиль = Справочники.ПрофилиГруппДоступа.Продажи Тогда 
		ЭтаФорма.Заголовок = "CRM - Сбыт";
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"ОтборПрофиль",Профиль);	
		
КонецПроцедуры

#Область ПолнотекстовыйПоиск

&НаСервереБезКонтекста
Процедура НазначитьОсновноеКонтактноеЛицо(СтруктураПараметров)
	
	Владелец 				= СтруктураПараметров.Владелец;
	СсылкаКонтактноеЛицо 	= СтруктураПараметров.СсылкаКонтактноеЛицо;
	
	Если СсылкаКонтактноеЛицо.ЖБИ_Главный Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",Владелец);
	Запрос.Текст = "ВЫБРАТЬ 
					|	КонтактныеЛица.Ссылка
					|ИЗ
					|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛица 
					|ГДЕ
					|	КонтактныеЛица.Владелец = &Владелец";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	КоличествоКЛ = РезультатЗапроса.Количество();
	Если КоличествоКЛ>1 Тогда 
		Пока РезультатЗапроса.Следующий() Цикл
			Если РезультатЗапроса.Ссылка = СсылкаКонтактноеЛицо Тогда 
				Продолжить;
			КонецЕсли;
			ЭлементОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
			ЭлементОбъект.ЖБИ_Главный = Ложь;
			ЭлементОбъект.ОбменДанными.Загрузка = Истина;
			ЭлементОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Если Не СсылкаКонтактноеЛицо.ЖБИ_Главный Тогда 
		КонтактноеЛицоОбъект = СсылкаКонтактноеЛицо.ПолучитьОбъект();
		КонтактноеЛицоОбъект.ЖБИ_Главный = Истина;
		КонтактноеЛицоОбъект.ОбменДанными.Загрузка = Истина;
		КонтактноеЛицоОбъект.Записать();
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьПартнераНаУдаление(СтруктураПараметров)
	
	ПартнерСсылка = СтруктураПараметров.Партнер;
	ПартнерОбъект = ПартнерСсылка.ПолучитьОбъект();
	ПартнерОбъект.ПометкаУдаления = Истина;
	ПартнерОбъект.ОбменДанными.Загрузка = Истина;
	ПартнерОбъект.Записать();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуОснования()
	
	Основание = Основания.НайтиСтроки(Новый Структура("Партнер", Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() = 0 Тогда
		ОснованиеВыбора = "";
	Иначе
		ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиПартнеровПолнотекстовыйПоиск()

	Возврат ПартнерыИКонтрагенты.НайтиПартнеровПолнотекстовыйПоиск(ЭтаФорма)

КонецФункции

&НаСервере
Процедура ОбновитьИндексПолнотекстовогоПоискаСервер()
	
	ПартнерыИКонтрагенты.ОбновитьИндексПолнотекстовогоПоиска();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПолнотекстовыйПоиск()
	
	ТекстОшибки = НайтиПартнеровПолнотекстовыйПоиск();
	Если ТекстОшибки = Неопределено Тогда
		РасширенныйПоиск = Истина;
		ЗаполнитьСтрокуОснования();
	Иначе
		Если НЕ ТекстОшибки = НСтр("ru = 'Ничего не найдено'") Тогда
			ПоказатьОповещениеПользователя(ТекстОшибки);
		Иначе
			ПартнерыИКонтрагентыКлиент.ВосстановитьОтображениеСпискаПослеПолнотекстовогоПоиска(ЭтаФорма);
			РасширенныйПоиск = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИндексПолнотекстовогоПоиска()
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска...'"));
	ОбновитьИндексПолнотекстовогоПоискаСервер();
	ИндексПолнотекстовогоПоискаАктуален = Истина;
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено...'"));
	ВыполнитьПолнотекстовыйПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексПолнотекстовогоПоиска(Знач Оповещение)
	
	Если Не ИндексПолнотекстовогоПоискаАктуален И ИнформационнаяБазаФайловая Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьИндексПолнотекстовогоПоискаЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), 
			НСтр("ru='Индекс полнотекстового поиска неактуален. Обновить индекс?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ПроверитьИндексПолнотекстовогоПоискаФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексПолнотекстовогоПоискаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    Результат = РезультатВопроса; 
    
    Если Результат = КодВозвратаДиалога.Да Тогда
        ПодключитьОбработчикОжидания("ОбновитьИндексПолнотекстовогоПоиска",0.2,Истина);
        ВыполнитьОбработкуОповещения(Оповещение);
        Возврат;
    КонецЕсли;
    
    
    ПроверитьИндексПолнотекстовогоПоискаФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИндексПолнотекстовогоПоискаФрагмент(Знач Оповещение)
    
    ВыполнитьПолнотекстовыйПоиск();
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск(Знач Оповещение)
	
	Если СтрокаПоиска <> "" Тогда
		
		ПроверитьИндексПолнотекстовогоПоиска(Новый ОписаниеОповещения("ВыполнитьПоискЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)));
        Возврат;
		
	Иначе
		ПартнерыИКонтрагентыКлиент.ВосстановитьОтображениеСпискаПослеПолнотекстовогоПоиска(ЭтаФорма);
		РасширенныйПоиск = Ложь;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		                                                                   "ОтборПоПолнотекстовомуПоискуУстановлен",
		                                                                   Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		                                                                   "ОтборПоПолнотекстовомуПоиску",
		                                                                   Неопределено);
		ОснованиеВыбора = "";
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ЭтаФорма.ТекущийЭлемент = ?(НЕ РасширенныйПоиск, Элементы.СтрокаПоиска, Элементы.Список);
    
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура УстановитьОтборДинСпискаПоПартнеру(ПартнерСсылка)	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "СсылкаПартнер", ПартнерСсылка, , , );	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент,ИмяОтбора,ВидСравнения)
	
	Если ЗначениеЗаполнено(ЭтотОбъект[Элемент.Имя]) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, ИмяОтбора, ЭтотОбъект[Элемент.Имя], ВидСравнения, , );
	Иначе 
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(Список,ИмяОтбора);	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинСпискаПоСегменту(СписокСегмент, ИмяОтбора, ВидСравнения)	
	ЖБИ_ОбщийМодульОтчетыИОбработки.УстановитьОтборДинСпискаПоСегменту(СписокСегмент,Список,ИмяОтбора,ВидСравнения);	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыДинамическогоСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	"ОтборПоПолнотекстовомуПоискуУстановлен",
	Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	"ОтборПоПолнотекстовомуПоиску",
	Неопределено);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
	"ТекущаяДатаСеанса",
	ТекущаяДата());
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокКонтактныеЛицаПартнеров,
	"Партнер",
	ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВзаимодействие,
	"Партнер",
	ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказыКлиентов,
	"Партнер",
	ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяОперации()
	
	ИмяОперации = "";
	ИмяСтраницы = Элементы.СтраницыОсновнаяФорма.ТекущаяСтраница.Имя;	
	Если ИмяСтраницы = "СтраницаCRMКонтрагенты" Тогда
		ИмяОперации = "СтраницаCRMКонтрагенты";
		Элементы.КомандаКонтрагенты.Пометка = Истина;
	КонецЕсли;
	
	Возврат ИмяОперации;
	
КонецФункции

#КонецОбласти

#Область Список

&НаКлиенте
Процедура ЗаполнитьКонтактныеЛицаПартнера(Партнер) Экспорт
		
	ТекущийАктивныйПартнер = Партнер;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокКонтактныеЛицаПартнеров,
	"Партнер",
	Партнер);

КонецПроцедуры

Процедура ЗаполнитьВзамодействияПартнера(Партнер) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокВзаимодействие,
	"Партнер",
	Партнер);

КонецПроцедуры

Процедура ЗаполнитьЗаказыКлиента(Партнер) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗаказыКлиентов,
	"Партнер",
	Партнер);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиСписка()
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущийАктивныйПартнер <> ТекДанные.СсылкаПартнер Тогда
		ЗаполнитьКонтактныеЛицаПартнера(ТекДанные.СсылкаПартнер);
		ЗаполнитьВзамодействияПартнера(ТекДанные.СсылкаПартнер);
		ЗаполнитьЗаказыКлиента(ТекДанные.СсылкаПартнер)
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюСтрокиСписка", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;	
	Если Поле.Имя = "Сайт" Тогда
		Если ПустаяСтрока(ТекДанные.Сайт) Тогда 
			Возврат;
		КонецЕсли;		
		Текст = "Открыть сайт: "+ТекДанные.Сайт+"?";
		СтруктураСобытия 	= Новый Структура("ИмяСобытия, Сайт","КомандаСайтНажатие",ТекДанные.Сайт);
		ОписаниеОповещения 	= Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
		ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);	
	Иначе 	
		ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлемента",
		Новый Структура("Ключ",ТекДанные.СсылкаПартнер),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеПартнера"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СписокКонтактныеЛицаПартнеров

&НаКлиенте
Процедура СписокКонтактныеЛицаПартнеровПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область СписокВзаимодействие

&НаКлиенте
Процедура СписокВзаимодействиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"СписокВзаимодействие");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КлючЗаписи = ПолучитьКлючЗаписиВзаимодействия(ТекДанные);
	
	ОткрытьФорму("РегистрСведений.ЖБИ_ВзаимодействиеСПартнером.Форма.ФормаЗаписи",
	Новый Структура("Ключ",КлючЗаписи),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированияВзаимодействия"));	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВзаимодействиеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область СписокЗаказыКлиентов

&НаКлиенте
Процедура СписокЗаказыКлиентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"СписокЗаказыКлиентов");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Документ.ЖБИ_ЗаявкиПокупателей.Форма.ФормаДокумента",
	Новый Структура("Ключ",ТекДанные.Ссылка),
	ЭтаФорма,,,,);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказыКлиентовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказыКлиентовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти


#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_ЭЛЕМЕНТОВ_УПРАВЛЕНИЯ_ФОРМЫ

#Область Команды

&НаКлиенте
Процедура КомандаНайтиПП(Команда)
	
	ВыполнитьПоиск(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьПартнера(Команда)
	
	СтруктураОтборов = Новый Структура();
	ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового",
	СтруктураОтборов,
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаСозданияПартнера"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьПартнера(Команда)	
		
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлемента",
	Новый Структура("Ключ",ТекДанные.СсылкаПартнер),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеПартнера"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьКонтактноеЛицоПартнера(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.Форма.ФормаЭлемента",
	Новый Структура("ЗначенияЗаполнения",Новый Структура("Владелец", ТекДанные.СсылкаПартнер)),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаСозданияКонтактногоЛица"));	
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьКонтактноеЛицоПартнера(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"СписокКонтактныеЛицаПартнеров");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.Форма.ФормаЭлемента",
	Новый Структура("Ключ",ТекДанные.СсылкаКонтактноеЛицо),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеКонтактногоЛица"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазначитьГлавным(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"СписокКонтактныеЛицаПартнеров");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураПраметров = Новый Структура("Владелец,СсылкаКонтактноеЛицо",ТекДанные.Владелец,ТекДанные.СсылкаКонтактноеЛицо);
	СтруктураСобытия = Новый Структура("ИмяСобытия, ДопПараметры","КомандаОсновноеКонтактноеЛицо",СтруктураПраметров);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьВзаимодействие(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Партнер", ТекДанные.СсылкаПартнер);
	ЗначенияЗаполнения.Вставить("Исполнитель", ТекущийПользователь);
	
	ОткрытьФорму("РегистрСведений.ЖБИ_ВзаимодействиеСПартнером.Форма.ФормаЗаписи",
	Новый Структура("ЗначенияЗаполнения",ЗначенияЗаполнения),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаСозданияВзаимодействия"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьВзаимодействие(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"СписокВзаимодействие");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КлючЗаписи = ПолучитьКлючЗаписиВзаимодействия(ТекДанные);
	
	ОткрытьФорму("РегистрСведений.ЖБИ_ВзаимодействиеСПартнером.Форма.ФормаЗаписи",
	Новый Структура("Ключ",КлючЗаписи),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированияВзаимодействия"));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючЗаписиВзаимодействия(ТекСтрока)
	
	Ключ = Новый Структура;
    Ключ.Вставить("Период", ТекСтрока.Период);
    Ключ.Вставить("Партнер", ТекСтрока.Партнер);
    КлючЗаписи = РегистрыСведений.ЖБИ_ВзаимодействиеСПартнером.СоздатьКлючЗаписи(Ключ);
    Возврат КлючЗаписи;
	
КонецФункции

&НаСервере
Функция ПолучитьКлючиЗаписиСтатусАктивностиКлиента(ТекСтрока, ОткрытьНовый = Ложь)
	
	Ключ = Новый Структура;
    Ключ.Вставить("Партнер", ТекСтрока.СсылкаПартнер);
    КлючЗаписи = РегистрыСведений.ЖБИ_СтатусАктивностиКлиента.СоздатьКлючЗаписи(Ключ);
	
	РегСведАктивностиКлиента = РегистрыСведений.ЖБИ_СтатусАктивностиКлиента.СоздатьМенеджерЗаписи();
	РегСведАктивностиКлиента.Партнер = ТекСтрока.СсылкаПартнер;
	РегСведАктивностиКлиента.Прочитать();
	Если РегСведАктивностиКлиента.Выбран() Тогда 
		ОткрытьНовый = Ложь;
	Иначе 
		ОткрытьНовый = Истина;
	КонецЕсли;
	
    Возврат КлючЗаписи;
	
КонецФункции

&НаКлиенте
Процедура КомандаУстановитьСтатусАктивностиКлиента(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьНовый = Ложь;
	КлючЗаписи = ПолучитьКлючиЗаписиСтатусАктивностиКлиента(ТекДанные,ОткрытьНовый);
	
	Если ОткрытьНовый Тогда 
		ОткрытьФорму("РегистрСведений.ЖБИ_СтатусАктивностиКлиента.Форма.ФормаЗаписи",
		Новый Структура("Партнер,СтатусКонтрагента,Автор",ТекДанные.СсылкаПартнер,ТекДанные.Статус,ТекущийПользователь),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ВводАктивностиКлиента"));
	Иначе
		ОткрытьФорму("РегистрСведений.ЖБИ_СтатусАктивностиКлиента.Форма.ФормаЗаписи",
		Новый Структура("Ключ",КлючЗаписи),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ВводАктивностиКлиента"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНеИспользуется(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Удалить карточку клиента: "+ТекДанные.СсылкаПартнер+"?";
	СтруктураПраметров = Новый Структура("Партнер",ТекДанные.СсылкаПартнер);
	СтруктураСобытия = Новый Структура("ИмяСобытия, ДопПараметры","КомандаНеИспользуется",СтруктураПраметров);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьЗаказКлиента(Команда)

	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЭтоПоставщик = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.СсылкаПартнер,"Поставщик");
	Если ЭтоПоставщик Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Нельзя создать Заказ клиента по поставщику: "+ТекДанные.СсылкаПартнер);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ТекДанные.СсылкаПартнер);
	ОткрытьФорму("Документ.ЖБИ_ЗаявкиПокупателей.ФормаОбъекта", ПараметрыФормы);	
	
КонецПроцедуры

#КонецОбласти

#Область Отборы

&НаКлиенте
Процедура ОтборДатаСледующегоКонтактаПриИзменении(Элемент)	
	УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент, "ДатаСледующегоКонтакта",Неопределено);	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)	
	ВыполнитьПоиск(Неопределено);	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)	
	СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)	
	УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент, "Статус",Неопределено);	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОсновнойМенеджерПриИзменении(Элемент)	
	УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент, "ПоследнийИсполнитель",Неопределено);	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентНаименованиеПриИзменении(Элемент)	
	УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент, "Наименование",ВидСравненияКомпоновкиДанных.Содержит);	
КонецПроцедуры

&НаКлиенте
Процедура ОтборБизнесРегионПриИзменении(Элемент)	
	УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент, "БизнесРегион",Неопределено);	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПартнерПриИзменении(Элемент)	
	УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент, "СсылкаПартнер",Неопределено);		
КонецПроцедуры

&НаКлиенте
Процедура ОтборСегментПриИзменении(Элемент)
	УстановитьОтборДинСпискаПоСегменту(ЭтотОбъект[Элемент.Имя], "СсылкаПартнер", ВидСравненияКомпоновкиДанных.ВСписке);	
КонецПроцедуры

&НаКлиенте
Процедура ОтборИННПриИзменении(Элемент)
	
	УстановитьОтборДинамическогоСпискаПоЭлементу(Элемент, "ИНН",ВидСравненияКомпоновкиДанных.Содержит);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()	
	Элементы.СписокКомандаУстановитьСтатусАктивностиКлиента.Доступность = ЖБИ_ОбщийМодульДокументыСервер.ОпределитьДоступностьРоли("ЖБИ_ОсновнаяРоль")
																		ИЛИ ЖБИ_ОбщийМодульДокументыСервер.ОпределитьДоступностьРоли("ЖБИ_НачальникОтделаСбыта");		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ЭтаФорма.Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты() Цикл
			Если ЭтаФорма.Параметры.Свойство(Реквизит.Имя) Тогда
				ЭтаФорма[Реквизит.Имя] = ЭтаФорма.Параметры[Реквизит.Имя];
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(ЭтаФорма,"ИспользоватьПолнотекстовыйПоиск");		
	СписокГруппаДоступаУстановитьПараметрыДинамическогоСписка();
	
	Список.ОсновнаяТаблица = Метаданные.Справочники.Партнеры;
	
	ОграничитьСортировкуДинСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	УстановитьДоступностьЭлементовФормы();
	Элементы.СтраницыОсновнаяФорма.ТекущаяСтраница = Элементы.СтраницаCRMКонтрагенты;
	ИмяОперации = ПолучитьИмяОперации();
	
	УстановитьПараметрыДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Партнеры" Тогда				
		ЭтаФорма.Элементы.Список.ТекущаяСтрока = Параметр;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатВыполнения = Новый Структура("СообщениеОбОшибке","");	
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		Если ДополнительныеПараметры.Свойство("ИмяСобытия")
			И ЗначениеЗаполнено(ДополнительныеПараметры.ИмяСобытия) Тогда
			Если ДополнительныеПараметры.ИмяСобытия = "КомандаОсновноеКонтактноеЛицо" Тогда 
				ДопПараметры = ДополнительныеПараметры.ДопПараметры;
				НазначитьОсновноеКонтактноеЛицо(ДопПараметры);
				Элементы.СписокКонтактныеЛицаПартнеров.Обновить();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаНеИспользуется" Тогда			
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				ДопПараметры = ДополнительныеПараметры.ДопПараметры;
				ПометитьПартнераНаУдаление(ДопПараметры);
				Элементы.Список.Обновить();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаСайтНажатие" Тогда			
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				Сайт = ДополнительныеПараметры.Сайт;
				УправлениеКонтактнойИнформациейКлиент.ПерейтиПоВебСсылке(,Сайт);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Если ДополнительныеПараметры = "ФормаСозданияПартнера" Тогда //создание партнера		
		Элементы.Список.Обновить();		
		Если Результат<>Неопределено Тогда 
			ОтборПартнер = Результат;
			УстановитьОтборДинСпискаПоПартнеру(ОтборПартнер);
		КонецЕсли;
	ИначеЕсли  ДополнительныеПараметры = "ФормаРедактированиеПартнера" Тогда //редактирвоание партнера 
		Элементы.Список.Обновить();
	ИначеЕсли  ДополнительныеПараметры = "ФормаСозданияКонтактногоЛица" Тогда //создание контактного лица 
		Элементы.СписокКонтактныеЛицаПартнеров.Обновить();
	ИначеЕсли  ДополнительныеПараметры = "ФормаРедактированиеКонтактногоЛица" Тогда //редактирвоание контактного лица 
		Элементы.СписокКонтактныеЛицаПартнеров.Обновить();
	ИначеЕсли ДополнительныеПараметры = "ФормаСозданияВзаимодействия" Тогда //создание взаимодействия
		ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Список");
		Если ТекДанные <> Неопределено Тогда 
			ЗаполнитьПоследнегоИсполнителя(ТекДанные.СсылкаПартнер, ТекущийПользователь);
		КонецЕсли;		
		Элементы.СписокВзаимодействие.Обновить();
		Элементы.Список.Обновить();
	ИначеЕсли ДополнительныеПараметры = "ФормаРедактированияВзаимодействия" Тогда //редактирвоание взаимодействия
		Элементы.СписокВзаимодействие.Обновить();
		//Элементы.Список.Обновить();
	ИначеЕсли ДополнительныеПараметры = "ВводАктивностиКлиента" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти