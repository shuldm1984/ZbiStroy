
#Область СлужебныйПрограммныйИнтерфейс

// Обрабатывает текст HTML для помещения в форматированный документ.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка.
//  ТекстHTML - Строка - обрабатываемый текст HTML.
//  СтруктураВложений - Структура - структура в которую помещаются картинки - вложения письма.
//
// Возвращаемое значение:
//   Число   - оценка размера письма в байтах.
//
Функция ОбработатьТекстHTMLДляФорматированногоДокумента(Письмо,ТекстHTML,СтруктураВложений) Экспорт
	
	Если Не ПустаяСтрока(ТекстHTML) Тогда
		
		ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
		
		ТаблицаФайлов = ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		
		Если ТаблицаФайлов.Количество() Тогда
			
			Для каждого ПрисоединенныйФайл Из ТаблицаФайлов Цикл
				
				Для каждого Картинка Из ДокументHTML.Картинки Цикл
					
					АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
					
					Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.ИДФайлаЭлектронногоПисьма) > 0 Тогда
						
						НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
						НовыйАтрибутКартинки.ТекстовоеСодержимое = ПрисоединенныйФайл.Наименование;
						Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
						
						СтруктураВложений.Вставить(
							ПрисоединенныйФайл.Наименование,
							Новый Картинка(ПолучитьИзВременногоХранилища(
								РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла)));
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Возврат Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		Иначе
			
			Возврат ТекстHTML;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ТекстHTML;
		
	КонецЕсли;
	
КонецФункции

// Позволяет переопределить владельца присоединенных файлов для письма.
// Такая необходимость может возникнуть, например, при массовых рассылках, когда имеет смысл 
// хранить одни и те же присоединенные файлы в одном месте, а не тиражировать их на все письма рассылки.
//
// Параметры:
//  Письмо - ДокументСсылка.ЭлектронноеПисьмоВходящее, ДокументСсылка.ЭлектронноеПисьмоИсходящее - электронное письмо, 
//           для которого необходимо получить вложения.
//  ПрисоединенныеФайлы - Структура - задать сведения о файлах, присоединенных к письму:
//    * ВладелецФайлов                     - ОпределяемыйТип.ПрисоединенныйФайл - владелец присоединенных файлов.
//    * ИмяСправочникаПрисоединенныхФайлов - Строка - имя объекта метаданных присоединенных файлов.
//
Процедура ПриПолученииПрисоединенныхФайлов(Письмо, ПрисоединенныеФайлы) Экспорт

	
КонецПроцедуры

// Получает имя объекта метаданных присоединенных файлов электронного письма.
//
// Параметры:
//  Письмо  - ДокументСсылка - письмо для которого определяется имя.
//
// Возвращаемое значение:
//  Строка,Неопределено  - имя объекта метаданных присоединенных файлов электронного письма.
Функция ИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(Письмо) Экспорт

	 Если ТипЗнч(Письмо) = Тип("СправочникСсылка.ЖБИ_ЭлектронныеПодписиПользователей") Тогда		
		Возврат "ЖБИ_ЭлектронныеПодписиПользователейПрисоединенныеФайлы";		
	Иначе		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции

Функция ДанныеПрисоединенныхФайловПисьма(ПисьмоСсылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВладелецФайлов", ПисьмоСсылка);
	Результат.Вставить("ИмяСправочникаПрисоединенныхФайлов", ИмяОбъектаМетаданныхПрисоединенныхФайловПисьма(ПисьмоСсылка));
	
	Возврат Результат;
	
КонецФункции

// Получает вложения письма с непустым ИД.
//
// Параметры:
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее - 
//          - ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка.
//
// Возвращаемое значение:
//   ТаблицаЗначений - ТаблицаЗначений - таблица с колонками:
//     * Ссылка                    - СправочникСсылка.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы -
//                                 - СправочникСсылка.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы - 
//                                   ссылка на присоединенный файл.
//     * Наименование              - Строка - Имя файла.
//     * Размер                    - Число - Размер файла.
//     * ИДФайлаЭлектронногоПисьма - Строка - идентификатор картинки, которая отображается в тексте письма.
//
Функция ПолучитьВложенияПисьмаСНеПустымИД(Письмо) Экспорт
	
	ДанныеПрисоединенныхФайловПисьма = ДанныеПрисоединенныхФайловПисьма(Письмо);
	ИмяОбъектаМетаданных = ДанныеПрисоединенныхФайловПисьма.ИмяСправочникаПрисоединенныхФайлов;
	ВладелецФайлов       = ДанныеПрисоединенныхФайловПисьма.ВладелецФайлов;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПрисоединенныеФайлыПисьма.Ссылка,
	|	ПрисоединенныеФайлыПисьма.Наименование,
	|	ПрисоединенныеФайлыПисьма.Размер,
	|	ПрисоединенныеФайлыПисьма.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник." + ИмяОбъектаМетаданных + " КАК ПрисоединенныеФайлыПисьма
	|ГДЕ
	|	ПрисоединенныеФайлыПисьма.ВладелецФайла = &ВладелецФайлов
	|	И (НЕ ПрисоединенныеФайлыПисьма.ПометкаУдаления)
	|	И ПрисоединенныеФайлыПисьма.ИДФайлаЭлектронногоПисьма <> &ПустаяСтрока";
	
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	Запрос.УстановитьПараметр("ВладелецФайлов",ВладелецФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти