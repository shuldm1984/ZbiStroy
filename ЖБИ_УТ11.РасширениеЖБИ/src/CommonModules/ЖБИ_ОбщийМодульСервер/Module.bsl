
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

Функция ПолучитьПрофильПользователяГруппа(ТекущийПользователь) Экспорт
	
	Профиль = Справочники.ПрофилиГруппДоступа.ПустаяСсылка();
	Запрос  = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
				|	ГруппыДоступа.Ссылка КАК Ссылка,
				|	ГруппыДоступа.Ссылка.Профиль КАК Профиль
				|ИЗ
				|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступа
				|ГДЕ
				|	ГруппыДоступа.Пользователь = &Пользователь";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Профиль = РезультатЗапроса.Профиль.Родитель;		
	КонецЕсли;
	
	Возврат Профиль;
	
КонецФункции

Функция ПолучитьПрофильПользователя(ТекущийПользователь) Экспорт
	
	Профиль = Справочники.ПрофилиГруппДоступа.ПустаяСсылка();
	Запрос  = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
				|	ГруппыДоступа.Ссылка КАК Ссылка,
				|	ГруппыДоступа.Ссылка.Профиль КАК Профиль
				|ИЗ
				|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступа
				|ГДЕ
				|	ГруппыДоступа.Пользователь = &Пользователь";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Профиль = РезультатЗапроса.Профиль;		
	КонецЕсли;
	
	Возврат Профиль;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

Процедура УдалитьОтветственногоМенеджераCRM() Экспорт
	
	НачалоПериода 		= ДобавитьМесяц(ТекущаяДатаСеанса(), -12);
	ДатаНачалаРаботы 	= Дата("20220101");
	
	
	//1 заполняем таблицу данными: первый контакт, последний контакт по менеджерам
	Запрос 							= Новый Запрос;
	Запрос.МенеджерВременныхТаблиц 	= Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ДатаНачалаРаботы", ДатаНачалаРаботы); //начали работать с начала года 2022
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖБИ_ВзаимодействиеСПартнером.Исполнитель КАК Менеджер,
	               |	ЖБИ_ВзаимодействиеСПартнером.Партнер КАК Партнер,
	               |	МАКСИМУМ(ЖБИ_ВзаимодействиеСПартнером.Период) КАК ДатаПервогоКонтактаКомментария,
	               |	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаПоследнегоКонтакта,
	               |	ЖБИ_ВзаимодействиеСПартнером.Важность КАК Важность
	               |ПОМЕСТИТЬ ТаблПоследнийКомментарий
	               |ИЗ
	               |	РегистрСведений.ЖБИ_ВзаимодействиеСПартнером КАК ЖБИ_ВзаимодействиеСПартнером
	               |ГДЕ
	               |	НЕ ЖБИ_ВзаимодействиеСПартнером.Партнер.ПометкаУдаления
	               |	И НЕ ЖБИ_ВзаимодействиеСПартнером.НеИспользуется
	               |	И ЖБИ_ВзаимодействиеСПартнером.Период >= &ДатаНачалаРаботы
	               |	И ЖБИ_ВзаимодействиеСПартнером.Важность = ЗНАЧЕНИЕ(Перечисление.ЖБИ_Важность.Высокая)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЖБИ_ВзаимодействиеСПартнером.Исполнитель,
	               |	ЖБИ_ВзаимодействиеСПартнером.Партнер,
	               |	ЖБИ_ВзаимодействиеСПартнером.Важность
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ЖБИ_ВзаимодействиеСПартнером.Исполнитель,
	               |	ЖБИ_ВзаимодействиеСПартнером.Партнер,
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	МАКСИМУМ(ЖБИ_ВзаимодействиеСПартнером.Период),
	               |	ЖБИ_ВзаимодействиеСПартнером.Важность
	               |ИЗ
	               |	РегистрСведений.ЖБИ_ВзаимодействиеСПартнером КАК ЖБИ_ВзаимодействиеСПартнером
	               |ГДЕ
	               |	НЕ ЖБИ_ВзаимодействиеСПартнером.Партнер.ПометкаУдаления
	               |	И НЕ ЖБИ_ВзаимодействиеСПартнером.НеИспользуется
	               |	И ЖБИ_ВзаимодействиеСПартнером.Период >= &ДатаНачалаРаботы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЖБИ_ВзаимодействиеСПартнером.Исполнитель,
	               |	ЖБИ_ВзаимодействиеСПартнером.Партнер,
	               |	ЖБИ_ВзаимодействиеСПартнером.Важность
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблПоследнийКомментарий.Менеджер КАК Менеджер,
	               |	ТаблПоследнийКомментарий.Партнер КАК Партнер,
	               |	МАКСИМУМ(ТаблПоследнийКомментарий.ДатаПервогоКонтактаКомментария) КАК ДатаПервогоКонтактаКомментария,
	               |	МАКСИМУМ(ТаблПоследнийКомментарий.ДатаПоследнегоКонтакта) КАК ДатаПоследнегоКонтакта,
	               |	ВЫБОР
	               |		КОГДА ТаблПоследнийКомментарий.Важность = ЗНАЧЕНИЕ(Перечисление.ЖБИ_Важность.ПустаяСсылка)
	               |			ТОГДА 2
	               |		ИНАЧЕ 1
	               |	КОНЕЦ КАК Важность
	               |ИЗ
	               |	ТаблПоследнийКомментарий КАК ТаблПоследнийКомментарий
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблПоследнийКомментарий.Менеджер,
	               |	ТаблПоследнийКомментарий.Партнер,
	               |	ВЫБОР
	               |		КОГДА ТаблПоследнийКомментарий.Важность = ЗНАЧЕНИЕ(Перечисление.ЖБИ_Важность.ПустаяСсылка)
	               |			ТОГДА 2
	               |		ИНАЧЕ 1
	               |	КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ВЫБОР
	               |		КОГДА ТаблПоследнийКомментарий.Важность = ЗНАЧЕНИЕ(Перечисление.ЖБИ_Важность.ПустаяСсылка)
	               |			ТОГДА 2
	               |		ИНАЧЕ 1
	               |	КОНЕЦ,
	               |	ДатаПервогоКонтактаКомментария УБЫВ
	               |ИТОГИ ПО
	               |	Партнер";
	
	ТаблицаДат = Новый ТаблицаЗначений;
	ТаблицаДат.Колонки.Добавить("Менеджер", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаДат.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ТаблицаДат.Колонки.Добавить("ДатаПоследнегоКонтакта", Новый ОписаниеТипов("Дата"));
	ТаблицаДат.Колонки.Добавить("ДатаПервогоКонтактаКомментария", Новый ОписаниеТипов("Дата"));
	ТаблицаДат.Колонки.Добавить("Важность", Новый ОписаниеТипов("Число"));
	
	ВыборкаПартнер = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Партнер");
	Пока ВыборкаПартнер.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПартнер.Партнер) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтр 						= ТаблицаДат.Добавить();
		Менеджер						= Справочники.Пользователи.ПустаяСсылка();
		ДатаПоследнегоКонтакта 			= Дата(1,1,1);  
		ДатаПервогоКонтактаКомментария 	= Дата(1,1,1);
		Первый							= Истина;
		ВыборкаДетали = ВыборкаПартнер.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл 
			Если ВыборкаДетали.Важность = 1
				И Первый Тогда //высокий
				НоваяСтр.Менеджер 						= ВыборкаДетали.Менеджер;
				НоваяСтр.Партнер 						= ВыборкаПартнер.Партнер;
				НоваяСтр.ДатаПоследнегоКонтакта			= ВыборкаДетали.ДатаПоследнегоКонтакта;
				НоваяСтр.ДатаПервогоКонтактаКомментария	= ВыборкаДетали.ДатаПервогоКонтактаКомментария;
				НоваяСтр.Важность						= ВыборкаДетали.Важность;
				
				Менеджер								= ВыборкаДетали.Менеджер;
				ДатаПоследнегоКонтакта					= ВыборкаДетали.ДатаПоследнегоКонтакта;
				
				Если НоваяСтр.ДатаПервогоКонтактаКомментария = Дата(1,1,1) Тогда 
					НоваяСтр.ДатаПервогоКонтактаКомментария = НоваяСтр.ДатаПоследнегоКонтакта;	
				КонецЕсли; 
				
				Первый = Ложь;
				
			ИначеЕсли ВыборкаДетали.Важность = 2
				И Менеджер = ВыборкаДетали.Менеджер
				И ДатаПоследнегоКонтакта <= ВыборкаДетали.ДатаПоследнегоКонтакта Тогда 
				НоваяСтр.ДатаПоследнегоКонтакта			= ВыборкаДетали.ДатаПоследнегоКонтакта;
				
				Менеджер								= ВыборкаДетали.Менеджер;
				ДатаПоследнегоКонтакта					= ВыборкаДетали.ДатаПоследнегоКонтакта;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
	//Удалим пустые строки
	ИндексПоследнего = ТаблицаДат.Количество() - 1;
	Для Индекс = 0 По ИндексПоследнего Цикл
		Если НЕ ЗначениеЗаполнено(ТаблицаДат[ИндексПоследнего - Индекс].Партнер) Тогда  
			ТаблицаДат.Удалить(ИндексПоследнего - Индекс);	
		КонецЕсли;
	КонецЦикла; 
	
	//НачатьТранзакцию();       
	//
	//СписокСвойствОбновления = "Важность";
	//ТаблицаНабораЗаписей = РегистрыСведений.ЖБИ_ВзаимодействиеСПартнером.ПолучитьПустуюТаблицуНаборЗаписей();
	//Для Каждого НомСтр Из ТаблицаДат Цикл
	//	НоваяСтр = ТаблицаНабораЗаписей.Добавить();	
	//	НоваяСтр.Период			= НомСтр.ДатаПервогоКонтактаКомментария;
	//	НоваяСтр.Партнер 		= НомСтр.Партнер;
	//	НоваяСтр.Важность		= Перечисления.ЖБИ_Важность.Высокая;
	//КонецЦикла; 
	//
	//СообщениеОбОшибке = "";
	//Результат = РегистрыСведений.ЖБИ_ВзаимодействиеСПартнером.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,СписокСвойствОбновления,, СообщениеОбОшибке);  
	//
	//ЗафиксироватьТранзакцию();
	
	//НачатьТранзакцию(); 
	//Запрос.Текст = "ВЫБРАТЬ
	//					|	Партнеры.Ссылка КАК Партнер,
	//					|	ЕСТЬNULL(ЖБИ_СтатусАктивностиКлиента.СтатусКонтрагента, ЗНАЧЕНИЕ(Перечисление.ЖБИ_СтатусКонтрагента.ПустаяСсылка)) КАК СтатусКонтрагента
	//					|ПОМЕСТИТЬ ТаблИтоги
	//					|ИЗ
	//					|	Справочник.Контрагенты КАК Контрагенты
	//					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	//					|		ПО (Контрагенты.Партнер = Партнеры.Ссылка)
	//					|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖБИ_СтатусАктивностиКлиента КАК ЖБИ_СтатусАктивностиКлиента
	//					|		ПО (Партнеры.Ссылка = ЖБИ_СтатусАктивностиКлиента.Партнер)
	//					|ГДЕ
	//					|	НЕ Партнеры.ПометкаУдаления
	//					|;

	//					|ВЫБРАТЬ
	//					|	ТаблИтоги.Партнер,
	//					|	ТаблИтоги.СтатусКонтрагента
	//					|ИЗ
	//					|	ТаблИтоги КАК ТаблИтоги
	//					|ГДЕ
	//					|	ТаблИтоги.СтатусКонтрагента	= ЗНАЧЕНИЕ(Перечисление.ЖБИ_СтатусКонтрагента.ПустаяСсылка)";				
	//РезультатЗапроса 		= Запрос.Выполнить().Выгрузить();
	//ТаблицаНабораЗаписей 	= РегистрыСведений.ЖБИ_СтатусАктивностиКлиента.ПолучитьПустуюТаблицуНаборЗаписей();
	//Для Каждого НомСтр Из РезультатЗапроса Цикл
	//	НоваяСтр = ТаблицаНабораЗаписей.Добавить(); 
	//	НоваяСтр.Партнер 			= НомСтр.Партнер;
	//    НоваяСтр.СтатусКонтрагента 	= Перечисления.ЖБИ_СтатусКонтрагента.НеВРаботе;
	//	НоваяСтр.Автор 				= Пользователи.ТекущийПользователь();
	//	НоваяСтр.Комментарий 		= "Автоматическое заполнение статуса Не в работе";
	//КонецЦикла; 
	//
	//СообщениеОбОшибке = "";
	//Результат = РегистрыСведений.ЖБИ_СтатусАктивностиКлиента.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,,СообщениеОбОшибке);  
	//
	//ЗафиксироватьТранзакцию();
	
	//2 заполняем таблицу счетами за последние 12 месяцев

	Запрос.УстановитьПараметр("ТаблицаДат",ТаблицаДат);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДат.Менеджер КАК Менеджер,
	               |	ТаблицаДат.Партнер КАК Партнер,
	               |	ТаблицаДат.ДатаПоследнегоКонтакта КАК ДатаПоследнегоКонтакта,
	               |	ТаблицаДат.ДатаПервогоКонтактаКомментария КАК ДатаПервогоКонтактаКомментария
	               |ПОМЕСТИТЬ Таб
	               |ИЗ
	               |	&ТаблицаДат КАК ТаблицаДат
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Таб.Менеджер КАК Менеджер,
	               |	Таб.Партнер КАК Партнер,
	               |	Таб.ДатаПоследнегоКонтакта КАК ДатаПоследнегоКонтакта,
	               |	Таб.ДатаПервогоКонтактаКомментария КАК ДатаПервогоКонтактаКомментария,
	               |	ЕСТЬNULL(МАКСИМУМ(ЖБИ_ЗаявкиПокупателей.Ссылка), ЗНАЧЕНИЕ(Документ.ЖБИ_ЗаявкиПокупателей.ПустаяСсылка)) КАК ЗаказКлиента,
	               |	ЕСТЬNULL(МАКСИМУМ(ЖБИ_ЗаявкиПокупателей.Ссылка.Дата), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗаказа
				   |	ПОМЕСТИТЬ ТаблИтоги
	               |ИЗ
	               |	Таб КАК Таб
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЖБИ_ЗаявкиПокупателей КАК ЖБИ_ЗаявкиПокупателей
	               |		ПО Таб.Партнер = ЖБИ_ЗаявкиПокупателей.Партнер
	               |			И Таб.Менеджер = ЖБИ_ЗаявкиПокупателей.Менеджер
				   |			И ЖБИ_ЗаявкиПокупателей.Дата>=Таб.ДатаПервогоКонтактаКомментария
	               |ГДЕ
	               |	ЖБИ_ЗаявкиПокупателей.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
				   |	И ЖБИ_ЗаявкиПокупателей.Дата >= &ДатаНачалаРаботы
	               |	И НЕ ЖБИ_ЗаявкиПокупателей.ПометкаУдаления
	               |	И ЖБИ_ЗаявкиПокупателей.Статус = ЗНАЧЕНИЕ(Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Отгружен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Таб.Менеджер,
	               |	Таб.Партнер,
	               |	Таб.ДатаПоследнегоКонтакта,
	               |	Таб.ДатаПервогоКонтактаКомментария
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	Таб.Менеджер,
	               |	Таб.Партнер,
	               |	Таб.ДатаПоследнегоКонтакта,
	               |	Таб.ДатаПервогоКонтактаКомментария,
	               |	ЕСТЬNULL(МИНИМУМ(ЖБИ_ЗаявкиПокупателей.Ссылка), ЗНАЧЕНИЕ(Документ.ЖБИ_ЗаявкиПокупателей.ПустаяСсылка)),
	               |	ЕСТЬNULL(МИНИМУМ(ЖБИ_ЗаявкиПокупателей.Ссылка.Дата), ДАТАВРЕМЯ(1, 1, 1))
	               |ИЗ
	               |	Таб КАК Таб
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЖБИ_ЗаявкиПокупателей КАК ЖБИ_ЗаявкиПокупателей
	               |		ПО Таб.Партнер = ЖБИ_ЗаявкиПокупателей.Партнер
	               |			И Таб.Менеджер = ЖБИ_ЗаявкиПокупателей.Менеджер
				   |			И ЖБИ_ЗаявкиПокупателей.Дата>=Таб.ДатаПервогоКонтактаКомментария
	               |ГДЕ
	               |	ЖБИ_ЗаявкиПокупателей.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода
				   |	И ЖБИ_ЗаявкиПокупателей.Дата >= &ДатаНачалаРаботы
	               |	И НЕ ЖБИ_ЗаявкиПокупателей.ПометкаУдаления
	               |	И ЖБИ_ЗаявкиПокупателей.Статус <> ЗНАЧЕНИЕ(Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Удален)
	               |	И ЖБИ_ЗаявкиПокупателей.Статус <> ЗНАЧЕНИЕ(Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Отгружен)
	               |	И ЖБИ_ЗаявкиПокупателей.Статус <> ЗНАЧЕНИЕ(Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Завершен)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Таб.Менеджер,
	               |	Таб.Партнер,
	               |	Таб.ДатаПоследнегоКонтакта,
	               |	Таб.ДатаПервогоКонтактаКомментария
				   |;
				   |ВЫБРАТЬ
	               |	Таб.Менеджер КАК Менеджер,
	               |	Таб.Партнер КАК Партнер,
	               |	Таб.ДатаПоследнегоКонтакта КАК ДатаПоследнегоКонтакта,
	               |	Таб.ДатаПервогоКонтактаКомментария КАК ДатаПервогоКонтактаКомментария,
	               |	ТаблИтоги.ЗаказКлиента КАК ЗаказКлиента,
				   |	ТаблИтоги.ЗаказКлиента.Статус КАК СтатусЗаказа,
	               |	ТаблИтоги.ДатаЗаказа КАК ДатаЗаказа
	               |ИЗ
				   |	Таб КАК Таб 
				   |	ЛЕВОЕ СОЕДИНЕНИЕ ТаблИтоги КАК ТаблИтоги
	               |		ПО Таб.Менеджер = ТаблИтоги.Менеджер
				   |        И  Таб.Партнер = ТаблИтоги.Партнер
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Таб.Менеджер,
	               |	Таб.Партнер,
	               |	Таб.ДатаПоследнегоКонтакта,
	               |	Таб.ДатаПервогоКонтактаКомментария,
				   |	ТаблИтоги.ЗаказКлиента,
				   |	ТаблИтоги.ДатаЗаказа
	               |
	               |УПОРЯДОЧИТЬ ПО
				   |	Менеджер,
				   |	Партнер,
	               |	ДатаЗаказа";				   
	
	ТаблицаДат.Колонки.Добавить("ДатаКонтроляМенеджераВРаботе", Новый ОписаниеТипов("Булево"));
	ТаблицаДат.Колонки.Добавить("ДатаКонтроляМенеджераВПроработке", Новый ОписаниеТипов("Булево"));
	ТаблицаДат.Колонки.Добавить("ДатаКонтроляМенеджераНеВРаботе", Новый ОписаниеТипов("Дата"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого НомСтр Из РезультатЗапроса Цикл	
		
		 НайденнаяСтрока = ТаблицаДат.НайтиСтроки(Новый Структура("Менеджер,Партнер",НомСтр.Менеджер,НомСтр.Партнер));
		 Если НайденнаяСтрока.Количество() = 0 Тогда 
			 Продолжить;
		 КонецЕсли;
		 		 
		//есть счет
		СтрТаблицы = НайденнаяСтрока[0];
		Если ЗначениеЗаполнено(НомСтр.ЗаказКлиента) Тогда
			ДатаСчета 	 = НомСтр.ДатаЗаказа;
			СтатусЗаказа = НомСтр.СтатусЗаказа;
			
			РазностьДат = ЖБИ_ОбщегоНазначенияСервер.РазницаВМесяцах(НомСтр.ДатаПервогоКонтактаКомментария,ДатаСчета); //считаем разность месяцев между датой первого контакта и датой счета
			Если РазностьДат<=8 Тогда //сценарий 3
				//отгружен
				Если СтатусЗаказа = Перечисления.ЖБИ_СтатусЗаявкиПокупателя.Отгружен Тогда 
					СтрТаблицы.ДатаКонтроляМенеджераВРаботе 		= Истина;
					СтрТаблицы.ДатаКонтроляМенеджераВПроработке 	= Ложь;
					СтрТаблицы.ДатаКонтроляМенеджераНеВРаботе 		= ДобавитьМесяц(ДатаСчета,12);
				Иначе //счета выписываются, но нет отгрузки более 8 месяцев 
					СтрТаблицы.ДатаКонтроляМенеджераВРаботе 		= Ложь;
					СтрТаблицы.ДатаКонтроляМенеджераВПроработке 	= Истина;
					СтрТаблицы.ДатаКонтроляМенеджераНеВРаботе 		= ДобавитьМесяц(НомСтр.ДатаПервогоКонтактаКомментария,8);
				КонецЕсли;
			Иначе //счета выписываются, но нет отгрузки более 8 месяцев
				СтрТаблицы.ДатаКонтроляМенеджераВРаботе 		= Ложь;
				СтрТаблицы.ДатаКонтроляМенеджераВПроработке 	= Ложь;
				СтрТаблицы.ДатаКонтроляМенеджераНеВРаботе 		= ДобавитьМесяц(НомСтр.ДатаПервогоКонтактаКомментария,8);
			КонецЕсли;
		Иначе 
			РазностьДат 		= ЖБИ_ОбщегоНазначенияСервер.РазницаВМесяцах(НомСтр.ДатаПервогоКонтактаКомментария,НомСтр.ДатаПоследнегоКонтакта);
			РазностьДатТекДата 	= ЖБИ_ОбщегоНазначенияСервер.РазницаВМесяцах(НомСтр.ДатаПервогоКонтактаКомментария,ТекущаяДатаСеанса());
			Если РазностьДат = 0
				И РазностьДатТекДата>=3 Тогда //бездействие 3 месяца
				СтрТаблицы.ДатаКонтроляМенеджераВРаботе 		= Ложь;
				СтрТаблицы.ДатаКонтроляМенеджераВПроработке 	= Ложь;
				СтрТаблицы.ДатаКонтроляМенеджераНеВРаботе 		= ТекущаяДатаСеанса();
			ИначеЕсли РазностьДат = 0
				И РазностьДатТекДата<3 Тогда //бездействие 3 месяца
				СтрТаблицы.ДатаКонтроляМенеджераВРаботе 		= Ложь;
				СтрТаблицы.ДатаКонтроляМенеджераВПроработке 	= Истина;
				СтрТаблицы.ДатаКонтроляМенеджераНеВРаботе 		= ДобавитьМесяц(НомСтр.ДатаПервогоКонтактаКомментария,3);				
			ИначеЕсли РазностьДат>=0 И //месяца можно бездействовать и не вносить ничего в течении 3 месяцев
				РазностьДатТекДата<=3 Тогда 
				СтрТаблицы.ДатаКонтроляМенеджераВРаботе 		= Ложь;
				СтрТаблицы.ДатаКонтроляМенеджераВПроработке 	= Истина;
				СтрТаблицы.ДатаКонтроляМенеджераНеВРаботе 		= ДобавитьМесяц(НомСтр.ДатаПервогоКонтактаКомментария,3);
			ИначеЕсли РазностьДат>3 Тогда //вносят комментарии в течении 6 месяцев
				СтрТаблицы.ДатаКонтроляМенеджераВРаботе 		= Ложь;
				СтрТаблицы.ДатаКонтроляМенеджераВПроработке 	= Истина;
				СтрТаблицы.ДатаКонтроляМенеджераНеВРаботе 		= ДобавитьМесяц(НомСтр.ДатаПервогоКонтактаКомментария,6);				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НачатьТранзакцию();
	Для Каждого НомСтр Из ТаблицаДат Цикл
		Если КонецДня(НомСтр.ДатаКонтроляМенеджераНеВРаботе)<=КонецДня(ТекущаяДатаСеанса()) Тогда
			СпрОбъект 						= НомСтр.Партнер.ПолучитьОбъект();
			СпрОбъект.ОсновнойМенеджер 		= "";
			СпрОбъект.ОбменДанными.Загрузка = Истина;
			СпрОбъект.Записать(); 
			
			ТаблицаНабораЗаписей 		= РегистрыСведений.ЖБИ_СтатусАктивностиКлиента.ПолучитьПустуюТаблицуНаборЗаписей();
			НоваяСтр 			 		= ТаблицаНабораЗаписей.Добавить();
			НоваяСтр.Партнер			= НомСтр.Партнер;
			НоваяСтр.СтатусКонтрагента	= Перечисления.ЖБИ_СтатусКонтрагента.НеВРаботе;
			НоваяСтр.Автор				= Пользователи.ТекущийПользователь();
			НоваяСтр.Комментарий		= "Регламентное задание по удалению ответственного менеджера CRM";
			СообщениеОбОшибке 			= "";
			Результат 					= РегистрыСведений.ЖБИ_СтатусАктивностиКлиента.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,, СообщениеОбОшибке);
			Если НЕ Результат Тогда 
				ВызватьИсключение СообщениеОбОшибке;
			КонецЕсли;
			
		ИначеЕсли НомСтр.ДатаКонтроляМенеджераВРаботе Тогда  			
			СпрОбъект 						= НомСтр.Партнер.ПолучитьОбъект();
			СпрОбъект.ОсновнойМенеджер 		= НомСтр.Менеджер;
			СпрОбъект.ОбменДанными.Загрузка = Истина;
			СпрОбъект.Записать();
			
			ТаблицаНабораЗаписей 		= РегистрыСведений.ЖБИ_СтатусАктивностиКлиента.ПолучитьПустуюТаблицуНаборЗаписей();
			НоваяСтр 			 		= ТаблицаНабораЗаписей.Добавить();
			НоваяСтр.Партнер			= НомСтр.Партнер;
			НоваяСтр.СтатусКонтрагента	= Перечисления.ЖБИ_СтатусКонтрагента.ВРаботе;
			НоваяСтр.Автор				= Пользователи.ТекущийПользователь();
			НоваяСтр.Комментарий		= "Регламентное задание по удалению ответственного менеджера CRM";
			СообщениеОбОшибке 			= "";
			Результат 					= РегистрыСведений.ЖБИ_СтатусАктивностиКлиента.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,, СообщениеОбОшибке);
			Если НЕ Результат Тогда 
				ВызватьИсключение СообщениеОбОшибке;
			КонецЕсли;
		ИначеЕсли НомСтр.ДатаКонтроляМенеджераВПроработке Тогда
			СпрОбъект 						= НомСтр.Партнер.ПолучитьОбъект();
			СпрОбъект.ОсновнойМенеджер 		= НомСтр.Менеджер;
			СпрОбъект.ОбменДанными.Загрузка = Истина;
			СпрОбъект.Записать();
			
			ТаблицаНабораЗаписей 		= РегистрыСведений.ЖБИ_СтатусАктивностиКлиента.ПолучитьПустуюТаблицуНаборЗаписей();
			НоваяСтр 			 		= ТаблицаНабораЗаписей.Добавить();
			НоваяСтр.Партнер			= НомСтр.Партнер;
			НоваяСтр.СтатусКонтрагента	= Перечисления.ЖБИ_СтатусКонтрагента.ВПроработке;
			НоваяСтр.Автор				= Пользователи.ТекущийПользователь();
			НоваяСтр.Комментарий		= "Регламентное задание по удалению ответственного менеджера CRM";
			СообщениеОбОшибке 			= "";
			Результат 					= РегистрыСведений.ЖБИ_СтатусАктивностиКлиента.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,, СообщениеОбОшибке);
			Если НЕ Результат Тогда 
				ВызватьИсключение СообщениеОбОшибке;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура РассчитатьЦеныПокупателей() Экспорт
	
	Запрос 	 		= Новый Запрос;
	Наценка			= 0;
	
	Запрос.Текст 	= "ВЫБРАТЬ ПЕРВЫЕ 1
					 | * 
					 |	ИЗ 
					 |РегистрСведений.ЖБИ_ПараметрыЦенообразования КАК ЖБИ_ПараметрыЦенообразования
					 |	ГДЕ ПроцентНаценки>0";	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда 
		Наценка = РезультатЗапроса.ПроцентНаценки; 
	КонецЕсли;
	
	Запрос.Текст 	= "ВЫБРАТЬ
						|	МАКСИМУМ(ЖБИ_ПрайслистПоставщикаСрезПоследних.Период) КАК Период,
						|	ЖБИ_ПрайслистПоставщикаСрезПоследних.НоменклатураПоставщика.Номенклатура КАК Номенклатура,
						|	МИНИМУМ(ЖБИ_ПрайслистПоставщикаСрезПоследних.Цена) КАК Цена
						|ИЗ
						|	РегистрСведений.ЖБИ_ПрайслистПоставщика.СрезПоследних КАК ЖБИ_ПрайслистПоставщикаСрезПоследних
						|ГДЕ
						|	ЖБИ_ПрайслистПоставщикаСрезПоследних.НоменклатураПоставщика.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
						|	И ЖБИ_ПрайслистПоставщикаСрезПоследних.Цена>0
						|СГРУППИРОВАТЬ ПО
						|	ЖБИ_ПрайслистПоставщикаСрезПоследних.НоменклатураПоставщика.Номенклатура	 
						|УПОРЯДОЧИТЬ ПО
						|	ЖБИ_ПрайслистПоставщикаСрезПоследних.НоменклатураПоставщика.Номенклатура";
	
	ТаблицаНабораЗаписей 	= РегистрыСведений.ЖБИ_ПрайслистПокупателей.ПолучитьПустуюТаблицуНаборЗаписей();
	РезультатЗапроса 		= Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		НоваяСтр 		= ТаблицаНабораЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,РезультатЗапроса);
		НоваяСтр.Период = ТекущаяДатаСеанса();
		НоваяСтр.Автор  = Пользователи.ТекущийПользователь();
		НоваяСтр.Цена   = НоваяСтр.Цена + НоваяСтр.Цена*Наценка/100;
	КонецЦикла;
	
	СообщениеОбОшибке 	= "";
	Результат 			= РегистрыСведений.ЖБИ_ПрайслистПокупателей.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,, СообщениеОбОшибке);
	Если НЕ Результат Тогда 
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
					  					  
КонецПроцедуры

#КонецОбласти

#Область FTP

// Проверяет доставку файла по указанной настройке
//
// Параметры
//	НастройкаДоставки 	- СправочникСсылка.НастройкиДоставки. Настройка
//	стрОшибки 			- Строка. Строка ошибок
//	флСообщать 			- Булево. Флаг необходимости вывода сообщения
//
// Возвращаемое значение:
//   Булево. Флаг успешной доставки сообщения
//
Функция ПроверитьДоставкуСообщения(НастройкаДоставки, стрОшибки = "") Экспорт
	
	стрОшибки = "";
	СпособОбмена = НастройкаДоставки.СпособОбмена;
	ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла();
	ИмяВременногоФайла	= ИмяВременногоФайла + "_exch_" + Формат(ТекущаяДатаСеанса(), "ДФ=ддММггггmmss") + ".json";
	
	Файл 				= Новый Файл(ИмяВременногоФайла);	
	ИмяТестовогоФайла 	= Файл.Имя;
	
	//проверим запись в лок каталог
	ТекстДок = Новый ТекстовыйДокумент;
	Попытка
		ТекстДок.Записать(ИмяВременногоФайла);
	Исключение
		стрОшибки = стрОшибки + "Ошибка при создании тестового файла:
			|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		Возврат Ложь;
	КонецПопытки;
	
	Если СпособОбмена = Перечисления.ЖБИ_СпособОбмена.FTP Тогда //FTP		
		Попытка
			FTP = Новый FTPСоединение(НастройкаДоставки.FTPСервер, НастройкаДоставки.FTPПорт, 
				НастройкаДоставки.FTPЛогин, НастройкаДоставки.Пароль,, НастройкаДоставки.FTPПассивноеСоединение);
		Исключение
			ТекстОшибки = ИнформацияОбОшибке().Описание;
			Если Найти(ВРег(ТекстОшибки),ВРег("couldn't connect to server")) Тогда
			    ТекстОшибки = " на указанном сервере не запущен FTP-сервер";
			ИначеЕсли Найти(ВРег(ТекстОшибки),ВРег("couldn't resolve host name")) Тогда 	
			    ТекстОшибки = " указанный сервер не доступен";
			КонецЕсли;
			стрОшибки = "Ошибка подключения к FTP серверу <ftp://" + НастройкаДоставки.FTPСервер + ">: " + ТекстОшибки;
			Возврат Ложь;
		КонецПопытки;

		Попытка
			FTP.Записать(ИмяВременногоФайла, ИмяТестовогоФайла);
		Исключение
			стрОшибки = стрОшибки + "Ошибка при попытке публикации на сервере FTP тестового файла:
				|" + ИнформацияОбОшибке().Описание;
			Возврат Ложь;
		КонецПопытки;
		
		Попытка
			FTP.Получить(ИмяТестовогоФайла,ИмяВременногоФайла);
		Исключение
			стрОшибки = стрОшибки + "Ошибка при попытке получения c сервера FTP тестового файла:
				|" + ИнформацияОбОшибке().Описание;
			Возврат Ложь;
		КонецПопытки;
		
		Попытка
			FTP.Удалить(НастройкаДоставки.FTPКаталог, ИмяТестовогоФайла);
		Исключение
			стрОшибки = стрОшибки + "Ошибка при попытке удаления c сервера FTP тестового файла:
				|" + ИнформацияОбОшибке().Описание;
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	// Удаляем локальный тестовый файл
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		стрОшибки = стрОшибки + "Ошибка при удалении тестового файла:
			|" + ИнформацияОбОшибке().Описание;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // ПроверитьДоставкуСообщения()

#КонецОбласти

#Область РассылкаПисем

Процедура ДобавитьФорматированныйДокументКФорматированномуДокументу(ПриемникДокумент, ДобавляемыйДокумент)

	Для Инд = 0 По ДобавляемыйДокумент.Элементы.Количество() -1 Цикл
		ДобавляемыйЭлемент = ДобавляемыйДокумент.Элементы[Инд];
		Если ТипЗнч(ДобавляемыйЭлемент) = Тип("ПараграфФорматированногоДокумента") Тогда
			НовыйПараграф = ПриемникДокумент.Элементы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПараграф, ДобавляемыйЭлемент, "ТипПараграфа, ГоризонтальноеПоложение, МеждустрочныйИнтервал,Отступ");
			ДобавитьФорматированныйДокументКФорматированномуДокументу(НовыйПараграф, ДобавляемыйЭлемент);
		Иначе
			Если ТипЗнч(ДобавляемыйЭлемент) = Тип("ТекстФорматированногоДокумента")
				И Не ДобавляемыйЭлемент.Текст = "" Тогда
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить(ДобавляемыйЭлемент.Текст, Тип("ТекстФорматированногоДокумента"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,ДобавляемыйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
			ИначеЕсли ТипЗнч(ДобавляемыйЭлемент) = Тип("КартинкаФорматированногоДокумента") Тогда
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить(ДобавляемыйЭлемент.Картинка, Тип("КартинкаФорматированногоДокумента"));
				ЗаполнитьЗначенияСвойств(НовыйЭлемент,ДобавляемыйЭлемент,,"ЗакладкаКонца, ЗакладкаНачала, Родитель");
			ИначеЕсли ТипЗнч(ДобавляемыйЭлемент) = Тип("ПереводСтрокиФорматированногоДокумента") Тогда
				Если ТипЗнч(ДобавляемыйДокумент) = Тип("ПараграфФорматированногоДокумента") 
					И (ДобавляемыйДокумент.ТипПараграфа = ТипПараграфа.МаркированныйСписок
					Или ДобавляемыйДокумент.ТипПараграфа = ТипПараграфа.НумерованныйСписок) Тогда
					Продолжить;
				КонецЕсли;
				НовыйЭлемент = ПриемникДокумент.Элементы.Добавить( , Тип("ПереводСтрокиФорматированногоДокумента"));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ОтформатироватьТекстПисьма(ТекстПоУмолчанию,ФорматированныйДокументПодписи)
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.Добавить(ТекстПоУмолчанию,ТипЭлементаФорматированногоДокумента.Текст);
	
	ФорматированныйДокумент.Вставить(ФорматированныйДокумент.ПолучитьЗакладкуНачала(),,
		ТипЭлементаФорматированногоДокумента.ПереводСтроки);
	ФорматированныйДокумент.Вставить(ФорматированныйДокумент.ПолучитьЗакладкуНачала(),,
		ТипЭлементаФорматированногоДокумента.ПереводСтроки);
		
	ДобавитьФорматированныйДокументКФорматированномуДокументу(ФорматированныйДокумент, ФорматированныйДокументПодписи);
	
	Возврат ФорматированныйДокумент;
	
КонецФункции

Процедура ОтправитьЭлектронноеПисьмоУведомления(ПараметрыМетода, АдресРезультат) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблРассылки 				= ПараметрыМетода.СтруктураПараметров.ТаблРассылки;
	УчЗаписьЭлПочты 			= ПараметрыМетода.СтруктураПараметров.УчЗаписьЭлПочты;
	Если НЕ ЗначениеЗаполнено(УчЗаписьЭлПочты.Пользователь) Тогда
		УчЗаписьЭлПочты = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;	
	КонецЕсли;
	
	ФорматированныйДокументПодписи = ЖБИ_ОбщегоНазначенияСервер.ПодписьПользователяФорматированныйДокумент();	
	Для Каждого НомСтр Из ТаблРассылки Цикл
		
		Если НЕ НомСтр.Пометка Тогда 
			Продолжить;
		КонецЕсли;
		
		ИмяПечати 			= НомСтр.ИмяПечатнойФормыСлужебное;
		ИмяПечатнойФормы	= НомСтр.ИмяПечатнойФормы;
		АдресРассылки		= НомСтр.АдресРассылки;
		ДопИнфо				= НомСтр.ДопИнфо;
		СтруктураТема		= ЖБИ_ОбщегоНазначенияСервер.ЗаполнитьТекстПоУмолчанию();
		ТемаПоУмолчанию		= СтруктураТема.Тема;
		ТекстПоУмолчанию	= СтруктураТема.Текст;
		ДокументСсылка      = НомСтр.ДокументПечати;
		ПараметрыПечати		= Новый Структура("ОтображатьФаксимиле",НомСтр.Факсимиле);
		МассивПечатныхФорм 	= ЖБИ_ОбщегоНазначенияСервер.ПечатьСерверный(ИмяПечати, ДокументСсылка,ПараметрыПечати);	
		Если НЕ ЗначениеЗаполнено(МассивПечатныхФорм) Тогда
			СообщениеОбОшибки = "Не удалось сформировать печатную форму " + ИмяПечатнойФормы + " отправка почты прервана";
			НомСтр.ПисьмоОтправлено = Ложь;
			ПоместитьВоВременноеХранилище(ТаблРассылки, АдресРезультат);
			ВызватьИсключение СообщениеОбОшибки;
		КонецЕсли;
				
		// Массив временных файлов, который нужно будет обязательно
		// удалить в конце работы данного алгоритма
		МассивУдаляемыхФайлов = Новый Массив;
		
		//1 Вложения
		СписокВложений 					 = Новый Массив;
		УникальныйИдентификаторХранилища = Новый УникальныйИдентификатор;
		
		// подготовка временной папки
		ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
		СоздатьКаталог(ИмяВременнойПапки);
		
		ТипФайла 		= ТипФайлаТабличногоДокумента.PDF;
		ИмяФайла 		= ИмяПечати + "." + "pdf"; 				
		ПолноеИмяФайла 	= ЖБИ_ОбщегоНазначенияСервер.УникальноеИмяФайла(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ИмяФайла);
		МассивПечатныхФорм[0].Записать(ПолноеИмяФайла, ТипФайла);
		
		ДвоичныеДанные 			 = Новый ДвоичныеДанные(ПолноеИмяФайла);
		ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификаторХранилища);
		
		Номер 	= ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ДокументСсылка,"Номер");
		Дата	= ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ДокументСсылка,"Дата");
		
		ОписаниеФайла = Новый Структура;
		ОписаниеФайла.Вставить("Представление", ИмяПечатнойФормы + " " + Номер + " от " + Дата + ".pdf");
		ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);
		СписокВложений.Добавить(ОписаниеФайла);
		
		МассивУдаляемыхФайлов.Добавить(ПолноеИмяФайла);
		
		//2 Подготовка письма	
		СтруктураПолучатель 				= Новый Структура("Адрес,Представление");
		СтруктураПолучатель.Адрес			= АдресРассылки;
		СтруктураПолучатель.Представление	= АдресРассылки;
		времПолучателиСообщения 			= Новый Массив;
		времПолучателиСообщения.Добавить(СтруктураПолучатель);		
			
		СтруктураОтправитель = Новый Структура("Адрес,Представление");
		СтруктураОтправитель.Адрес			= УчЗаписьЭлПочты.АдресЭлектроннойПочты;
		СтруктураОтправитель.Представление	= СТРОКА(УчЗаписьЭлПочты); // "Системная учетная запись";
		времАдресаОтвета 					= Новый Массив;
		времАдресаОтвета.Добавить(СтруктураОтправитель);
		
		ФорматированныйТекстПисьма  = ОтформатироватьТекстПисьма(ТекстПоУмолчанию,ФорматированныйДокументПодписи);
		времПараметрыПисьма 		= Новый Структура();	
		времПараметрыПисьма.Вставить("Кому", 						АдресРассылки);
		времПараметрыПисьма.Вставить("ПолучателиСообщения",			времПолучателиСообщения);
		//времПараметрыПисьма.Вставить("Копии",						времКопии);
		времПараметрыПисьма.Вставить("Тема",						ТемаПоУмолчанию);
		времПараметрыПисьма.Вставить("Тело",						ФорматированныйТекстПисьма);
		времПараметрыПисьма.Вставить("Важность",					ВажностьИнтернетПочтовогоСообщения.Обычная);
		времПараметрыПисьма.Вставить("АдресОтвета",					времАдресаОтвета);
		времПараметрыПисьма.Вставить("УведомитьОДоставке",			ЛОЖЬ); // ИСТИНА);
		времПараметрыПисьма.Вставить("УведомитьОПрочтении",			ЛОЖЬ); // ИСТИНА);
		времПараметрыПисьма.Вставить("ТипТекста",					Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
		
		Если СписокВложений.Количество() > 0 Тогда
			времПараметрыПисьма.Вставить("Вложения", СписокВложений);
		КонецЕсли;
		
		ИдентификаторПочтовогоСообщения = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчЗаписьЭлПочты, времПараметрыПисьма);
		Если Не ПустаяСтрока(ИдентификаторПочтовогоСообщения) Тогда
			НомСтр.ПисьмоОтправлено = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
	// Удаляем временные файлы
	Для Каждого фл ИЗ МассивУдаляемыхФайлов Цикл 
		УдалитьФайлы(фл);
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблРассылки, АдресРезультат);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

#КонецОбласти



