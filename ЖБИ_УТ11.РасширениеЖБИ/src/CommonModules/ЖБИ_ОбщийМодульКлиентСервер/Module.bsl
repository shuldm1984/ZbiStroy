
#Область ПрисоедиенныеФаклы

// Записывает двоичные данные файла в информационную базу.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//  ДвоичныеДанные     - ДвоичныеДанные, которые требуется записать.
//
&НаСервере
Процедура ЗаписатьФайлВИнформационнуюБазу(Знач ПрисоединенныйФайл, Знач ДвоичныеДанные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи                     = РегистрыСведений.ЖБИ_ДвоичныеДанныеФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Файл                = ПрисоединенныйФайл;
	МенеджерЗаписи.ДвоичныеДанныеФайла = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Карты

Функция ПредставлениеБайта(Знач Байт)
	Результат = "";
	СтрокаСимволов = "0123456789ABCDEF";
	Для Счетчик = 1 По 2 Цикл
		Результат = Сред(СтрокаСимволов, Байт % 16 + 1, 1) + Результат;
		Байт = Цел(Байт / 16);
	КонецЦикла;
	Возврат "%" + Результат;
КонецФункции

Функция ЧислоВБинарныйМассив(Знач Число, Знач ВсегоРазрядов = 32)
	Результат = Новый Массив;
	ТекущийРазряд = 0;
	Пока ТекущийРазряд < ВсегоРазрядов Цикл
		ТекущийРазряд = ТекущийРазряд + 1;
		Результат.Добавить(Булево(Число % 2));
		Число = Цел(Число / 2);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция БинарныйМассивВЧисло(Массив)
	Результат = 0;
	Для НомерРазряда = -(Массив.Количество()-1) По 0 Цикл
		Результат = Результат * 2 + Число(Массив[-НомерРазряда]);
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ЛогическоеПобитовоеИ(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] И БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции

Функция ЛогическоеПобитовоеИли(БинарныйМассив1, БинарныйМассив2)
	Результат = Новый Массив;
	Для Индекс = 0 По БинарныйМассив1.Количество()-1 Цикл
		Результат.Добавить(БинарныйМассив1[Индекс] Или БинарныйМассив2[Индекс]);
	КонецЦикла;	
	Возврат Результат;
КонецФункции


// Возвращает строку, в которой все не алфавитно-числовые символы (кроме -_.)
// заменены на знак процентов (%) с последующими двумя шестнадцатеричными цифрами и
// пробелами, кодированными как знаки плюс (+).Она кодируется тем же способом, что и
// post данные WWW-формы, то есть как в типе носителя application/x-www-form-urlencoded.

&НаКлиенте
Функция URLEncode(Строка) Экспорт 
	Результат = "";
	Для НомерСимвола = 1 По СтрДлина(Строка) Цикл
		КодСимвола = КодСимвола(Строка, НомерСимвола);
		Символ = Сред(Строка, НомерСимвола, 1);
		
		// пропускаем A..Z, a..z, 0..9
		Если СтрНайти("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", Символ) > 0 Тогда // символы -_.!~*\() кодируем как небезопасные  
			Результат = Результат + Символ;
			Продолжить;
		КонецЕсли;
		
		Если Символ = " " Тогда
			Результат = Результат + "+";
			Продолжить;
		КонецЕсли;
		
		Если КодСимвола <= 127 Тогда // 0x007F
			Результат = Результат + ПредставлениеБайта(КодСимвола);
		ИначеЕсли КодСимвола <= 2047 Тогда // 0x07FF 
			Результат = Результат 
					  + ПредставлениеБайта(
					  					   БинарныйМассивВЧисло(
																ЛогическоеПобитовоеИли(
																			 ЧислоВБинарныйМассив(192,8),
																			 ЧислоВБинарныйМассив(Цел(КодСимвола / Pow(2,6)),8)))); // 0xc0 | (ch >> 6)
			Результат = Результат 
					  + ПредставлениеБайта(
					  					   БинарныйМассивВЧисло(
										   						ЛогическоеПобитовоеИли(
																			 ЧислоВБинарныйМассив(128,8),
																			 ЛогическоеПобитовоеИ(
																			 			ЧислоВБинарныйМассив(КодСимвола,8),
																						ЧислоВБинарныйМассив(63,8)))));  //0x80 | (ch & 0x3F)
		Иначе  // 0x7FF < ch <= 0xFFFF
			Результат = Результат 
					  + ПредставлениеБайта	(
					  						 БинарныйМассивВЧисло(
																  ЛогическоеПобитовоеИли(
																			   ЧислоВБинарныйМассив(224,8), 
																			   ЧислоВБинарныйМассив(Цел(КодСимвола / Pow(2,12)),8)))); // 0xe0 | (ch >> 12)
											
			Результат = Результат 
					  + ПредставлениеБайта(
					  					   БинарныйМассивВЧисло(
										   						ЛогическоеПобитовоеИли(
																			 ЧислоВБинарныйМассив(128,8),
																			 ЛогическоеПобитовоеИ(
																			 			ЧислоВБинарныйМассив(Цел(КодСимвола / Pow(2,6)),8),
																						ЧислоВБинарныйМассив(63,8)))));  //0x80 | ((ch >> 6) & 0x3F)
											
			Результат = Результат 
					  + ПредставлениеБайта(
					  					   БинарныйМассивВЧисло(
										   						ЛогическоеПобитовоеИли(
																			 ЧислоВБинарныйМассив(128,8),
																			 ЛогическоеПобитовоеИ(
																			 			ЧислоВБинарныйМассив(КодСимвола,8),
																						ЧислоВБинарныйМассив(63,8)))));  //0x80 | (ch & 0x3F)
								
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

#КонецОбласти

&НаКлиенте
Функция ПроверитьТекСтрокуНаДоступность(ЭтаФорма,ИмяСписка) Экспорт
	ТекДанные = Неопределено;	
	Если ЭтаФорма.Элементы[ИмяСписка].ТекущаяСтрока<>Неопределено 
		И ТипЗнч(ЭтаФорма.Элементы[ИмяСписка].ТекущаяСтрока)<>Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекДанные = ЭтаФорма.Элементы[ИмяСписка].ТекущиеДанные;		
	КонецЕсли;
	Возврат ТекДанные;		
КонецФункции


&НаКлиенте
Функция ЕстьСвойствоОбъектаXDTO(ОбъектXDTO, ИмяСвойства)   
    Возврат ОбъектXDTO.Свойства().Получить(ИмяСвойства) <> Неопределено;   
КонецФункции

&НаКлиенте
Функция РазобратьXmlАдресныйКлассификатор(АдресЗначенияПолей) Экспорт
	
	СтруктураРезультат = Новый Структура("Регион,Город,НаселПункт,Территория");
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.УстановитьСтроку(АдресЗначенияПолей);
		
		РезультатРазборки 				= Новый Массив;
		ТипКонтактнаяИнформацияXDTO 	= ФабрикаXDTO.Тип("http://www.v8.1c.ru/ssl/contactinfo","КонтактнаяИнформация");
		КонтактнаяИнформация 			= ФабрикаXDTO.ПрочитатьXML(ЧтениеXML,ТипКонтактнаяИнформацияXDTO);
		
		СтруктураРезультат.Регион 		= ?(ЕстьСвойствоОбъектаXDTO(КонтактнаяИнформация.Состав.Состав,"СубъектРФ"),КонтактнаяИнформация.Состав.Состав.СубъектРФ,"");
		СтруктураРезультат.Город 		= ?(ЕстьСвойствоОбъектаXDTO(КонтактнаяИнформация.Состав.Состав,"Город"),КонтактнаяИнформация.Состав.Состав.Город,"");
		СтруктураРезультат.НаселПункт 	= ?(ЕстьСвойствоОбъектаXDTO(КонтактнаяИнформация.Состав.Состав,"НаселПункт"),КонтактнаяИнформация.Состав.Состав.НаселПункт,"");
		СтруктураРезультат.Территория 	= ?(ЕстьСвойствоОбъектаXDTO(КонтактнаяИнформация.Состав.Состав,"ДопАдрЭл"),КонтактнаяИнформация.Состав.Состав.ДопАдрЭл.Значение,"");
	Исключение
	КонецПопытки;
	
	Возврат СтруктураРезультат;
	
КонецФункции

#Область ДинимическийСписокПрограмно

&НаСервере
Процедура ЗаполнитьКолонкиДляЧата(Форма, ТаблицаФормы, МассивКолонок, ИмяСписка)
	
	ГруппаКолонокВертикальная 				= Форма.Элементы.Добавить("ГруппаКолонокВертикальная", Тип("ГруппаФормы"), ТаблицаФормы);
	ГруппаКолонокВертикальная.Вид 			= ВидГруппыФормы.ГруппаКолонок;
	ГруппаКолонокВертикальная.Группировка 	= ГруппировкаКолонок.Вертикальная;
	
	ГруппаКолонокГоризонтальная 			= Форма.Элементы.Добавить("ГруппаКолонокГоризонтальная", Тип("ГруппаФормы"), ГруппаКолонокВертикальная);
	ГруппаКолонокГоризонтальная.Вид 		= ВидГруппыФормы.ГруппаКолонок;
	ГруппаКолонокГоризонтальная.Группировка = ГруппировкаКолонок.Горизонтальная;
	
	Для Каждого Элемента Из МассивКолонок Цикл
		ПараметрыКолонки = СтрЗаменить(Элемента,",",Символы.ПС);
		Если СтрЧислоСтрок(ПараметрыКолонки) > 1 Тогда
			Заголовок = СтрПолучитьСтроку(ПараметрыКолонки, 1);
			ИмяКолонки = СтрПолучитьСтроку(ПараметрыКолонки, 2);
		Иначе
			Заголовок = "";
			ИмяКолонки = ПараметрыКолонки; 
		КонецЕсли;
		Если ИмяКолонки = "Ответственный"
			ИЛИ ИмяКолонки = "Дата" Тогда 
			НоваяКолонкаТаблицы 						= Форма.Элементы.Добавить(ИмяСписка + ИмяКолонки, Тип("ПолеФормы"), ГруппаКолонокГоризонтальная);
			НоваяКолонкаТаблицы.АвтоМаксимальнаяШирина 	= Ложь;
			НоваяКолонкаТаблицы.МаксимальнаяШирина 		= 5;
		Иначе 
			НоваяКолонкаТаблицы 						= Форма.Элементы.Добавить(ИмяСписка + ИмяКолонки, Тип("ПолеФормы"), ГруппаКолонокВертикальная);
			НоваяКолонкаТаблицы.АвтоМаксимальнаяШирина 	= Ложь;
			НоваяКолонкаТаблицы.МаксимальнаяШирина 		= 5;
		КонецЕсли;
		Если Заголовок <> "" Тогда НоваяКолонкаТаблицы.Заголовок = Заголовок; КонецЕсли;
		НоваяКолонкаТаблицы.ПутьКДанным = ИмяСписка + "." + ИмяКолонки; 	
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура СозданиеДинамическогоСписка(
	
	Форма,
	ИмяСписка = "Список", 			//тип строка - имя будущего списка на форме и реквизита
	ТекстЗапроса = "", 				//тип строка - запрос, если он не указан, необходимо указать таблицу
	МассивКолонок,                  //тип массив - массив создаваемых колонок, значения тип строка. Пример: "Д,ДоговораКонтрагента" значит будет создана колонка
									//				с заголовком "Д" и колонкой списка "ДоговораКонтрагента". Если указать просто "ДоговораКонтрагента", 
									//				заголовок будет идентичен заголовку по умолчанию типа "Договор контрагента".
	СписокДействий = Неопределено,  //типа структура - структура содержит действия (свойства) динамического списка, можно указать только те которые необходимы.
									//				пример: СписокДействий = Новый Структура("Выбор,ПриАктивизацииСтроки","СписокВыбор","СписокПриАктивизацииСтроки")
	ТаблицаСписка = "",				//тип строка - содержит имя основной таблицы, пример: "Документ.РеализацияТоваровУслуг"	
	ДобавитьВ = "",                 //тип строка - имя элемента на который будет размещен список, если пустое, тогда добавляется на форму
	ВставитьПеред = "",             //тип строка - имя элемента перед которым будет размещен список, если пустое, будет просто добавлен в конец
	СвояКоманднаяПанель = ЛОЖЬ,     //тип булево - если ИСТИНА, скрывает стандартную панель и создает свою пустую для будушего наполнения ИмяСписка+"КоманднаяПанель2"
	ПараметрыЗапроса = Неопределено) Экспорт //тип структура - содержит перечень параметров, если они используются в запросе.
	
	//Защита от дурака
	Если ТекстЗапроса = "" И ТаблицаСписка = "" Тогда Сообщить("Ошибка формирования динамического списка, укажите запрос или таблицу"); Возврат; КонецЕсли;
																									
	//Создаем свою командную панель, тот случай когда я не нашел способа снять галочку "Автозаполнение"
	Если СвояКоманднаяПанель Тогда
		Если ВставитьПеред = "" Тогда
			ГруппаДинамическогоСписка  = Форма.Элементы.Добавить("Группа" + ИмяСписка + "CоСвоейКоманднойПанелью",Тип("ГруппаФормы"),?(ДобавитьВ = "",Форма,Форма.Элементы[ДобавитьВ]));
		Иначе
			ГруппаДинамическогоСписка  = Форма.Элементы.Вставить("Группа" + ИмяСписка + "CоСвоейКоманднойПанелью",Тип("ГруппаФормы"),?(ДобавитьВ = "",Форма,Форма.Элементы[ДобавитьВ]),Форма.Элементы[ВставитьПеред]);			
		КонецЕсли;
		ГруппаДинамическогоСписка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаДинамическогоСписка.ОтображатьЗаголовок = Ложь;
		ГруппаДинамическогоСписка.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаДинамическогоСписка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		КоманднаяПанельСписка  = Форма.Элементы.Добавить(ИмяСписка + "КоманднаяПанель2",Тип("ГруппаФормы"),ГруппаДинамическогоСписка);
		КоманднаяПанельСписка.Вид = ВидГруппыФормы.КоманднаяПанель;	
		
		//Добавляем команду добавить на форму
		КомандаФ  = Форма.Команды.Добавить("ДобавитьЧат");
		КомандаФ.Действие = "ДобавитьЧат";
		КнопкаДобавить = Форма.Элементы.Добавить("СписокДобавитьЧат",Тип("КнопкаФормы"),КоманднаяПанельСписка);
		КнопкаДобавить.ИмяКоманды = КомандаФ.Имя;
		КнопкаДобавить.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
		
		//Добавляем команду обновить на форму
		КомандаФ  = Форма.Команды.Добавить("ОбновитьЧат");
		КомандаФ.Действие = "ОбновитьЧат";
		КнопкаДобавить = Форма.Элементы.Добавить("СписокОбновитьЧат",Тип("КнопкаФормы"),КоманднаяПанельСписка);
		КнопкаДобавить.ИмяКоманды = КомандаФ.Имя;
		КнопкаДобавить.Картинка = БиблиотекаКартинок.Обновить;
		
	КонецЕсли;
									
	//Создаем реквизит формы
	ТипыРеквизита = Новый Массив;                             
	ТипыРеквизита.Добавить(Тип("ДинамическийСписок"));
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипыРеквизита); 
	ДинамическийСписок = Новый РеквизитФормы(ИмяСписка, ОписаниеТиповДляРеквизита,,"",ЛОЖЬ); //Имя реквизита
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(ДинамическийСписок);        
	
	//Задаем свойства реквизиту
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);        
	РеквизитДинамическийСписок = Форма[ИмяСписка]; //Имя реквизита
	Если ТекстЗапроса = "" Тогда
		РеквизитДинамическийСписок.ПроизвольныйЗапрос = ЛОЖЬ;
		РеквизитДинамическийСписок.ОсновнаяТаблица = ТаблицаСписка;
	Иначе
		РеквизитДинамическийСписок.ПроизвольныйЗапрос = ИСТИНА;
		РеквизитДинамическийСписок.ТекстЗапроса = ТекстЗапроса;
		Если ТаблицаСписка <> "" Тогда РеквизитДинамическийСписок.ОсновнаяТаблица = ТаблицаСписка; КонецЕсли;		
	КонецЕсли;
	
	//Заполняем параметры если они были указаны
	Если ПараметрыЗапроса <> Неопределено Тогда
		Для Каждого Параметра из ПараметрыЗапроса Цикл
			РеквизитДинамическийСписок.Параметры.УстановитьЗначениеПараметра(Параметра.Ключ,Параметра.Значение);	
		КонецЦикла;		 
	КонецЕсли;
	
	//Размещаем реквизит на форме		
	Если ЛОЖЬ
		ИЛИ ВставитьПеред = "" 
		ИЛИ СвояКоманднаяПанель //Если своя командная панель тогда нет логики уже в параметре ВставитьПеред
		Тогда
		ТаблицаФормы = Форма.Элементы.Добавить(ИмяСписка,Тип("ТаблицаФормы"),?(СвояКоманднаяПанель,ГруппаДинамическогоСписка,?(ДобавитьВ = "",Форма,Форма.Элементы[ДобавитьВ])));
	Иначе
		ТаблицаФормы = Форма.Элементы.Вставить(ИмяСписка,Тип("ТаблицаФормы"),?(ДобавитьВ = "",Форма,Форма.Элементы[ДобавитьВ]),Форма.Элементы[ВставитьПеред]);	
	КонецЕсли;		
	ТаблицаФормы.ПутьКДанным = ИмяСписка; //Имя реквизита 
	
	//Если своя панель тогда скрываем стандартную
	Если СвояКоманднаяПанель Тогда
		Форма.Элементы[ИмяСписка].ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	КонецЕсли;

	//Создание колонок на основание МассивКолонок
	Если ИмяСписка = "Чат" Тогда
		ЗаполнитьКолонкиДляЧата(Форма, ТаблицаФормы, МассивКолонок, ИмяСписка);
	Иначе 
		Для Каждого Элемента Из МассивКолонок Цикл
			ПараметрыКолонки = СтрЗаменить(Элемента,",",Символы.ПС);
			Если СтрЧислоСтрок(ПараметрыКолонки) > 1 Тогда
				Заголовок = СтрПолучитьСтроку(ПараметрыКолонки, 1);
				ИмяКолонки = СтрПолучитьСтроку(ПараметрыКолонки, 2);
			Иначе
				Заголовок = "";
				ИмяКолонки = ПараметрыКолонки; 
			КонецЕсли;	
			НоваяКолонкаТаблицы = Форма.Элементы.Добавить(ИмяСписка + ИмяКолонки, Тип("ПолеФормы"), ТаблицаФормы);
			Если Заголовок <> "" Тогда НоваяКолонкаТаблицы.Заголовок = Заголовок; КонецЕсли;
			НоваяКолонкаТаблицы.ПутьКДанным = ИмяСписка + "." + ИмяКолонки; 	
		КонецЦикла;
	КонецЕсли;

	//Задаем действия (События) на основание СписокДействий, если он определен
	Если СписокДействий <> Неопределено Тогда 	
		ПереченьСвойств = "ПриИзменении
						|Выбор
						|ПриАктивизацииСтроки
						|ВыборЗначения
						|ПриАктивизацииПоля
						|ПриАктивизацииЯчейки
						|ПередНачаломДобавления
						|ПередНачаломИзменения
						|ПередУдалением
						|ПриНачалеРедактирования
						|ПередОкончаниемРедактирования
						|ПриОкончанииРедактирования
						|ОбработкаВыбора
						|ПередРазворачиванием
						|ПередСворачиванием
						|ПослеУдаления
						|ПриСменеТекущегоРодителя
						|ОбработкаЗаписиНового
						|ПриСохраненииПользовательскихНастроекНаСервере
						|ПередЗагрузкойПользовательскихНастроекНаСервере
						|ПриЗагрузкеПользовательскихНастроекНаСервере
						|ПриОбновленииСоставаПользовательскихНастроекНаСервере
						|ОбработкаЗапросаОбновления
						|ПриПолученииДанныхНаСервере
						|НачалоПеретаскивания
						|ПроверкаПеретаскивания
						|ОкончаниеПеретаскивания
						|Перетаскивание";
		Для Счетчик = 1 по 28 Цикл
			ИмяСвойства = СтрПолучитьСтроку(ПереченьСвойств, Счетчик);
			Форма.Элементы[ИмяСписка].УстановитьДействие(ИмяСвойства,?(СписокДействий.Свойство(ИмяСвойства),СписокДействий[ИмяСвойства],""));
		КонецЦикла;
	КонецЕсли;	

КонецПроцедуры 

#КонецОбласти

#Область Печать

&НаСервере
Процедура УстановитьКнопкиПечатиСервер(ДоступныеПечатныеФормы, ЭтаФорма) Экспорт
		
	Для Каждого ТекФорма Из ДоступныеПечатныеФормы Цикл		
		ИмяКнопкиКоманды 		= "Печать_"+ТекФорма.Ключ;
		Кнопка 					= ЭтаФорма.Элементы.Добавить(ИмяКнопкиКоманды, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ПодменюПечати);
		Кнопка.Заголовок 		= ТекФорма.Значение;
		
		Команда 				= ЭтаФорма.Команды.Добавить(ИмяКнопкиКоманды);
		Команда.Действие 		= "Печать";		
		Кнопка.ИмяКоманды 		= ИмяКнопкиКоманды;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПечатнуюФорму(ЭтаФорма,МассивПечатныхФорм) Экспорт
	
	Для Каждого ТекФорма Из МассивПечатныхФорм Цикл			
		// создадим коллекцию печатных форм, в которую надо будет добавить нужный нам табличный документ
		КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("МакетТест");    
		// Добавляем в коллекцию (тип массив) сформированный Табличный документ
		КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТекФорма; 
		// если требуется устанавливаем параметры печати
		КоллекцияПечатныхФорм[0].Экземпляров=1;
		КоллекцияПечатныхФорм[0].СинонимМакета = "Макет тест";  // используется для формирования имени файла при сохранении из общей формы печати документов
		// .. и выводим стандартной процедурой БСП
		УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);			
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти
