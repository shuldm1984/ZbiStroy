
#Область Партнеры

&НаСервере
Функция ЗаполнитьКонтрагентаПартнераПоУмолчанию(Знач Партнер) Экспорт
	
	КонтрагентПоУмолчанию = Справочники.Контрагенты.ПустаяСсылка();
	Если ЗначениеЗаполнено(Партнер) Тогда		
		КонтрагентПоУмолчанию = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);				
	КонецЕсли;
	
	Возврат КонтрагентПоУмолчанию;
	
КонецФункции

#КонецОбласти

#Область ЖБИ_ЗаявкиПокупателей

&НаСервере
//Функция ПолучитьЦенуПоИндивидульномуРасчету(Номенклатура,Поставщик) Экспорт
Функция ПолучитьЦенуПоИндивидульномуРасчету(ТаблТоваров) Экспорт
	
	ТаблицаСреднихЦен = Новый ТаблицаЗначений; 
	ТаблицаСреднихЦен.Колонки.Добавить("Поставщик");
	ТаблицаСреднихЦен.Колонки.Добавить("Номенклатура");
	ТаблицаСреднихЦен.Колонки.Добавить("СредняяЦена");
	
	Запрос 	= Новый Запрос; 
	Запрос.УстановитьПараметр("ТаблТоваров",ТаблТоваров);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблТоваров.Номенклатура КАК Номенклатура,
	               |	ТаблТоваров.Поставщик КАК Поставщик
	               |ПОМЕСТИТЬ ТаблЗапросЦен
	               |ИЗ
	               |	&ТаблТоваров КАК ТаблТоваров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблЗапросЦен.Номенклатура КАК Номенклатура,
	               |	ТаблЗапросЦен.Поставщик КАК Поставщик,
	               |	ЖБИ_РасчетИндЦен.Период КАК Период,
	               |	ЕСТЬNULL(ЖБИ_РасчетИндЦен.Цена, 0) КАК Цена
	               |ИЗ
	               |	ТаблЗапросЦен КАК ТаблЗапросЦен
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖБИ_РасчетИндЦен.СрезПоследних(
	               |				,
	               |				Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ТаблЗапросЦен.Номенклатура
	               |						ИЗ
	               |							ТаблЗапросЦен КАК ТаблЗапросЦен)) КАК ЖБИ_РасчетИндЦен
	               |		ПО ТаблЗапросЦен.Номенклатура = ЖБИ_РасчетИндЦен.Номенклатура
	               |			И ТаблЗапросЦен.Поставщик = ЖБИ_РасчетИндЦен.Поставщик
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ
	               |ИТОГИ ПО
	               |	Поставщик,
	               |	Номенклатура";
	ВыборкаПоставщик = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоставщик.Следующий() Цикл
		ВыборкаНоменклатура = ВыборкаПоставщик.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
		Пока ВыборкаНоменклатура.Следующий() Цикл  
			СредняяЦенаСтруктур = Новый Структура("Цена1,Цена2,Цена3,Цена4",0,0,0,0);  
			КолСтрок 		= 0;
			Кратное			= 1;
			Номенклатура 	= Справочники.Номенклатура.ПустаяСсылка();
			ВыборкДетали    = ВыборкаНоменклатура.Выбрать();
			Пока ВыборкДетали.Следующий() Цикл
				Цена 			= ?(ВыборкДетали.Цена = Null,0,ВыборкДетали.Цена);
				Номенклатура 	= ВыборкДетали.Номенклатура;
				Если КолСтрок = 0 Тогда
					СредняяЦенаСтруктур.Цена1 = Цена;
					Кратное = 1;
				ИначеЕсли КолСтрок = 1 Тогда
					СредняяЦенаСтруктур.Цена2 = Цена;
					Кратное = 2;
				ИначеЕсли КолСтрок = 2 Тогда
					СредняяЦенаСтруктур.Цена3 = Цена; 
					Кратное = 3;
				ИначеЕсли КолСтрок = 3 Тогда
					СредняяЦенаСтруктур.Цена4 = Цена;
					Кратное = 4;
				ИначеЕсли КолСтрок >= 4 Тогда 
					Прервать;
				КонецЕсли;			
				КолСтрок = КолСтрок + 1;
			КонецЦикла; 
			НоваяСтр 				= ТаблицаСреднихЦен.Добавить();
			НоваяСтр.Поставщик		= ВыборкаПоставщик.Поставщик;
			НоваяСтр.Номенклатура	= Номенклатура;
			НоваяСтр.СредняяЦена 	= (СредняяЦенаСтруктур.Цена1 + СредняяЦенаСтруктур.Цена2 + СредняяЦенаСтруктур.Цена3 + СредняяЦенаСтруктур.Цена4)/Кратное;
		КонецЦикла;
  	КонецЦикла;
	
	//Цена 			= 0;	
	//Запрос 			= Новый Запрос;
	//Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	//Запрос.УстановитьПараметр("Поставщик",Поставщик);
	//Запрос.Текст	= "ВЫБРАТЬ
	//            	  |	ЖБИ_РасчетИндЦен.Период КАК Период,
	//            	  |	ЕСТЬNULL(ЖБИ_РасчетИндЦен.Цена, 0) КАК Цена
	//            	  |ПОМЕСТИТЬ Табл
	//            	  |ИЗ
	//            	  |	РегистрСведений.ЖБИ_РасчетИндЦен.СрезПоследних(
	//            	  |			,
	//            	  |			Номенклатура = &Номенклатура
	//            	  |				И Поставщик = &Поставщик) КАК ЖБИ_РасчетИндЦен
	//            	  |;
	//            	  |
	//            	  |////////////////////////////////////////////////////////////////////////////////
	//            	  |ВЫБРАТЬ ПЕРВЫЕ 4
	//            	  |	Табл.Период КАК Период,
	//            	  |	ЕСТЬNULL(Табл.Цена, 0) КАК Цена
	//            	  |ПОМЕСТИТЬ ТаблИтоги
	//            	  |ИЗ
	//            	  |	Табл КАК Табл
	//            	  |
	//            	  |УПОРЯДОЧИТЬ ПО
	//            	  |	Период УБЫВ
	//            	  |;
	//            	  |
	//            	  |////////////////////////////////////////////////////////////////////////////////
	//            	  |ВЫБРАТЬ
	//            	  |	ЕСТЬNULL(СРЕДНЕЕ(ТаблИтоги.Цена),0) КАК Цена
	//            	  |ИЗ
	//            	  |	ТаблИтоги КАК ТаблИтоги";	
	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//Если РезультатЗапроса.Следующий() Тогда
	//	Цена = РезультатЗапроса.Цена; 
	//КонецЕсли;

	Возврат ТаблицаСреднихЦен;
	
КонецФункции

&НаСервере
Функция ОтклонитьДокументыОснованияЗаявкиПокупателя(ЗаявкаСсылка, ТекущийДокументРасчета, СообщениеОбОшибке = "") Экспорт
	
	Отказ 	= Ложь;
	
	Запрос 	= Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",ЗаявкаСсылка);
	Запрос.УстановитьПараметр("ТекущийДокументРасчета",ТекущийДокументРасчета);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖБИ_РасчетПлановыхСтавок.Ссылка КАК Ссылка,
	               |	ЖБИ_РасчетПлановыхСтавок.Статус КАК Статус
	               |ИЗ
	               |	Документ.ЖБИ_РасчетПлановыхСтавок КАК ЖБИ_РасчетПлановыхСтавок
	               |ГДЕ
	               |	ЖБИ_РасчетПлановыхСтавок.ДокументОснование = &ДокументОснование
	               |	И ЖБИ_РасчетПлановыхСтавок.Ссылка <> &ТекущийДокументРасчета
	               |	И НЕ ЖБИ_РасчетПлановыхСтавок.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЖБИ_ИндивидуальныеУсловияПоставки.Ссылка,
	               |	ЖБИ_ИндивидуальныеУсловияПоставки.Статус
	               |ИЗ
	               |	Документ.ЖБИ_ИндивидуальныеУсловияПоставки КАК ЖБИ_ИндивидуальныеУсловияПоставки
	               |ГДЕ
	               |	ЖБИ_ИндивидуальныеУсловияПоставки.ДокументОснование = &ДокументОснование
	               |	И ЖБИ_ИндивидуальныеУсловияПоставки.Ссылка <> &ТекущийДокументРасчета
	               |	И НЕ ЖБИ_ИндивидуальныеУсловияПоставки.ПометкаУдаления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЖБИ_ПодтверждениеПлановыхСтавок.Ссылка,
	               |	ЖБИ_ПодтверждениеПлановыхСтавок.Статус
	               |ИЗ
	               |	Документ.ЖБИ_ПодтверждениеПлановыхСтавок КАК ЖБИ_ПодтверждениеПлановыхСтавок
	               |ГДЕ
	               |	ЖБИ_ПодтверждениеПлановыхСтавок.ДокументОснование = &ДокументОснование
	               |	И ЖБИ_ПодтверждениеПлановыхСтавок.Ссылка <> &ТекущийДокументРасчета
	               |	И НЕ ЖБИ_ПодтверждениеПлановыхСтавок.ПометкаУдаления";
	 
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		ДокОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
		ДокОбъект.Статус = Перечисления.ЖБИ_СтатусРасчетаСтавки.НеСогласован;
		Попытка
			ДокОбъект.Записать();	
		Исключение
			СообщениеОбОшибке 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());	
			Отказ 				= Истина;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Функция ПеревестиЗаявкуНаПредварительныйРасчет(ЗаявкаСсылка, СообщениеОбОшибке = "") Экспорт
	
	Отказ 				= Ложь;	
	ДокОбъект			= ЗаявкаСсылка.ПолучитьОбъект();
	ДокОбъект.Статус 	= Перечисления.ЖБИ_СтатусЗаявкиПокупателя.Новый;
	Попытка
		ДокОбъект.Записать();	
	Исключение
		СообщениеОбОшибке 	= ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());	
		Отказ 				= Истина;
	КонецПопытки;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьКомментарийВЧат(Форма, Комментарий) Экспорт
	
	СообщениеОбОшибки 	= "";
	ОбъектСсылка 		= Форма.Объект.Ссылка;
	Если ТипЗнч(ОбъектСсылка) <> Тип("ДокументСсылка.ЖБИ_ЗаявкиПокупателей") Тогда
		ОбъектСсылка = Форма.Объект.ДокументОснование;	
	КонецЕсли;
	
	ТекущийПользователь = Форма.ТекущийПользователь;
	СтруктураЗаписиЧата = Новый Структура("Период,Объект,Ответственный,Комментарий,Ответственный,Автор",ТекущаяДата(),ОбъектСсылка,ТекущийПользователь,Комментарий,ТекущийПользователь);		
	Результат 			= ЖБИ_ОбщийМодульДокументыСервер.ДобавитьКомментарийВЧатСервер(СтруктураЗаписиЧата, СообщениеОбОшибки);
	Если Не Результат Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);	
	КонецЕсли;

	Форма.Элементы.Чат.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогДобавленияКомментарияВЧат(Форма) Экспорт
	
	Объект = Форма.Объект;
	Если Объект.Ссылка.Пустая() Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Необходимо записать документ, перед добавлением комментария в чат");
		Возврат;
	КонецЕсли;
	
	СтруктураСобытия = Новый Структура("ИмяСобытия","ДобавитьКомментарийВЧат");
	ВыбЗнач = "";
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	КЧ = Новый КвалификаторыСтроки(256);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", Форма, СтруктураСобытия);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Укажите комментарий", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЧат(Форма) Экспорт
	
	Форма.Элементы.Чат.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦенуЗакупкиВСтрокеТЧ(ТекущаяСтрока, НаДату = Неопределено)
	
	Если НаДату = Неопределено Тогда
		ДатаЗаписи = ТекущаяДатаСеанса();
	Иначе
		ДатаЗаписи = НаДату;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",ТекущаяСтрока.Поставщик);
	Запрос.УстановитьПараметр("НоменклатураПоставщика",ТекущаяСтрока.НоменклатураПоставщика);
	Запрос.УстановитьПараметр("ДатаЗаписи",ДатаЗаписи);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(ЖБИ_ПрайслистПоставщикаСрезПоследних.Цена, 0) КАК ЦенаПрайсаСНДС,
				   |	ЕСТЬNULL(ЖБИ_СкидкиПоставщика.ПроцентСкидки,0) КАК Скидка
				   |ПОМЕСТИТЬ ТаблИтоги
	               |ИЗ
	               |	РегистрСведений.ЖБИ_ПрайслистПоставщика.СрезПоследних(&ДатаЗаписи, ) КАК ЖБИ_ПрайслистПоставщикаСрезПоследних
				   |	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖБИ_СкидкиПоставщика КАК ЖБИ_СкидкиПоставщика
				   |		ПО ЖБИ_ПрайслистПоставщикаСрезПоследних.НоменклатураПоставщика = ЖБИ_СкидкиПоставщика.НоменклатураПоставщика
	               |ГДЕ
				   |	ЖБИ_ПрайслистПоставщикаСрезПоследних.Партнер = &Партнер
	               |	И ЖБИ_ПрайслистПоставщикаСрезПоследних.НоменклатураПоставщика = &НоменклатураПоставщика
				   |;
				   |ВЫБРАТЬ
				   |	ЦенаПрайсаСНДС - ЦенаПрайсаСНДС*Скидка/100 КАК ЦенаПоставщика
				   |ИЗ
				   |	ТаблИтоги КАК ТаблИтоги";	
					
	ТекущаяСтрока.ЦенаПоставщика = 0;
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда 
		Если ЗначениеЗаполнено(ТекущаяСтрока.Поставщик.ЖБИ_ДатаКонтроляЦены)
			И ТекущаяСтрока.Поставщик.ЖБИ_ДатаКонтроляЦены<ТекущаяДатаСеанса() Тогда 
			//ТекущаяСтрока.ЦенаПоставщика 		= 0;
			ТекущаяСтрока.ЦенаПоставщика 		= РезультатЗапроса.ЦенаПоставщика;
			ТекущаяСтрока.ИндивидуальнаяЦена 	= Истина;
		Иначе 
			ТекущаяСтрока.ЦенаПоставщика = РезультатЗапроса.ЦенаПоставщика;
		КонецЕсли;	
	КонецЕсли;
	
	Если ТекущаяСтрока.ЦенаПоставщика = 0
		ИЛИ ТекущаяСтрока.Поставщик.ЖБИ_ИндивидуальнаяЦена Тогда
		ТекущаяСтрока.ИндивидуальнаяЦена = Истина;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьЦенуПоставщикаСервер(НомСтрТЧ) Экспорт
	
	ЗаполнитьЦенуЗакупкиВСтрокеТЧ(НомСтрТЧ);		
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьСтавкиТЧЗаявки(ТаблицаРасчет, СтруктураПараметров) Экспорт
	
	//Если СтруктураПараметров.Свойство("Поставщик")
	//	И ЗначениеЗаполнено(СтруктураПараметров.Поставщик) Тогда 
	НайденныеСтроки = ТаблицаРасчет.НайтиСтроки(Новый Структура("КодСтроки,Номенклатура,Поставщик,Негабаритный",СтруктураПараметров.КодСтроки,СтруктураПараметров.Номенклатура,СтруктураПараметров.Поставщик,СтруктураПараметров.Негабаритный));
	//Иначе 
	//	НайденныеСтроки = ТаблицаРасчет.НайтиСтроки(Новый Структура("Номенклатура",СтруктураПараметров.Номенклатура));
	//КонецЕсли;
	Если НайденныеСтроки.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;

	УкрупненнаяСтавка = 0;
	Если СтруктураПараметров.Свойство("УкрупненнаяСтавка")
		И ЗначениеЗаполнено(СтруктураПараметров.УкрупненнаяСтавка) Тогда
		УкрупненнаяСтавка = СтруктураПараметров.УкрупненнаяСтавка;
	КонецЕсли;
	 
	Для Каждого НомСтр Из НайденныеСтроки Цикл
		ПунктОтгрузки = НомСтр.ПунктОтгрузки;	
		СтруктураЗапроса = Новый Структура("ПунктНазначения,ПунктОтгрузки,Негабаритный",СтруктураПараметров.ПунктНазначения,ПунктОтгрузки,СтруктураПараметров.Негабаритный);
		НомСтр.УкрупненнаяСтавка = Документы.ЖБИ_ЗаявкиПокупателей.ПолучитьАктуальнуюРасчетнуюСтавку(СтруктураЗапроса);
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПредварительнуюРасчетнуюСтавку(СтруктураЗапроса) Экспорт
	
	СтруктураПредварительнаяСтавкаРезультат = Новый Структура("Ставка,Расстояние",0,0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПунктОтгрузки",СтруктураЗапроса.ПунктОтгрузки);
	Запрос.УстановитьПараметр("Регион",СтруктураЗапроса.Регион);
	//Запрос.УстановитьПараметр("Город",СтруктураЗапроса.Город);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЖБИ_РасчетПредварительныхСтавок.Ставка КАК Ставка,
	               |	ЖБИ_РасчетПредварительныхСтавок.Расстояние КАК Расстояние
	               |ИЗ
	               |	РегистрСведений.ЖБИ_РасчетПредварительныхСтавок КАК ЖБИ_РасчетПредварительныхСтавок
	               |ГДЕ
	               |	ЖБИ_РасчетПредварительныхСтавок.ПунктОтгрузки = &ПунктОтгрузки
	               |	И ЖБИ_РасчетПредварительныхСтавок.Регион = &Регион";
	               //|	И ЖБИ_РасчетПредварительныхСтавок.Город = &Город";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		СтруктураПредварительнаяСтавкаРезультат.Ставка 		= РезультатЗапроса.Ставка;
		СтруктураПредварительнаяСтавкаРезультат.Расстояние 	= РезультатЗапроса.Расстояние;
	КонецЕсли;
	 	
	Возврат СтруктураПредварительнаяСтавкаРезультат;	
	
КонецФункции

&НаСервере
Процедура РасчитатьПредварительныеСтавкиТЧЗаявки(ТаблицаРасчет, СтруктураПараметров) Экспорт
	
	НайденныеСтроки = ТаблицаРасчет.НайтиСтроки(Новый Структура("КодСтроки,Номенклатура",СтруктураПараметров.КодСтроки, СтруктураПараметров.Номенклатура));
	Если НайденныеСтроки.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;
	
	//ПунктОтгрузки = "";
	Для Каждого НомСтр Из НайденныеСтроки Цикл
		//Если ПунктОтгрузки = "" Тогда 
		//	ПунктОтгрузки = НомСтр.ПунктОтгрузки;	
		//КонецЕсли;
		СтруктураЗапроса = Новый Структура("ПунктОтгрузки,Регион,Город",НомСтр.ПунктОтгрузки,СтруктураПараметров.ПунктНазначения.Регион,СтруктураПараметров.ПунктНазначения.Город);
		СтруктураПредварительнаяСтавкаРезультат = ПолучитьПредварительнуюРасчетнуюСтавку(СтруктураЗапроса);
		НомСтр.ПредварительнаяСтавка = СтруктураПредварительнаяСтавкаРезультат.Ставка;
		НомСтр.Расстояние 			 = СтруктураПредварительнаяСтавкаРезультат.Расстояние;
	КонецЦикла;	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДопЗатратыНаМатериалыПоЗаявке(СсылкаЗаявка,Поставщик,Негабаритный) Экспорт
	
	СоответствиеДопЗатратыНаМатериалы = Новый Структура("ДопЗатратыНаМатериалы",0);
	Если Не ЗначениеЗаполнено(СсылкаЗаявка.Ссылка) Тогда 
		Возврат СоответствиеДопЗатратыНаМатериалы;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",СсылкаЗаявка);
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	Запрос.УстановитьПараметр("Негабаритный",Негабаритный);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЖБИ_РасчетПлановыхСтавок.Партнер КАК Поставщик,
	               |	ЕСТЬNULL(ЖБИ_РасчетПлановыхСтавок.ДопЗатратыНаМатериалы, 0) КАК ДопЗатратыНаМатериалы
				   |ИЗ
	               |	Документ.ЖБИ_РасчетПлановыхСтавок КАК ЖБИ_РасчетПлановыхСтавок
	               |ГДЕ
	               |	ЖБИ_РасчетПлановыхСтавок.ДокументОснование = &Ссылка
	               |	И ЖБИ_РасчетПлановыхСтавок.Партнер = &Поставщик
				   |	И ЖБИ_РасчетПлановыхСтавок.Негабаритный = &Негабаритный
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЖБИ_РасчетПлановыхСтавок.Партнер,
	               |	ЕСТЬNULL(ЖБИ_РасчетПлановыхСтавок.ДопЗатратыНаМатериалы, 0)";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого НомСтр Из РезультатЗапроса Цикл 
		СоответствиеДопЗатратыНаМатериалы.ДопЗатратыНаМатериалы = НомСтр.ДопЗатратыНаМатериалы;	
	КонецЦикла;
	
	Возврат СоответствиеДопЗатратыНаМатериалы;
	
КонецФункции

&НаСервере
Функция ПолучитьДопЗатратыНаХвостПоЗаявке(СсылкаЗаявка,Поставщик,Негабаритный) Экспорт
	
	ДопЗатратыНаХвост = Новый Структура("ДопЗатратыНаХвост",0);
	Если не ЗначениеЗаполнено(СсылкаЗаявка.Ссылка) Тогда 
		Возврат ДопЗатратыНаХвост;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",СсылкаЗаявка);
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	Запрос.УстановитьПараметр("Негабаритный",Негабаритный);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЖБИ_ПодтверждениеПлановыхСтавок.Партнер КАК Поставщик,
	               |	ЕСТЬNULL(ЖБИ_ПодтверждениеПлановыхСтавок.ДопЗатратыНаХвост, 0) КАК ДопЗатратыНаХвост
	               |ИЗ
	               |	Документ.ЖБИ_ПодтверждениеПлановыхСтавок КАК ЖБИ_ПодтверждениеПлановыхСтавок
	               |ГДЕ
	               |	ЖБИ_ПодтверждениеПлановыхСтавок.ДокументОснование = &Ссылка
	               |	И ЖБИ_ПодтверждениеПлановыхСтавок.Партнер = &Поставщик
				   |	И ЖБИ_ПодтверждениеПлановыхСтавок.Негабаритный = &Негабаритный
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЖБИ_ПодтверждениеПлановыхСтавок.Партнер,
	               |	ЕСТЬNULL(ЖБИ_ПодтверждениеПлановыхСтавок.ДопЗатратыНаХвост, 0)";
				   
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого НомСтр Из РезультатЗапроса Цикл 
		ДопЗатратыНаХвост.ДопЗатратыНаХвост = НомСтр.ДопЗатратыНаХвост;	
	КонецЦикла;
	
	Возврат ДопЗатратыНаХвост;
	
КонецФункции

&НаСервере
Функция ПолучитьДопРсходыЗа1Рейс(СсылкаЗаявка,Поставщик,Негабаритный) Экспорт
	
	ДопРсходыЗа1Рейс = Новый Структура("ДопРсходыЗа1Рейс",0);
	Если не ЗначениеЗаполнено(СсылкаЗаявка.Ссылка) Тогда 
		Возврат ДопРсходыЗа1Рейс;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",СсылкаЗаявка);
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	Запрос.УстановитьПараметр("Негабаритный",Негабаритный);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЖБИ_ПодтверждениеПлановыхСтавок.Партнер КАК Поставщик,
	               |	ЕСТЬNULL(ЖБИ_ПодтверждениеПлановыхСтавок.ДопРасходы, 0) КАК ДопРсходыЗа1Рейс
	               |ИЗ
	               |	Документ.ЖБИ_ПодтверждениеПлановыхСтавок КАК ЖБИ_ПодтверждениеПлановыхСтавок
	               |ГДЕ
	               |	ЖБИ_ПодтверждениеПлановыхСтавок.ДокументОснование = &Ссылка
	               |	И ЖБИ_ПодтверждениеПлановыхСтавок.Партнер = &Поставщик
				   |	И ЖБИ_ПодтверждениеПлановыхСтавок.Негабаритный = &Негабаритный
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЖБИ_ПодтверждениеПлановыхСтавок.Партнер,
	               |	ЕСТЬNULL(ЖБИ_ПодтверждениеПлановыхСтавок.ДопРасходы, 0)";
				   
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого НомСтр Из РезультатЗапроса Цикл 
		ДопРсходыЗа1Рейс.ДопРсходыЗа1Рейс = НомСтр.ДопРсходыЗа1Рейс;	
	КонецЦикла;
	
	Возврат ДопРсходыЗа1Рейс;
	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоТранспортаИНормуАвтоПоЗаявке(СсылкаЗаявка,Поставщик,ТаблицаРасчет,ТаблицаКонтроль,Негабаритный) Экспорт
	
	КоличествоТранспорта = 0;
	НормаАвто = 0;	
	Если ТаблицаКонтроль.Количество()>0 Тогда
		СтруктураОтбора = Новый Структура("Поставщик,Негабаритный",Поставщик,Негабаритный);
		НайденныеСтроки = ТаблицаКонтроль.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда 
			КоличествоТранспорта 	= НайденныеСтроки[0].КоличествоТранспорта;
			НормаАвто 				= НайденныеСтроки[0].НормаАвто;
		КонецЕсли;
	Иначе 
		СтруктураОтбора = Новый Структура("Пометка,Поставщик,Негабаритный",Истина,Поставщик,Негабаритный);
		НайденныеСтроки = ТаблицаРасчет.НайтиСтроки(СтруктураОтбора);
		Для Каждого НомСтр Из НайденныеСтроки Цикл 
			КолРейсов = ?(НомСтр.НормаАвто = 0,0,НомСтр.Количество/НомСтр.НормаАвто);
			КоличествоТранспорта 			= КолРейсов;
			НормаАвто 						= КолРейсов;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура("КоличествоТранспорта,НормаАвто",КоличествоТранспорта,НормаАвто);
	Возврат СтруктураРезультат;	
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуРасчетаПоЗаявке(СсылкаЗаявка,ТаблицаРасчет,ТаблицаКонтроль) Экспорт

	
	ТаблПоставщиков = ТаблицаРасчет.Скопировать();
	ТаблПоставщиков.Свернуть("Поставщик,Негабаритный");

	ТаблицаПараметровРасчетаПоставщика = Новый ТаблицаЗначений;
	ТаблицаПараметровРасчетаПоставщика.Колонки.Добавить("Поставщик");
	ТаблицаПараметровРасчетаПоставщика.Колонки.Добавить("Негабаритный");
	ТаблицаПараметровРасчетаПоставщика.Колонки.Добавить("ПроцентНаценкиВДокументе");
	ТаблицаПараметровРасчетаПоставщика.Колонки.Добавить("КоличествоТранспорта");
	ТаблицаПараметровРасчетаПоставщика.Колонки.Добавить("НормаАвто");
	ТаблицаПараметровРасчетаПоставщика.Колонки.Добавить("ПроценНаценкиНаПоставщика");
	ТаблицаПараметровРасчетаПоставщика.Колонки.Добавить("ПовышающийПроцент");
	ТаблицаПараметровРасчетаПоставщика.Колонки.Добавить("ДопЗатратыНаМатериалы");
	ТаблицаПараметровРасчетаПоставщика.Колонки.Добавить("ДопЗатратыНаХвост");
	ТаблицаПараметровРасчетаПоставщика.Колонки.Добавить("ДопРсходыЗа1Рейс");
	
	//1 Заполним основные параметры расчета
	Для Каждого НомСтр Из ТаблПоставщиков Цикл 
		
		НоваяСтр 							= ТаблицаПараметровРасчетаПоставщика.Добавить();
		НоваяСтр.Поставщик					= НомСтр.Поставщик;
		НоваяСтр.Негабаритный				= НомСтр.Негабаритный;
		НоваяСтр.ПроцентНаценкиВДокументе 	= СсылкаЗаявка.ПроцентНаценки;
		СтруктураРезультат 					= ПолучитьКоличествоТранспортаИНормуАвтоПоЗаявке(СсылкаЗаявка,НомСтр.Поставщик,ТаблицаРасчет,ТаблицаКонтроль,НомСтр.Негабаритный);
		НоваяСтр.КоличествоТранспорта 		= СтруктураРезультат.КоличествоТранспорта;
		НоваяСтр.НормаАвто 					= СтруктураРезультат.НормаАвто;
		СтруктураОтбора 					= Новый Структура("Партнер",НомСтр.Поставщик);
		СтруктураПараметрыЦенообразования 	= РегистрыСведений.ЖБИ_ПараметрыЦенообразования.ПолучитьПараметрыЦенообразования(СтруктураОтбора);
		НоваяСтр.ПроценНаценкиНаПоставщика 	= СтруктураПараметрыЦенообразования.ПроцентНаценки;
		НоваяСтр.ПовышающийПроцент 			= СтруктураПараметрыЦенообразования.ПовышающийПроцент;
		
		СтруктураДопЗатратыНаМатериалы		= ПолучитьДопЗатратыНаМатериалыПоЗаявке(СсылкаЗаявка,НомСтр.Поставщик,НомСтр.Негабаритный);
		НоваяСтр.ДопЗатратыНаМатериалы 		= СтруктураДопЗатратыНаМатериалы.ДопЗатратыНаМатериалы;
		
		СтруктураДопЗатратыНаХвост			= ПолучитьДопЗатратыНаХвостПоЗаявке(СсылкаЗаявка,НомСтр.Поставщик,НомСтр.Негабаритный); 
		НоваяСтр.ДопЗатратыНаХвост 			= СтруктураДопЗатратыНаХвост.ДопЗатратыНаХвост;
		
		СтруктураДопРсходыЗа1Рейс			= ПолучитьДопРсходыЗа1Рейс(СсылкаЗаявка,НомСтр.Поставщик,НомСтр.Негабаритный);
		НоваяСтр.ДопРсходыЗа1Рейс 			= СтруктураДопРсходыЗа1Рейс.ДопРсходыЗа1Рейс;
		
	КонецЦикла;
	
	Возврат ТаблицаПараметровРасчетаПоставщика; 
	
КонецФункции

&НаСервере
Процедура РасчитатьСтоимость(СсылкаЗаявка,ТаблицаРасчет,ТаблицаКонтроль,ОкончательныйРасчет = Ложь, ВыделитьДоставку = Ложь) Экспорт 
	
	ТаблицаПараметровРасчетаПоставщика = ПолучитьТаблицуРасчетаПоЗаявке(СсылкаЗаявка,ТаблицаРасчет,ТаблицаКонтроль);
	//ПараметрыРасчетаЦенПоставщика = Новый Соответствие;
	//Для Каждого НомСтр Из ТаблицаПараметровРасчетаПоставщика Цикл
	//	ПараметрыРасчетаЦенПоставщика.Вставить(НомСтр.Поставщик,НомСтр);	
	//КонецЦикла;
	
	ТаблицаТовары = ТаблицаРасчет.Скопировать();
	ТаблицаТовары.Свернуть("Поставщик,Номенклатура");
	ТаблицаСреднихЦен = ПолучитьЦенуПоИндивидульномуРасчету(ТаблицаТовары);
	
	ЕстьПредварительнаяСтавка = Ложь;
	Если ТаблицаРасчет.Колонки.Найти("ПредварительнаяСтавка") <> Неопределено Тогда
		ЕстьПредварительнаяСтавка = Истина;	
	КонецЕсли;

	Для Каждого НомСтр Из ТаблицаРасчет Цикл		
		//ПараметрыРасчета = ПараметрыРасчетаЦенПоставщика.Получить(НомСтр.Поставщик);
		//Если ПараметрыРасчета = Неопределено Тогда 
		//	Продолжить;
		//КонецЕсли;
		НайденныеСтроки = ТаблицаПараметровРасчетаПоставщика.НайтиСтроки(Новый Структура("Поставщик,Негабаритный",НомСтр.Поставщик,НомСтр.Негабаритный));
		Если НайденныеСтроки.Количество()=0 Тогда 
			Продолжить;
		КонецЕсли;
		
		//Если НомСтр.Количество=0 Тогда 
		//	Продолжить;
		//КонецЕсли;
		
		ПараметрыРасчета 				    = НайденныеСтроки[0];
		
		//Блок образования цены +
		ОбщиеКоличествоТранспорта			= ПараметрыРасчета.КоличествоТранспорта;
		ОбщиеНормаАвто						= ПараметрыРасчета.НормаАвто;
		НомСтр.КоличествоРейсов 			= ?(НомСтр.НормаАвто = 0,0,НомСтр.Количество/НомСтр.НормаАвто);

		//Доп. затраты на материалы, на 1 а/м
		ЦенаПоставщикаСНаценкой 			= (НомСтр.ЦенаПоставщика*ПараметрыРасчета.ПроценНаценкиНаПоставщика/100)+НомСтр.ЦенаПоставщика;
		ДопЗатратыНаМатериалы				= ?(НомСтр.НормаАвто = 0 ИЛИ НомСтр.Количество = 0 ИЛИ ОбщиеНормаАвто = 0,0,((ПараметрыРасчета.ДопЗатратыНаМатериалы*(НомСтр.КоличествоРейсов/ОбщиеНормаАвто))/НомСтр.Количество)*ОбщиеКоличествоТранспорта);
		НомСтр.ДопЗатратыНаМатериалы        = (ДопЗатратыНаМатериалы*ПараметрыРасчета.ПроценНаценкиНаПоставщика/100)+ДопЗатратыНаМатериалы;
		ЦенаСДопЗатратамиНаМатериалы 		= ЦенаПоставщикаСНаценкой + НомСтр.ДопЗатратыНаМатериалы;
		
		Если ЕстьПредварительнаяСтавка
			И НЕ ОкончательныйРасчет Тогда
			Ставка = НомСтр.ПредварительнаяСтавка;
		Иначе 
			Ставка = НомСтр.УкрупненнаяСтавка;
		КонецЕсли;
		
		//Затраты на транспортировку на 1 изделие
		ЗатратыНаТранспортировку 			= ?(НомСтр.НормаАвто = 0,0,Ставка/НомСтр.НормаАвто);
		НомСтр.ЗатратыНаТранспортировку     =  (ЗатратыНаТранспортировку*ПараметрыРасчета.ПовышающийПроцент/100)+ЗатратыНаТранспортировку;
		
		//Доп. затраты на хвост
		ОбщиеДопЗатрНаХвост					= ПараметрыРасчета.ДопЗатратыНаХвост;
		ДопЗатрНаХвост						= ?(НомСтр.НормаАвто = 0 ИЛИ НомСтр.Количество = 0 ИЛИ ОбщиеНормаАвто = 0,0,(ОбщиеДопЗатрНаХвост*(НомСтр.КоличествоРейсов/ОбщиеНормаАвто))/НомСтр.Количество);
		НомСтр.ДопЗатрНаХвост     			=  (ДопЗатрНаХвост*ПараметрыРасчета.ПовышающийПроцент/100)+ДопЗатрНаХвост;
		
		//Доп. затраты согласованное кол-во
		РазницаВКолвоРейсов 				= ОбщиеКоличествоТранспорта - ОбщиеНормаАвто;
		СогласнованноеКоличествоАМ			= ?(НомСтр.Количество = 0 ИЛИ ОбщиеНормаАвто = 0,0,((РазницаВКолвоРейсов*НомСтр.УкрупненнаяСтавка)*(НомСтр.КоличествоРейсов/ОбщиеНормаАвто))/НомСтр.Количество);
		НомСтр.СогласнованноеКоличествоАМ   = (СогласнованноеКоличествоАМ*ПараметрыРасчета.ПовышающийПроцент/100)+СогласнованноеКоличествоАМ;
		
		//Доп. затр. 1 рейс
		НомСтр.ДопРасходы					= ?(НомСтр.НормаАвто = 0 ИЛИ НомСтр.Количество = 0 ИЛИ ОбщиеНормаАвто = 0,0,((ПараметрыРасчета.ДопРсходыЗа1Рейс*(НомСтр.КоличествоРейсов/ОбщиеНормаАвто))/НомСтр.Количество)*ОбщиеКоличествоТранспорта);		
	    Если ВыделитьДоставку Тогда 
			//Транспортная наценка на изделние - сам транспорт 
			ТранспортнаяНаценка				= НомСтр.ЗатратыНаТранспортировку + НомСтр.СогласнованноеКоличествоАМ + НомСтр.ДопЗатрНаХвост + НомСтр.ДопРасходы;
			КоэфПовышПроцент				= 1 +(ПараметрыРасчета.ПовышающийПроцент/100);
			ВсегоЗатрат						= ТранспортнаяНаценка - (ТранспортнаяНаценка/КоэфПовышПроцент); 
		Иначе 
			ВсегоЗатрат						= НомСтр.ЗатратыНаТранспортировку + НомСтр.СогласнованноеКоличествоАМ + НомСтр.ДопЗатрНаХвост + НомСтр.ДопРасходы;
		КонецЕсли;
						
		//Блок образования цены -		
		ЦенаСНедогрузом						= ЦенаСДопЗатратамиНаМатериалы + ВсегоЗатрат;
		НомСтр.Цена							= ?(НомСтр.ЦенаПоставщика = 0,0,ЦенаСНедогрузом * ПараметрыРасчета.ПроцентНаценкиВДокументе + ЦенаСНедогрузом);
		Если ЕстьПредварительнаяСтавка
			И НЕ ОкончательныйРасчет Тогда
			НомСтр.ПредвЦенаПоПрайсу		= НомСтр.Цена;
			
			НайденныеСтроки 				= ТаблицаСреднихЦен.НайтиСтроки(Новый Структура("Поставщик,Номенклатура",НомСтр.Поставщик,НомСтр.Номенклатура));
			Если НайденныеСтроки.Количество()>0 Тогда
				ЦенаПоИндРасчетуСредняя		= НайденныеСтроки[0].СредняяЦена;	
			Иначе 
				ЦенаПоИндРасчетуСредняя     = 0;	
			КонецЕсли;
			ЦенаПоИндРасчетуПлюсНаценка		= (ЦенаПоИндРасчетуСредняя*ПараметрыРасчета.ПроценНаценкиНаПоставщика/100)+ЦенаПоИндРасчетуСредняя;
			ЦенаПоИндРасчету				= ЦенаПоИндРасчетуПлюсНаценка + НомСтр.ЗатратыНаТранспортировку;
			НомСтр.ПредвЦенаПоИндРасчету	= ?(ЦенаПоИндРасчету = 0,0,ЦенаПоИндРасчету * ПараметрыРасчета.ПроцентНаценкиВДокументе + ЦенаПоИндРасчету);
			Если НомСтр.ПредварительнаяСтавка = 0 Тогда
				НомСтр.ПредвЦенаПоПрайсу 		= 0;
				НомСтр.ПредвЦенаПоИндРасчету 	= 0;
			КонецЕсли;
		КонецЕсли;
		
		НомСтр.ЦенаПриПолнойЗагрузки		= ЦенаСДопЗатратамиНаМатериалы + НомСтр.ЗатратыНаТранспортировку;		
		НомСтр.Сумма 						= НомСтр.Цена*НомСтр.Количество;
		НомСтр.ОбщийВес 					= НомСтр.Вес*НомСтр.Количество;
		НомСтр.ОбщийОбъем 					= НомСтр.Объем*НомСтр.Количество;	
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти


#Область Карты

&НаКлиенте
Процедура ОткрытьНавигационнуюСсылкуЯндекс(АдресОткуда,АдресКуда) Экспорт
	
	//АдресОткуда		= ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Объект.ПунктОтгрузки,"Адрес").Адрес;
	//АдресКуда 		= ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(Объект.ПунктНазначения,"Адрес").Адрес;	
	
	СтрокаЗапуска = "https://maps.yandex.ru/?rtext=" + АдресОткуда + "~" + АдресКуда;
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СтрокаЗапуска);	
	
КонецПроцедуры


#КонецОбласти