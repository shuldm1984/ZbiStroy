
&Вместо("ДобавитьФайл")
Функция ЖБИ_ДобавитьФайл(ПараметрыФайла, Знач АдресФайлаВоВременномХранилище, Знач АдресВременногоХранилищаТекста, Знач Описание, Знач НоваяСсылкаНаФайл)
	
	Если СтрНайти(ПараметрыФайла.ВладелецФайлов.Метаданные().Имя,"ЖБИ")=0 Тогда
		Результат = ПродолжитьВызов(ПараметрыФайла, АдресФайлаВоВременномХранилище, АдресВременногоХранилищаТекста, Описание, НоваяСсылкаНаФайл);
		Возврат Результат;
	КонецЕсли;
	
	ВладелецФайлов     = ПараметрыФайла.ВладелецФайлов;
	ИмяБезРасширения   = ПараметрыФайла.ИмяБезРасширения;
	РасширениеБезТочки = ПараметрыФайла.РасширениеБезТочки;
	
	Если Не ЗначениеЗаполнено(ВладелецФайлов) Тогда
		ВызватьИсключение НСтр("ru = 'Не задано значение параметра ПараметрыФайла.ВладелецФайлов в РаботаСФайлами.ДобавитьФайл.'");
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайлами.ДобавитьФайл",
		"АдресФайлаВоВременномХранилище", ДвоичныеДанные, Тип("ДвоичныеДанные"));
	
	ГруппаФайлов = Неопределено;
	Если ПараметрыФайла.Свойство("ГруппаФайлов")
		И ЗначениеЗаполнено(ПараметрыФайла.ГруппаФайлов)
		И Не РаботаСФайламиСлужебный.ЭтоПапкаФайлов(ВладелецФайлов) Тогда
		
		ГруппаФайлов = ПараметрыФайла.ГруппаФайлов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РасширениеБезТочки) Тогда
		ЧастиИмениФайла = СтрРазделить(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество() - 1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки) + 1));
		КонецЕсли;
	КонецЕсли;
	
	ВремяИзмененияУниверсальное = ПараметрыФайла.ВремяИзмененияУниверсальное;
	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
		Или ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении присоединенного файла.'");
	
	Если НоваяСсылкаНаФайл = Неопределено Тогда
		ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов, "", ЗаголовокОшибки,
			НСтр("ru = 'В этом случае параметр ""НоваяСсылкаНаФайл"" должен быть указан.'"));
		
		НоваяСсылкаНаФайл = Справочники[ИмяСправочника].ПолучитьСсылку();
	Иначе
		
		Если Не Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НоваяСсылкаНаФайл))
			Или Не ЗначениеЗаполнено(НоваяСсылкаНаФайл) Тогда
			
			ВызватьИсключение НСтр("ru = 'Ошибка при добавлении присоединенного файла.
				|Ссылка на новый файл не заполнена.'");
		КонецЕсли;
		
		ИмяСправочника = РаботаСФайламиСлужебный.ИмяСправочникаХраненияФайлов(
			ВладелецФайлов, НоваяСсылкаНаФайл.Метаданные().Имя, ЗаголовокОшибки);
		
	КонецЕсли;
	
	ХранитьВерсии = РаботаСФайламиСлужебныйВызовСервера.ЭтоСправочникФайлы(ВладелецФайлов);
	
	ПрисоединенныйФайл = Справочники[ИмяСправочника].СоздатьЭлемент(); // ОпределяемыйТип.ПрисоединенныйФайлОбъект
	ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание                     = Описание;
	ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
	ПрисоединенныйФайл.ТипХраненияФайла             = РаботаСФайламиСлужебный.ТипХраненияФайлов();
	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
	ПрисоединенныйФайл.Изменил                      = ПараметрыФайла.Автор;
	ПрисоединенныйФайл.ХранитьВерсии                = ХранитьВерсии;
	
	Если ГруппаФайлов <> Неопределено Тогда
		ПрисоединенныйФайл.Родитель = ГруппаФайлов;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПрисоединенныйФайл, ПараметрыФайла);
	
	ПрисоединенныйФайл.Том        = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	ПрисоединенныйФайл.ПутьКФайлу = "";
	ПрисоединенныйФайл.Заполнить(Неопределено);
	
	ИспользованиеПолнотекстовогоПоиска = Метаданные.СвойстваОбъектов.ИспользованиеПолнотекстовогоПоиска.Использовать;
	ИзвлекатьТекст = Метаданные.Справочники[ИмяСправочника].ПолнотекстовыйПоиск = ИспользованиеПолнотекстовогоПоиска;
	
	Если ИзвлекатьТекст Тогда
		
		РезультатИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(АдресВременногоХранилищаТекста,
			ДвоичныеДанные, ПрисоединенныйФайл.Расширение);
		
		ПрисоединенныйФайл.ТекстХранилище = РезультатИзвлеченияТекста.ТекстХранилище;
		ПрисоединенныйФайл.СтатусИзвлеченияТекста = РезультатИзвлеченияТекста.СтатусИзвлеченияТекста;
		
	Иначе
		ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения("");
		ПрисоединенныйФайл.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;
	
	СохраняетсяПредварительноНаДиск = Ложь;
	Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		СохраняетсяПредварительноНаДиск = (РаботаСФайламиВТомахСлужебный.ТипХраненияФайла(РасширениеБезТочки, ПрисоединенныйФайл.Размер) = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске);
		// Сохранение файла на диск выполняется вне транзакции
		Если СохраняетсяПредварительноНаДиск Тогда
			
			УстановитьОтключениеБезопасногоРежима(Истина);
			РаботаСФайламиВТомахСлужебный.ДобавитьФайл(ПрисоединенныйФайл, ДвоичныеДанные);
			УстановитьОтключениеБезопасногоРежима(Ложь);
			
		КонецЕсли;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Если Не ЗначениеЗаполнено(ПрисоединенныйФайл.Изменил) Тогда
			ПрисоединенныйФайл.Изменил = Пользователи.АвторизованныйПользователь();
		КонецЕсли;
		
		ПрисоединенныйФайл.Записать();
		
		Если РаботаСФайламиСлужебныйВызовСервера.ЭтоСправочникФайлы(ВладелецФайлов) Тогда
			
			// Файлы с поддержкой версий
			Если СохраняетсяПредварительноНаДиск Тогда
				АдресФайлаВоВременномХранилище = РаботаСФайламиВТомахСлужебный.ПолноеИмяФайлаВТоме(ПрисоединенныйФайл);
				ИсходныйФайл = Новый Файл(АдресФайлаВоВременномХранилище);
				СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", ИсходныйФайл);
			Иначе
				СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
				СведенияОФайле.РасширениеБезТочки = РасширениеБезТочки;
				СведенияОФайле.ИмяБезРасширения   = ИмяБезРасширения;
				СведенияОФайле.Размер             = ПрисоединенныйФайл.Размер;
			КонецЕсли;
			
			СведенияОФайле.АдресВременногоХранилищаФайла   = АдресФайлаВоВременномХранилище;
			СведенияОФайле.АдресВременногоХранилищаТекста  = АдресВременногоХранилищаТекста;
			СведенияОФайле.ЗаписатьВИсторию                = Истина;
			
			Версия = РаботаСФайламиСлужебный.СоздатьВерсию(ПрисоединенныйФайл.Ссылка, СведенияОФайле);
			РаботаСФайламиСлужебный.ОбновитьВерсиюВФайле(ПрисоединенныйФайл.Ссылка, Версия, АдресВременногоХранилищаТекста);
			
		Иначе
			
			// Присоединенные файлы без версий
			Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				ЖБИ_ОбщийМодульКлиентСервер.ЗаписатьФайлВИнформационнуюБазу(ПрисоединенныйФайл.Ссылка, ДвоичныеДанные);
			Иначе
				Если Не СохраняетсяПредварительноНаДиск Тогда
					
					УстановитьОтключениеБезопасногоРежима(Истина);
					РаботаСФайламиВТомахСлужебный.ДобавитьФайл(ПрисоединенныйФайл, ДвоичныеДанные);
					УстановитьОтключениеБезопасногоРежима(Ложь);
					
				КонецЕсли;
				
			КонецЕсли;
			ПрисоединенныйФайл.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
			|%2'");
		КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Добавление присоединенного файла'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			КомментарийЖурналаРегистрации);
			
		Если СохраняетсяПредварительноНаДиск Тогда
			РаботаСФайламиВТомахСлужебный.УдалитьФайл(РаботаСФайламиВТомахСлужебный.ПолноеИмяФайлаВТоме(ПрисоединенныйФайл));
		КонецЕсли;
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			
	КонецПопытки;
	
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции

&Вместо("ДвоичныеДанныеФайла")
Функция ЖБИ_ДвоичныеДанныеФайла(Знач ПрисоединенныйФайл, Знач ВызыватьИсключение)
	
	Если СтрНайти(ПрисоединенныйФайл.ВладелецФайла.Метаданные().Имя,"ЖБИ")=0 Тогда
		Результат = ПродолжитьВызов(ПрисоединенныйФайл, ВызыватьИсключение);
		Возврат Результат;
	КонецЕсли;
	
	//ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайлами.ДвоичныеДанныеФайла", "ПрисоединенныйФайл", 
	//	ПрисоединенныйФайл, Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип);
	
	ФайлОбъект = РаботаСФайламиСлужебный.ФайлОбъект(ПрисоединенныйФайл);
	Если ФайлОбъект = Неопределено
		И Не ВызыватьИсключение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		Результат = ХранилищеФайлаИзИнформационнойБазы(ФайлОбъект.Ссылка);
		Если Результат <> Неопределено Тогда
			Возврат Результат.Получить();
		ИначеЕсли Не ВызыватьИсключение Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Запись в журнал регистрации.
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Двоичные данные файла отсутствуют в регистре ДвоичныеДанныеФайлов.
			           |Файл: ""%1"".'"),
			ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Открытие файла'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
			ПрисоединенныйФайл,
			СообщениеОбОшибке);
		
		ПредставлениеВладельцаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Присоединен к %1 : %2'"),
				Строка(ТипЗнч(ФайлОбъект.ВладелецФайла)),
				ФайлОбъект.ВладелецФайла);
		
		ВызватьИсключение РаботаСФайламиСлужебный.ОшибкаФайлНеНайденВХранилищеФайлов(
			ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение,
			Ложь,
			ПредставлениеВладельцаФайла);
	Иначе
		Возврат РаботаСФайламиВТомахСлужебный.ДанныеФайла(ПрисоединенныйФайл, ВызыватьИсключение);
	КонецЕсли;
		
КонецФункции

&Вместо("ХранилищеФайлаИзИнформационнойБазы")
Функция ЖБИ_ХранилищеФайлаИзИнформационнойБазы(ФайлСсылка)

	Если СтрНайти(ФайлСсылка.ВладелецФайла.Метаданные().Имя,"ЖБИ")=0 Тогда
		Результат = ПродолжитьВызов(ФайлСсылка);
		Возврат Результат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвоичныеДанныеФайлов.Файл,
	|	ДвоичныеДанныеФайлов.ДвоичныеДанныеФайла
	|ИЗ
	|	РегистрСведений.ЖБИ_ДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
	|ГДЕ
	|	ДвоичныеДанныеФайлов.Файл = &ФайлСсылка";
	
	Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ДвоичныеДанныеФайла, Неопределено);
	
КонецФункции

&Вместо("ДанныеФайла")
Функция ЖБИ_ДанныеФайла(Знач ПрисоединенныйФайл, Знач ДополнительныеПараметры, Знач УдалитьПолучатьСсылкуНаДвоичныеДанные, Знач УдалитьДляРедактирования)
	
	Если СтрНайти(ПрисоединенныйФайл.ВладелецФайла.Метаданные().Имя,"ЖБИ")=0 Тогда
		Результат = ПродолжитьВызов(ПрисоединенныйФайл, ДополнительныеПараметры, УдалитьПолучатьСсылкуНаДвоичныеДанные, УдалитьДляРедактирования);
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		ДляРедактирования = ?(ДополнительныеПараметры.Свойство("ДляРедактирования"), ДополнительныеПараметры.ДляРедактирования, Ложь);
		ИдентификаторФормы = ?(ДополнительныеПараметры.Свойство("ИдентификаторФормы"), ДополнительныеПараметры.ИдентификаторФормы, Неопределено);
		ВызыватьИсключение = ?(ДополнительныеПараметры.Свойство("ВызыватьИсключение"), ДополнительныеПараметры.ВызыватьИсключение, Истина);
		ПолучатьСсылкуНаДвоичныеДанные = ?(ДополнительныеПараметры.Свойство("ПолучатьСсылкуНаДвоичныеДанные"), 
			ДополнительныеПараметры.ПолучатьСсылкуНаДвоичныеДанные, Истина);
		
	Иначе
		ДляРедактирования = УдалитьДляРедактирования;
		ИдентификаторФормы = ДополнительныеПараметры;
		ВызыватьИсключение = Истина;
		ПолучатьСсылкуНаДвоичныеДанные = УдалитьПолучатьСсылкуНаДвоичныеДанные;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ПрисоединенныйФайл);
	
	//ОбщегоНазначенияКлиентСервер.ПроверитьПараметр("РаботаСФайлами.ДанныеФайла", "ПрисоединенныйФайл",
	//	ПрисоединенныйФайл, Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип);
		
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	Если ВызыватьИсключение Тогда
		ОбщегоНазначенияКлиентСервер.Проверить(ФайлОбъект <> Неопределено, 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не найден присоединенный файл ""%1"" (%2)'"),
			Строка(ПрисоединенныйФайл), ПрисоединенныйФайл.Метаданные()));
	ИначеЕсли ФайлОбъект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДляРедактирования И Не ЗначениеЗаполнено(ФайлОбъект.Редактирует) Тогда
		ФайлОбъект.Заблокировать();
		РаботаСФайламиСлужебный.ЗанятьФайлДляРедактированияСервер(ФайлОбъект);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	
	ПоддерживаетсяХранениеВерсий = (ТипЗнч(ПрисоединенныйФайл) = Тип("СправочникСсылка.Файлы"));
	ИспользуетсяВерсионированиеФайлов = ПоддерживаетсяХранениеВерсий
								И ПрисоединенныйФайл.ХранитьВерсии
								И ЗначениеЗаполнено(ПрисоединенныйФайл.ТекущаяВерсия);
	
	Если ПолучатьСсылкуНаДвоичныеДанные Тогда
		Если ИспользуетсяВерсионированиеФайлов Тогда
			ДвоичныеДанные = ДвоичныеДанныеФайла(ПрисоединенныйФайл.ТекущаяВерсия, ВызыватьИсключение);
		Иначе
			ДвоичныеДанные = ДвоичныеДанныеФайла(ПрисоединенныйФайл, ВызыватьИсключение);
		КонецЕсли;
		Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
		Иначе
			СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка",                       ПрисоединенныйФайл);
	Результат.Вставить("СсылкаНаДвоичныеДанныеФайла",  СсылкаНаДвоичныеДанныеФайла);
	Результат.Вставить("ОтносительныйПуть",            ПолучитьИдентификаторОбъекта(ФайлОбъект.ВладелецФайла) + "\");
	Результат.Вставить("ДатаМодификацииУниверсальная", ФайлОбъект.ДатаМодификацииУниверсальная);
	Результат.Вставить("ИмяФайла",                     ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
	Результат.Вставить("Наименование",                 ФайлОбъект.Наименование);
	Результат.Вставить("Расширение",                   ФайлОбъект.Расширение);
	Результат.Вставить("Размер",                       ФайлОбъект.Размер);
	Результат.Вставить("Редактирует",                  ФайлОбъект.Редактирует);
	Результат.Вставить("ПодписанЭП",                   ФайлОбъект.ПодписанЭП);
	Результат.Вставить("Зашифрован",                   ФайлОбъект.Зашифрован);
	Результат.Вставить("ХранитьВерсии",                ФайлОбъект.ХранитьВерсии);
	Результат.Вставить("ПометкаУдаления",              ФайлОбъект.ПометкаУдаления);
	Результат.Вставить("ДатаЗаема",                    ФайлОбъект.ДатаЗаема);
	Результат.Вставить("Владелец",                     ФайлОбъект.ВладелецФайла);
	Результат.Вставить("АвторТекущейВерсии",           ФайлОбъект.Изменил);
	Результат.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(ПрисоединенныйФайл));
	
	МетаданныеОбъектаФайла = Метаданные.НайтиПоТипу(ТипЗнч(ПрисоединенныйФайл));
	ЕстьВозможностьХранитьВерсии = ОбщегоНазначения.ЕстьРеквизитОбъекта("ТекущаяВерсия", МетаданныеОбъектаФайла);
	
	Если ЕстьВозможностьХранитьВерсии И ЗначениеЗаполнено(ПрисоединенныйФайл.ТекущаяВерсия) Тогда
		РаботаСФайламиСлужебный.ЗаполнитьДополнительныеДанныеФайла(Результат, ПрисоединенныйФайл, ПрисоединенныйФайл.ТекущаяВерсия);
	Иначе
		РаботаСФайламиСлужебный.ЗаполнитьДополнительныеДанныеФайла(Результат, ПрисоединенныйФайл, Неопределено);
	КонецЕсли;
	
	Результат.Вставить("ФайлРедактируется",            ЗначениеЗаполнено(ФайлОбъект.Редактирует));
	Результат.Вставить("ФайлРедактируетТекущийПользователь",
		?(Результат.ФайлРедактируется, ФайлОбъект.Редактирует = Пользователи.АвторизованныйПользователь(), Ложь) );
		
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		МодульЭлектроннаяПодпись = ОбщегоНазначения.ОбщийМодуль("ЭлектроннаяПодпись");
		Если ФайлОбъект.Зашифрован Тогда
			Результат.Вставить("МассивСертификатовШифрования", МодульЭлектроннаяПодпись.СертификатыШифрования(ПрисоединенныйФайл));
		КонецЕсли;
	КонецЕсли;
	
	Кодировка = ?(ИспользуетсяВерсионированиеФайлов, КодировкаФайла(ПрисоединенныйФайл.ТекущаяВерсия, ФайлОбъект.Расширение),
		КодировкаФайла(ПрисоединенныйФайл, ФайлОбъект.Расширение));
	Результат.Вставить("Кодировка", Кодировка);
	
	Результат.Вставить("Служебный", Ложь);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФайлОбъект, "Служебный") Тогда
		Результат.Служебный = ФайлОбъект.Служебный;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
