
#Область СлужебныеПроцедурыИФункции

Функция ВернутьЭлАдресОрганизации(Организация) Экспорт 
	
	ЭлАдрес								= "";
	ТекущийПользователь 				= Пользователи.ТекущийПользователь();
	СведенияООрганизацииЭлПочта			= ПолучитьЭлектроннуюПочтуИзКонтактнойИнформации(Организация);
	МассивЭлПочта						= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СведенияООрганизацииЭлПочта);
	Профиль 							= ЖБИ_ОбщийМодульСервер.ПолучитьПрофильПользователяГруппа(ТекущийПользователь);	
	Если Профиль = Справочники.ПрофилиГруппДоступа.ЗакупкиИЗапасы
		И МассивЭлПочта.Количество()>1 Тогда
		ЭлАдрес = МассивЭлПочта[1];
	ИначеЕсли МассивЭлПочта.Количество()>0 Тогда 
		ЭлАдрес = МассивЭлПочта[0];
	КонецЕсли;
	
	Возврат ЭлАдрес;
	
КонецФункции

// Функция находит актуальное значение электронной почты в контактной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации.
//
// Возвращаемое значение:
//  Строка - представление найденной электронной почты.
//
Функция ПолучитьЭлектроннуюПочтуИзКонтактнойИнформации(Объект) Экспорт

	Если ЗначениеЗаполнено(Объект) Тогда
		
		Окончание = "";
		Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
			Окончание = "Организации";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
			Окончание = "Контрагента";
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Партнеры") Тогда
			Окончание = "Партнера";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Окончание) Тогда
			ВидКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.ВидыКонтактнойИнформации["Email" + Окончание], "Ссылка");
			Возврат УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(Объект, ВидКИ, ,ТекущаяДатаСеанса());
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ЗаполнитьИсполнителейПечати(ТаблицаИсполнители, СтруктураДанных, СсылкаНаДокумент)
	
	ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(СсылкаНаДокумент.Менеджер.ИдентификаторПользователяИБ);
	Если ПрочитанныеСвойства <> Неопределено Тогда
		Если ТаблицаИсполнители.Количество() > 0 Тогда 
			СтруктураДанных.Вставить("ФИОИсполнителя",ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СокрЛП(ПрочитанныеСвойства.Имя)));
		Иначе 
			СтруктураДанных.Вставить("ФИОИсполнителя",daСклонение(ПрочитанныеСвойства.Имя, "И", , , "Фамилия И. О."));
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого НомСтр Из ТаблицаИсполнители Цикл 
		Если НомСтр.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтруктураДанных.Вставить("EmailИсполнителя",НомСтр.Представление);	
		ИначеЕсли НомСтр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
			И НомСтр.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя Тогда
			СтруктураДанных.Вставить("ТелефонИсполнителя",НомСтр.Представление);
		ИначеЕсли НомСтр.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
			И НомСтр.Вид.Наименование = "Мобильный телефон" Тогда
			СтруктураДанных.Вставить("МобильныйТелефонИсполнителя",НомСтр.Представление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКонтактнуюИнформациюПартнера(Партнер, СсылкаДоговор) Экспорт
	
	ДатаАктуальности 	= ТекущаяДатаСеанса();
	СтруктураКИ 		= Новый Структура;
	СтруктураКИ.Вставить("НаименованиеДляПечатныхФорм","");
	СтруктураКИ.Вставить("ИНН","");
	СтруктураКИ.Вставить("КПП","");
	СтруктураКИ.Вставить("БИК","");
	СтруктураКИ.Вставить("Банк","");
	СтруктураКИ.Вставить("НомерСчета","");
	СтруктураКИ.Вставить("КоррСчет","");
	СтруктураКИ.Вставить("ЮридическийАдрес","");
	СтруктураКИ.Вставить("ПочтовыйАдрес","");
	СтруктураКИ.Вставить("ФактическийАдрес","");
	СтруктураКИ.Вставить("ЭлектроннаяПочта","");
	СтруктураКИ.Вставить("НомерТелефона","");
	
	СведенияОПокупателе 					= ФормированиеПечатныхФорм.СведенияОЮрФизЛице(СсылкаДоговор.Контрагент,ДатаАктуальности,,СсылкаДоговор.БанковскийСчетКонтрагента);
	СтруктураКИ.НаименованиеДляПечатныхФорм = СведенияОПокупателе.НаименованиеДляПечатныхФорм;
	СтруктураКИ.ИНН 						= СведенияОПокупателе.ИНН;
	СтруктураКИ.КПП 						= СведенияОПокупателе.КПП;
	СтруктураКИ.БИК 						= СведенияОПокупателе.БИК;
	СтруктураКИ.НомерСчета 					= СведенияОПокупателе.НомерСчета;
	СтруктураКИ.КоррСчет 					= СведенияОПокупателе.КоррСчет;
	СтруктураКИ.Банк 						= СведенияОПокупателе.Банк;
	
	Для Каждого НомСтр Из Партнер.КонтактнаяИнформация Цикл 
		Если НомСтр.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда 
			СтруктураКИ.ЭлектроннаяПочта = НомСтр.Представление;
		ИначеЕсли НомСтр.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
			СтруктураКИ.НомерТелефона = НомСтр.Представление;
		ИначеЕсли НомСтр.Вид.Наименование = "Юридический адрес" Тогда
			СтруктураКИ.ЮридическийАдрес = НомСтр.Представление;
		ИначеЕсли НомСтр.Вид.Наименование = "Почтовый адрес" Тогда
			СтруктураКИ.ПочтовыйАдрес = НомСтр.Представление;
		ИначеЕсли НомСтр.Вид.Наименование = "Фактический адрес" Тогда
			СтруктураКИ.ФактическийАдрес = НомСтр.Представление;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураКИ;
	
КонецФункции

Функция СформироватьПредставлениеПечатиДляТовара(Номенклатура, НоменклатураПоставщика) Экспорт 
	
	ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ТоварСтр = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(Номенклатура.НаименованиеПолное,"",,,ДополнительныеПараметрыПолученияНаименованияДляПечати)
			 + " " +Справочники.ЖБИ_НормативныеДокументы.ГостНоменклатурыПоставщика(НоменклатураПоставщика);
	
	Возврат ТоварСтр;
	
КонецФункции


// Выводит логотип в табличный документ. Если в переданной области макета картинки
// логотипа нет, находится отдельная область с логотипом в макете и логотип выводится
// в данную область.
//
// Параметры:
// 		Макет - Макет - Макет печатной формы
// 		ОбластьМакета - ТекстовыйДокумент - Область макета печатной формы
// 		ИмяОбласти - Строка - Название передаваемой области
// 		Организация - СправочникСсылка.Организации - Содержит ссылку на организацию для получения логотипа.
//
Процедура ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакета, ИмяОбласти, Организация, ИмяЛого)
	
	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ФайлЛоготип");
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Рисунки, ИмяЛого) Тогда
		// Картинки логотипа в этой области макета нет.
		
		Если Макет.Области.Найти(ИмяОбласти+ИмяЛого) <> Неопределено Тогда
			
			// Проверка картинки логотипа в области с логотипом
			ОбластьМакетаЛоготип = Макет.ПолучитьОбласть(ИмяОбласти+ИмяЛого);
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакетаЛоготип.Рисунки, ИмяЛого) 
				И ЗначениеЗаполнено(ФайлКартинки) Тогда
				
				ОбластьМакета = ОбластьМакетаЛоготип;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлКартинки) Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьМакета.Рисунки[ИмяЛого]);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинки);
	
	Если ТипЗнч(ДвоичныеДанныеФайла) = Тип("Картинка") Тогда
		Картинка = ДвоичныеДанныеФайла;
	ИначеЕсли ТипЗнч(ДвоичныеДанныеФайла) = Тип("ДвоичныеДанные") Тогда
		Картинка = Новый Картинка(ДвоичныеДанныеФайла);
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли; 
	
	ОбластьМакета.Рисунки[ИмяЛого].Картинка = Картинка;
	
КонецПроцедуры

// Выводит логотип в табличный документ. Если в переданной области макета картинки
// логотипа нет, находится отдельная область с логотипом в макете и логотип выводится
// в данную область.
//
// Параметры:
// 		Макет - Макет - Макет печатной формы
// 		ОбластьМакета - ТекстовыйДокумент - Область макета печатной формы
// 		ИмяОбласти - Строка - Название передаваемой области
// 		Организация - СправочникСсылка.Организации - Содержит ссылку на организацию для получения логотипа.
//
Процедура ВывестиФаксимилеОрганизацииВТабличныйДокумент(Макет, ОбластьМакета, ИмяОбласти, Организация, ИмяЛого)
	
	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ФайлФаксимильнаяПечать");
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Рисунки, ИмяЛого) Тогда
		// Картинки логотипа в этой области макета нет.
		
		Если Макет.Области.Найти(ИмяОбласти+ИмяЛого) <> Неопределено Тогда
			
			// Проверка картинки логотипа в области с логотипом
			ОбластьМакетаЛоготип = Макет.ПолучитьОбласть(ИмяОбласти+ИмяЛого);
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакетаЛоготип.Рисунки, ИмяЛого) 
				И ЗначениеЗаполнено(ФайлКартинки) Тогда
				
				ОбластьМакета = ОбластьМакетаЛоготип;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлКартинки) Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьМакета.Рисунки[ИмяЛого]);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинки);
	
	Если ТипЗнч(ДвоичныеДанныеФайла) = Тип("Картинка") Тогда
		Картинка = ДвоичныеДанныеФайла;
	ИначеЕсли ТипЗнч(ДвоичныеДанныеФайла) = Тип("ДвоичныеДанные") Тогда
		Картинка = Новый Картинка(ДвоичныеДанныеФайла);
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли; 
	
	ОбластьМакета.Рисунки[ИмяЛого].Картинка = Картинка;
	
КонецПроцедуры

// Выводит факсимиле сотрудника в табличный документ. 
//
// Параметры:
// 		Макет - Макет - Макет печатной формы
// 		ОбластьМакета - ТекстовыйДокумент - Область макета печатной формы
// 		ИмяОбласти - Строка - Название передаваемой области
// 		Организация - СправочникСсылка.Организации - Содержит ссылку на организацию для получения логотипа.
//
Процедура ВывестиФаксимилеСотрудникаВТабличныйДокумент(Макет, ОбластьМакета, ИмяОбласти, Факсимиле, ИмяЛого)
	
	ФайлКартинки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Факсимиле, "ФайлФаксимильнаяПечать");
	
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакета.Рисунки, ИмяЛого) Тогда
		// Картинки логотипа в этой области макета нет.
		
		Если Макет.Области.Найти(ИмяОбласти+ИмяЛого) <> Неопределено Тогда
			
			// Проверка картинки логотипа в области с логотипом
			ОбластьМакетаЛоготип = Макет.ПолучитьОбласть(ИмяОбласти+ИмяЛого);
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ОбластьМакетаЛоготип.Рисунки, ИмяЛого) 
				И ЗначениеЗаполнено(ФайлКартинки) Тогда
				
				ОбластьМакета = ОбластьМакетаЛоготип;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФайлКартинки) Тогда
		ОбластьМакета.Рисунки.Удалить(ОбластьМакета.Рисунки[ИмяЛого]);
		Возврат;
	КонецЕсли;
	
	ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ФайлКартинки);
	
	Если ТипЗнч(ДвоичныеДанныеФайла) = Тип("Картинка") Тогда
		Картинка = ДвоичныеДанныеФайла;
	ИначеЕсли ТипЗнч(ДвоичныеДанныеФайла) = Тип("ДвоичныеДанные") Тогда
		Картинка = Новый Картинка(ДвоичныеДанныеФайла);
	Иначе
		Картинка = Новый Картинка;
	КонецЕсли; 
	
	ОбластьМакета.Рисунки[ИмяЛого].Картинка = Картинка;
	
КонецПроцедуры

// Функция возвращает действующий на указанную дату документ, удостоверяющий личность.
//
// Параметры:
//	Физлицо			- физическое лицо, для которого необходимо получить документ.
//	Дата			- дата, на которую необходимо получить документ.
//
// Возвращаемое значение:
//		Строка - представление документа, удостоверяющего личность.
//
Функция ДокументУдостоверяющийЛичностьФизлица(Физлицо, Дата = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Физлицо",	Физлицо);
	Запрос.УстановитьПараметр("ДатаСреза",	Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1	
	|	ДокументыФизическихЛиц.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛиц.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛиц.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛиц.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛиц.ДатаВыдачи Как ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛиц.КодПодразделения КАК КодПодразделенияДокументаФизЛица,
	|	ДокументыФизическихЛиц.СрокДействия КАК СрокДействияДокументаФизЛица,
	|	ДокументыФизическихЛиц.Представление КАК ПредставлениеДокументаФизЛица
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК Период,
	|			ДокументыФизическихЛиц.Физлицо КАК Физлицо
	|		ИЗ
	|			РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ГДЕ
	|			ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность
	|			И ДокументыФизическихЛиц.Физлицо = &Физлицо
	|			" + ?(Дата <> Неопределено, "И ДокументыФизическихЛиц.Период <= &ДатаСреза", "") + "
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДокументыФизическихЛиц.Физлицо) КАК ДокументыСрез
	|		ПО ДокументыФизическихЛиц.Период = ДокументыСрез.Период
	|			И ДокументыФизическихЛиц.Физлицо = ДокументыСрез.Физлицо
	|			И (ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность)";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

//СИНТАКСИС
//        daСклонение(_Выражение, _Падеж, _Род, _Режим, _ФорматнаяСтрока);
//            _Выражение      - склоняемое выражение
//            _Падеж          - падеж склонения, буква или цифра: "И" = 1, "Р" = 2, "В" = 3, "Д" = 4, "Т" = 5, "П" = 6
//            _Род          - род склоняемого выражения, буква или цифра: "М" = 1, "Ж" = 2, "С" = 3, "Н" = 4
//            _Режим         - режим работы функции, определяется типом склоняемого выражения
//            _ФорматнаяСтрока - определяет формат и регистр выводимого результата
//
//СКЛОНЕНИЕ ФИО
//запуск выполняется в режиме "ФИО" или с пустым режимом, в таком случае - режим "ФИО" установится по умолчанию:
//        daСклонение("Пухов Федор Николаевич", "Р", "М", "ФИО")    = "Пухова Федора Николаевича"
//        daСклонение("Пухова Ольга Сергеевна", "Д")                 = "Пуховой Ольге Сергеевне"
//порядок символов "Ф", "И", "О" в параметре режима определяет порядок частей ФИО в склоняемом выражении, т.к. фамилия, имя и отчество склоняются по разным правилам
//        daСклонение("Мария Ивановна Кожедуб", "Т", , "ИОФ")     = "Марией Ивановной Кожедуб"
//        daСклонение("В. Тёркин", "П", , "ИФ")                     = "В. Тёркине"
//        daСклонение("Тихончук", "Р", "Ж", "Ф")                     = "Тихончук"
//форматная строка может содержать ключевые слова "Фамилия", "Имя", "Отчество" или сокращения "Ф", "И", "О", их регистр определяет регистр выводимого результата
//        daСклонение("Чапаев Василий Иванович", "Р", , , "Имя Отчество Фамилия")     = "Василия Ивановича Чапаева"
//        daСклонение("Чапаев Василий Иванович", "Д", , , "Фамилия И. О.")             = "Чапаеву В. И."
//        daСклонение("Чапаев Василий Иванович", "И", , , "отчество: Имя - ФАМИЛИЯ")     = "иванович: Василий - ЧАПАЕВ"
//
//ОПРЕДЕЛЕНИЕ РОДА
//если с параметром _Род передать переменную со значением "?", в нее вернется род в случае успеха или останется "?" в случае неудачи
//        ПоискРода = "?"; Результат = daСклонение("Лукашенко Александр Григорьевич", "Р", ПоискРода); Сообщить(ПоискРода); //"М"
//        ПоискРода = "?"; Результат = daСклонение("Лукашенко А. Г.", "Р", ПоискРода); Сообщить(ПоискРода); //"?"
//
//СКЛОНЕНИЕ ПРОФЕССИЙ
//запуск выполняется в режиме "Д":
//        daСклонение("Ведущий программист 1С и консультант по ЗиК", "Р", , "Д") = "Ведущего программиста 1С и консультанта по ЗиК"
//в этом и остальных режимах форматная строка определяет регистр слов результата и задается при помощи литер, если литера не задана - остается исходный регистр,
//А - первая буква первого слова, Б - первая буква остальных слов, В - все остальные буквы всех слов, Г - специально для аббревиатур:
//        daСклонение("Ведущий программист 1С и Консультант по ЗиК", "Р", , "Д", "АБВГ")     = "ВЕДУЩЕГО ПРОГРАММИСТА 1С И КОНСУЛЬТАНТА ПО ЗИК"
//        daСклонение("Ведущий программист 1С и Консультант по ЗиК", "Р", , "Д", "абвг")     = "ведущего программиста 1с и консультанта по зик"
//        daСклонение("Ведущий программист 1С и Консультант по ЗиК", "Р", , "Д", "АБ")     = "Ведущего Программиста 1С и Консультанта По ЗиК"
//        daСклонение("Ведущий программист 1С и Консультант по ЗиК", "Р", , "Д", "Абв")     = "Ведущего программиста 1С и консультанта по ЗиК"
//
//СКЛОНЕНИЕ СУЩЕСТВИТЕЛЬНЫХ, ПРИЛАГАТЕЛЬНЫХ, ГЛАГОЛОВ, ГЕОГРАФИЧЕСКИХ НАИМЕНОВАНИЙ
//запуск выполняется в режиме "В":
//        daСклонение("Генеральная доверенность", "Р", , "В")            = "Генеральной доверенности"
//        daСклонение("Санкт-Петербург", "П", , "В")                    = "Санкт-Петербурге"
//в этом режиме возможно склонение в форме множественного числа, для этого в параметре _Род указывается "Н" (мНожественный):
//        daСклонение("Устав", "И", "Н", "В")                            = "Уставы"
//        daСклонение("Генеральная доверенность", "Р", "Н", "В")        = "Генеральных доверенностей"
//возможно склонение глаголов по родам и по числам, исходный глагол может быть в форме любого рода и числа, но в настоящем времени:
//        daСклонение("Подготовили", "И", "Ж", "В")                    = "Подготовила"
//        daСклонение("Утвердило ответственное лицо", "И", "Н", "В")    = "Утвердили ответственные лица"
//
//СКЛОНЕНИЕ ЧИСЕЛ, ВАЛЮТ, ЕДИНИЦ ИЗМЕРЕНИЯ
//запуск выполняется в режиме "Ч", возможно склонение по родам:
//        daСклонение("Двадцать один", "И", "С", "Ч")                = "Двадцать одно"
//        daСклонение("Двадцать один", "Р", "Ж", "Ч")                = "Двадцати одной"
//параметр _Выражение может иметь тип "Число":
//        daСклонение(21, "И", "С", "Ч")                            = "Двадцать одно"
//        daСклонение(21, "Р", "Ж", "Ч")                            = "Двадцати одной"
//возможно склонение сочетания числа и исчислимого (валюты, единицы измерения, прочих существительных)
//        daСклонение("32 доска", "Р", , "Ч")                        = "Тридцати двух досок"
//исчислимое должно быть в начальной форме (именительный падеж, единственное число):
//        daСклонение("23 австралийский доллар", "Р", , "Ч")        = "Двадцати трех австралийских долларов"
//исключение для популярных валют, они могут быть в формате встроенной функции ЧислоПрописью()- "5 рублей", "13 долларов"):
//        daСклонение("14 рублей 88 копеек", "Р", , "Ч", "абв")    = "четырнадцати рублей восьмидесяти восьми копеек"
//если перед словом поставить символ "\", данное слово не будет изменено:
//        daСклонение("51 рубль \81 копейка", "Р", , "Ч")            = "Пятидесяти одного рубля 81 копейки"
//если перед числом поставить символ "^", данное слово будет склоняться без преобразования в пропись:
//        daСклонение("^25 страница", "П", , "Ч")                    = "25-ти страницах"
//для получения формы винительного падежа одушевленных существительных, используется специальный падеж "О" (винительный Одушевленный):
//        daСклонение("41 мешок", "В", , "Ч")                        = "Сорок один мешок"
//        daСклонение("41 маляр", "О", , "Ч")                        = "Сорок одного маляра"
//
Функция daСклонение(_Выражение, _Падеж = "И", _Род = "", _Режим = "ФИО", _ФорматнаяСтрока = "")
    
    _Версия = "17.06.2015";
    
    //ТАБЛИЦЫ ПРАВИЛ СКЛОНЕНИЯ
    //в колонке "Окончания" указывается перечень окончаний, для которых действует данное правило, разделитель "/", в конце также ставится разделитель
    //алгоритм ищет строки с окончаниями последовательно, при совпадении останавливается, поэтому более узкое правило ("РВИН") должно следовать выше, чем широкое ("ИН")
    //если окончание не найдено в таблице правил - такое слово не склоняется
    //колонка "Обрезка" определяет, сколько символов с конца слова обрезать, перед добавлением окончания из колонки падежа ("Р", "Д", "В", "Т", "П")
    _ПравилаФ = //Фамилия
    //Род;    Окончания;                                            Обрезка;    Р;        Д;        В;        Т;        П;        Комментарий   
    //символ "*" перед окончанием означает, что данное окончание сравнивается не с концом слова, а с целым словом ("*ГРИН" сработает только на Грин, а "ГРИН" - и на "Грин", и на "Багрин")
    "М-;    *ГРИН/*ЧАПЛИН/РВИН/*БИН/;                            0;            а;        у;        а;        ом;        е;        Грин, Дарвин, Чаплин - исключения, чтобы пройти тест gramota.ru )
    //в колонке "Род" указывается один литерал рода ("М", "Ж", "С"), если окончание позволяет однозначно определить род ("Петров" - "М", "Ильина" - "Ж")
    |Ж;        ЕВА/ЁВА/ИНА/ОВА/ЫНА/;                                1;            ой;        ой;        у;        ой;        ой;
    |М;        ЕВ/ЁВ/ИН/ОВ/ЫН/;                                    0;            а;        у;        а;        ым;        е;
    |М;        ЧИЙ/ШИЙ/ЩИЙ/;                                        2;            его;    ему;    его;    им;        ем;        Осадчий, Старший, Вещий
    |Ж;        ЧАЯ/ШАЯ/ЩАЯ/;                                        2;            ей;        ей;        ую;        ей;        ей;     Осадчая, Старшая, Вещая
    |Ж;        АЯ/;                                                2;            ой;        ой;        ую;        ой;        ой;     Крутая
    |Ж;        ЯЯ/;                                                2;            ей;        ей;        юю;        ей;        ей;     Верхняя
    //"М-" в колонке "Род" означает, что по окончанию род не определить, но правило действует  только для рода "М" ("Воробей" склоняется только для "М", для "Ж" - не склоняется)
    |М-;    *ВОРОБЕЙ/*СОЛОВЕЙ/;                                    2;            ья;        ью;        ья;        ьем;    ье;        Воробей, Соловей
    |М-;    *ЛЕВ/;                                                2;            ьва;    ьву;    ьва;    ьвом;    ьве;    Лев
    |М-;    *КИЙ/*БОКИЙ/;                                        1;            я;        ю;        я;        ем;        е;        Кий
    |М-;    ЦОЙ/ВИЙ/СОЙ/ЕЙ/АЙ/УЙ/;                                1;            я;        ю;        я;        ем;        е;        Цой, Гелетей, Лузай
    |М;        ГОЙ/КОЙ/ХОЙ/ШОЙ/;                                    2;            ого;    ому;    ого;    им;        ом;     Плохой, Большой
    |М;        ЧОЙ/ЩОЙ/;                                            2;            его;    ему;    его;    им;        ом;     
    |М;        ОЙ/ЫЙ/;                                                2;            ого;    ому;    ого;    ым;        ом;     Крутой, Мудрый
    |М;        ГИЙ/КИЙ/;                                            2;            ого;    ому;    ого;    им;        ом;
    |М-;    ИЙ/;                                                1;            я;        ю;        я;        ем;        и;        Шарий
    |М-;    КАШ/;                                                0;            а;        у;        а;        ом;        е;      Лукаш
    |М-;    ЬМИЧ/;                                                0;            а;        у;        а;        ом;        е;      Кузьмич
    |М-;    ИЧ/Ш/;                                                0;            а;        у;        а;        ем;        е;      Митрич, Гаспажиньш, Милош, Хараш, Черныш
    |М-;    АК/АН/ЕР/ИР/ЙН/НГ/ОН/ОР/УК/ЯК/ЯН/БИХ/РИХ/;            0;            а;        у;        а;      ом;     е;                   
    //колонка "Род" пустая, если по окончанию род не определить, но правило склонения одинаковое для "М" и "Ж ("Живаго", "Лисица")
    |;        АГО/ИА/НКО/ОВО/ОТО/ЦКО/ЫХ/ЮДО/ОЛЯ/ЬДА/ИХ/ЫХ/УА/;    0;            ;        ;        ;          ;         ;                   
    //символ "+" перед окончанием означает, что данное правило действует для не последней части составного слова (в "Абдул-Шах" часть "Абдул" не склоняется, а если "Абдул" - отдельное слово, то склоняется)
    |;        +ВАН/+АБДУЛ/+БЕЛИЦ/+ГАСАН/+ДЮССАР/+ДЮМОН/+КНИППЕР/+КОРВИН/  0;    ;        ;        ;          ;         ;        
    |;        +КАРА/+САЕД/+БОНЧ/+ШОЛОМ/+ПРИЗВАН/+МЕЛИК/*ТЕР/*ВАР/*ФОН/;    0;    ;        ;        ;          ;         ;        
    |;        *ДЮМА/*ТОМА/*ДЕГА/*ЛЮКА/*ФЕРМА/*ГАМАРРА/;           0;            ;        ;        ;          ;         ;        
    |;        *ПЕТИПА/*ШАНДРА/*СКАЛЯ/*КАРУАНА/;                    0;            ;        ;        ;          ;         ;        
    |М-;    ИЯ/;                                                1;            и;        и;        ю;        ей;        и;      Берия             
    |М-;    ОЯ/;                                                1;            и;        е;        ю;        ей;        е;        
    |;        НЖА/;                                                1;            и;        е;        у;        ей;        е;        Стринжа
    |;        ЖА/;                                                1;            и;        е;        у;        ой;        е;        Ганжа
    |;        ГА/КА/УЛЕША/ВАША/ХА/;                                1;            и;        е;        у;        ой;        е;        Кулеша/Кулешой
    |;        Я/;                                                    1;            и;        е;        ю;        ей;        е;        Разиня
    |;        ЙА/ЧА/ША/ЩА/;                                        1;            и;        е;        у;        ей;        е;        Олеша/Олешей, Мойа
    |;        ЦА/;                                                1;            ы;        е;        у;        ей;        е;        Лисица
    |;        А/;                                                    1;            ы;        е;        у;        ой;        е;                   
    |М-;    ЕНЬ/;                                                3;            ня;        ню;        ня;        нем;    не;        Камень
    |М-;    Ь/;                                                    1;            я;        ю;        я;        ем;        е;        Даль
    |М-;    ЁК/;                                                2;            ька;    ьку;    ька;    ьком;    ьке;    Королёк
    |М-;    БЛОК/;                                                0;            а;        у;        а;        ом;        е;      Блок
    |М-;    ОК/;                                                2;            ка;        ку;        ка;        ком;    ке;        Миненок, Кисляченок
    |М-;    ИЕЦ/;                                                2;            йца;    йцу;    йца;    йцем;    йце;    Коломиец
    |М-;    ПАЛЕЦ/;                                                2;            ьца;    ьцу;    ьца;    ьцем;    ьце;    Долгопалец
    |М-;    ЛЕЦ/;                                                2;            ьца;    ьцу;    ьца;    ьцом;    ьце;    Стрелец
    |М-;    ЧЕЦ/;                                                0;            а;        у;        а;        ом;        е;        Чайчец
    |М-;    АВЕЦ/ЖЕЦ/;                                            2;            ца;        цу;        ца;        цем;    це;        Переяславец, Запорожец
    |М-;    ОВЕЦ/БЕЦ/АМЕЦ/НЕЦ/ТЕЦ/;                                2;            ца;        цу;        ца;        цом;    це;        Горовец
    |М-;    ШВЕЦ/;                                                0;            а;        у;        а;        ом;        е;        Швец
    |М-;    Ц/;                                                    0;            а;        у;        а;        ем;        е;        Кац, Бэц
    |М-;    ЁЛ/;                                                2;            ла;        лу;        ла;        лом;    ле;        Козёл
    |М-;    ДЖ/ИЖ/ОЖ/РЖ/ЙЧ/;                                    0;            а;        у;        а;        ем;        е;        Джордж, Лейч
    |М-;    Б/В/Г/Д/Ж/З/К/Л/М/Н/П/Р/С/Т/Ф/Х/Ч/Ш/Щ/;                0;            а;        у;        а;        ом;        е;        Заканчивается на согласную";
    
    _ПравилаИ = //Имя
    //Род;    Окончания;                                            Обрезка;    Р;        Д;        В;        Т;        П;        Комментарий   
    "Ж;        *ИЯ/;                                                1;            и;        е;        ю;        ей;        е;        Ия
    |Ж;        ИЯ/;                                                1;            и;        и;        ю;        ей;        и;        Мария
    |;        ГА/КА/ХА/;                                            1;            и;        е;        у;        ой;        е;        Ольга, Серега, Лука, Лика, Хоха
    |;        ЖА/ЙА/ЧА/ША/ЩА/;                                    1;            и;        е;        у;        ей;        е;        Миша, Маша
    |;        ЦА/;                                                1;            ы;        е;        у;        ей;        е;      Маца
    |Ж;        НА/ВЕРА/;                                            1;            ы;        е;        у;        ой;        е;      Инна, Нина, Ирина, Вера
    |Ж;        А/;                                                    1;            ы;        е;        у;        ой;        е;      Тома (женские на -а чаще)
    |М;        *ШОТА/;                                                0;            ;        ;        ;        ;        ;        Шота
    |М;        А/ЛО/;                                                1;            ы;        е;        у;        ой;        е;      Дима, Гаврило
    |М;        *ИЛЬЯ/*ИЛИЯ/;                                        1;            и;        е;        ю;        ей;        е;        Илья
    |Ж-;    Я/;                                                    1;            и;        е;        ю;        ей;        е;        Дуня
    |М-;    Я/;                                                    1;            и;        е;        ю;        ей;        е;        Гия
    |М;        РЬ/;                                                1;            я;        ю;        я;        ем;        е;        Игорь
    |Ж;        *ЛЮБОВЬ/*АГАРЬ/*РАХИЛЬ/*РУФЬ/*СУЛАМИФЬ/*ЭСФИРЬ/;    1;            и;        и;        ь;        ью;        и;        Любовь
    |Ж;        *ЮДИФЬ/*РАШЕЛЬ/*НИНЕЛЬ/*ИЗАБЕЛЬ/*ИСАБЕЛЬ/;            1;            и;        и;        ь;        ью;        и;        Любовь
    |М-;    Ь/;                                                    1;            я;        ю;        я;        ем;        е;        Олесь
    |М;        *ПАВЕЛ/;                                            2;            ла;        лу;        ла;        лом;    ле;        Павел
    |М;        *ЛЕВ/;                                                2;            ьва;    ьву;    ьва;    ьвом;    ьве;    Лев
    |М;        ИЙ/;                                                1;            я;        ю;        я;        ем;        и;        Василий
    |М;        Й/;                                                    1;            я;        ю;        я;        ем;        е;        Гай
    |М;        ЁТР/;                                                3;            етра;    етру;    етра;    етром;    етре;    Пётр
    |М;        +АХМАД/+АБДУЛ/+ГАСАН/+САЛИМ/+САИД/;                    0;            ;        ;        ;        ;        ;        Салим-Гирей
    |М;        ДЖ/;                                                0;            а;        у;        а;        ем;        е;        Джордж
    |М;        Б/В/Г/Д/Ж/З/К/Л/М/Н/П/Р/С/Т/Ф/Х/Ц/Ч/Ш/Щ/;            0;            а;        у;        а;        ом;        е;        Заканчивается на согласную";
    
    _ПравилаО = //Отчество
    //Род;    Окончания;                                            Обрезка;    Р;        Д;        В;        Т;        П;        Комментарий   
    "М;        *ИЛЬИЧ/*КУЗЬМИЧ/*ЛУКИЧ/*ФОМИЧ/;                        0;            а;        у;        а;        ом;        е;        Ильичом, Кузьмичом (после шипящих под ударением!)
    |М;        ИЧ/;                                                0;            а;        у;        а;        ем;        е;
    |Ж;        НА/;                                                1;            ы;        е;        у;        ой;        е;
    |М;        ОГЛЫ/УЛЫ/УУЛУ/;                                        0;            ;        ;        ;        ;        ;       Оглы, Улы, Уулу
    |Ж;        ЫЗЫ/ИЗИ/;                                            0;            ;        ;        ;        ;        ;        Кызы, Гызы, Кизи
    |;        *ИБН/;                                                0;            ;        ;        ;        ;        ;        ибн
    |;        +Б/+В/+Г/+Д/+Ж/+З/+К/+Л/+М/+Н/+П/+Р/+С/+Т/+Ф/+Х/+Ц/+Ч/+Ш/+Щ/;0;    ;        ;        ;        ;        ;        Заканчивается на согласную - восточные отчества - не последняя часть слова
    |;        Б/В/Г/Д/Ж/З/К/Л/М/Н/П/Р/С/Т/Ф/Х/Ц/Ч/Ш/Щ/;            0;            а;        у;        а;        ом;        е;        Заканчивается на согласную - восточные отчества";
    
    _ПравилаД = //Должность
    //Род;    Окончания;                                            Тег;    Обрезка;    Р;        Д;        В;        Т;        П;        
    "М;        *ВЕНТИЛЕВОЙ/*РУЛЕВОЙ/*ДВЕРЕВОЙ/*ПЕЧЕВОЙ/*КОВШЕВОЙ/;                                            ;        2;            ого;    ому;    ого;    ым;        ом;
    |М;        *ЛЮКОВОЙ/*СКИПОВОЙ/*МИКСЕРОВОЙ/*СТВОЛОВОЙ/*ГОРНОВОЙ/*ПОСТОВОЙ/*ВЕРХОВОЙ/*РАЗЪЕЗДНОЙ/*ПОРТНОЙ/;    ;    2;            ого;    ому;    ого;    ым;        ом;
    |М;        *БИРЖЕВОЙ/*ПОЛЕВОЙ/*ПУТЕВОЙ/*ЛИЦЕВОЙ/*ЗУБНОЙ/*ПОЕЗДНОЙ/*РЕЧНОЙ/*РУЧНОЙ/*ВТОРОЙ/;                    К;        2;            ого;    ому;    ого;    ым;        ом;
    |М;        *ПРАВОВОЙ/*БЕРЕГОВОЙ/*ТРУДОВОЙ/*СУДОВОЙ/*ГРУЗОВОЙ/*МИРОВОЙ/*ЛЕНТОВОЙ/*БОРТОВОЙ/*МОСТОВОЙ/*СТРАХОВОЙ/;К;        2;            ого;    ому;    ого;    ым;        ом;
    |М;        *ЗАВОДСКОЙ/*ГОРОДСКОЙ/*МОРСКОЙ/;                                                                    К;        2;            ого;    ому;    ого;    им;        ом;
    |М;        ЖИЙ/ЧИЙ/ШИЙ/ЩИЙ/;                                    ;        2;            его;    ему;    его;    им;        ем;        
    |М;        СКИЙ/;                                                ;        2;            ого;    ому;    ого;    им;        ом;        
    |М;        ЫЙ/;                                                ;        2;            ого;    ому;    ого;    ым;        ом;        
    |Ж;        ЖАЯ/ЧАЯ/ШАЯ/ЩАЯ/;                                    ;        2;            ей;        ей;        ую;        ей;        ей;        
    |Ж;        ЯЯ/;                                                ;        2;            ей;        ей;        юю;        ей;        ей;        
    |Ж;        АЯ/;                                                ;        2;            ой;        ой;        ую;        ой;        ой;        
    |;        Е/И/Ы/Ю/;                                            П;        0;            ;        ;        ;        ;        ;        
    |;        ЗАВ/ЗАМ/НАЧ/;                                        П;        0;            ;        ;        ;        ;        ;        
    |;        ОЙ/;                                                П;        0;            ;        ;        ;        ;        ;        
    |;        *ОВЕЦ/;                                                ;        0;            ;        ;        ;        ;        ;        
    |;        ДЬЯ/;                                                ;        1;            и;        е;        ю;        ей;        е;      
    |;        АРЬ/;                                                ;        1;            я;        ю;        я;        ем;        е;        
    |;        ИСТ/;                                                ;        0;            а;        у;        а;        ом;        е;        
    |Ж;        ЙКА/ИСТКА/ША/ТАРКА/ЕРКА/ЯРКА/ЕНКА/ЧИХА/ЖКА/;        ;        1;            и;        е;        у;        ой;        е;        
    |Ж;        ИЦА/;                                                ;        1;            ы;        е;        у;        ей;        е;      
    |Ж;        НЯ/ВЕЯ/НЬЯ/;                                        ;        1;            и;        е;        ю;        ей;        е;      
    |Ж;        СЕСТРА/ССА/;                                        ;        1;            ы;        е;        у;        ой;        е;      
    |Ж;        ДЕЛЬ/;                                                ;        1;            и;        и;        ь;        ью;        и;      
    |М;        ГЛАВА/ШИНА/;                                        ;        1;            ы;        е;        у;        ой;        е;      
    |М;        КАЛЬ/ГАЛЬ/ИТЕЛЬ/АТЕЛЬ/ОТЕЛЬ/ЕРЬ/;                    ;        1;            я;        ю;        я;        ем;        е;        
    |М;        АЧЕЙ/КЕЙ/ДЖЕЙ/;                                        ;        1;            я;        ю;        я;        ем;        е;        
    |М;        ЛИСТ/;                                                ;        0;            а;        у;        а;        ом;        е;        
    |М;        ЗНЕЦ/ТЕЦ/;                                            ;        0;            а;        у;        а;        ом;        е;        
    |М;        АВЕЦ/ЕБЕЦ/ЕВЕЦ/ОВЕЦ/ЖЕЦ/РЕЦ/СЕЦ/НЕЦ/;                ;        2;            ца;        цу;        ца;        цом;    це;        
    |М;        ОЕЦ/;                                                ;        2;            йца;    йцу;    йца;    йцом;    йце;    
    |М;        ИЕЦ/;                                                ;        2;            йца;    йцу;    йца;    йцем;    йце;    
    |М;        ПОСОЛ/;                                                ;        2;            ла;        лу;        ла;        лом;    ле;        
    |М;        РЕЛОК/;                                                ;        2;            ка;        ку;        ка;        ком;    ке;        
    |М;        РОНОМ/АНАТОМ/;                                        ;        0;            а;        у;        а;        ом;        е;        
    |М;        ОРУБ/ДУВ/КЛАД/ВЕД/ЕВОД/ОВОД/ОХОД/ЛАЗ/ВАЛ/ДЕЛ/СОЛ/ОКОЛ/КОП/ВАР/ОПАР/ВЕС/МЕС/НОС/ТЕС/;        ;    0;    а;        у;        а;        ом;        е;
    |М;        ЛОПРАВ/ТОПРАВ/РИВОД/ЫБАК/ЕГАР/АТУР/ТРОС/ИЛОТ/ПЕРТ/НАСТ/НТЕРН/АТЛЕТ/ХОДОК/ГРОК/ОБОЛ/;        ;    0;    а;        у;        а;        ом;        е;
    |М;        РАБ/ТАВ/МАТ/ГОГ/ЛОГ/ПЕД/РОЖ/ЗАК/СУЛ/ОНАЛ/ЕРСАЛ/ЛЕН/МЕН/ЬОН/ОУН/;                            ;    0;    а;        у;        а;        ом;        е;
    |М;        БАТ/ДАТ/КАТ/ПАТ/ТАТ/ЕКТ/ИСТ/ОСТ/АНТ/ГЕНТ/ДЕНТ/РЕНТ/СТЕНТ/ЦЕНТ/ОНТ/;                            ;    0;    а;        у;        а;        ом;        е;
    |М;        НАР/САР/ТАР/ЦАР/ЧАР/АТР/ИТР/СТР/;                                                            ;    0;    а;        у;        а;        ом;        е;
    |М;        АЕР/ВЕР/ГЕР/ДЕР/ЖЕР/ЗЕР/ЙЕР/КЕР/ЛЕР/НЕР/ПЕР/РЕР/СЕР/ХЕР/ЧЕР/ШЕР/ЮЕР/;                        ;    0;    а;        у;        а;        ом;        е;
    |М;        ЕМЕР/ИМЕР/РМЕР/ЮМЕР/АЛЬЕР/ЕЛЬЕР/РЬЕР/ЁР/;                                                    ;    0;    а;        у;        а;        ом;        е;
    |М;        ДИТЕР/КТЕР/ЛТЕР/ЙТЕР/НТЕР/ОТЕР/ПТЕР/СТЕР/УТЕР/ФТЕР/ХТЕР/;                                    ;    0;    а;        у;        а;        ом;        е;
    |М;        ДОР/ЗОР/ИОР/РОР/СОР/ТОР/ФОР/ЦОР/АТОР/ИТОР/КТОР/НТОР/;                                        ;    0;    а;        у;        а;        ом;        е;
    |М;        ВИК/ЗИК/МИК/НИК/ГРАФИК/ЧИК/ШИК/ЩИК/ИРИК/ОРИК/ТРИК/ГИСТИК/ТИСТИК/УСТИК/АТИК/ЕТИК/ИТИК/ПТИК/;    ;    0;    а;        у;        а;        ом;        е;
    |М;        ИВ/РГ/ИД/ЯК/АН/ГУН/ИР/ЭР/ЮР/ЯР/УС/ВТ/ЬТ/АФ/СОФ/ТУХ/ЮХ/АЧ/;                                    ;    0;    а;        у;        а;        ом;        е;";
    
    _ПравилаЧ = //Числительное
    //Род;    Окончания;                                Тег;    Обрезка;    И;            Р;            Д;            В;            Т;            П;            О;        Комментарий   
    "М;        *ОДИН/*ОДНА/*ОДНО/;                        1;        2;            ин;            ного;        ному;        ин;            ним;        ном;        ного;    Один
    |С;        *ОДИН/*ОДНА/*ОДНО/;                        1;        2;            но;            ного;        ному;        но;            ним;        ном;        ного;    Одно
    |Ж;        *ОДИН/*ОДНА/*ОДНО/;                        1;        2;            на;            ной;        ной;        ну;            ной;        ной;        ну;        Одна
    |М;        *ДВА/*ДВЕ/;                                2;        1;            а;            ух;            ум;            а;            умя;        ух;            ух;        Два, Две
    |С;        *ДВА/*ДВЕ/;                                2;        1;            а;            ух;            ум;            а;            умя;        ух;            ух;        Два, Две
    |Ж;        *ДВА/*ДВЕ/;                                2;        1;            е;            ух;            ум;            е;            умя;        ух;            ух;        Два, Две
    |;        *ТРИ/;                                    2;        1;            и;            ех;            ем;            и;            емя;        ех;            ех;        Три
    |;        *ЧЕТЫРЕ/;                                2;        1;            е;            ех;            ем;            е;            ьмя;        ех;            ех;        Четыре
    |;        *ВОСЕМЬ/;                                ;        3;            емь;        ьми;        ьми;        емь;        емью;        ьми;        емь;    Восемь
    |;        *ПЯТЬ/*ШЕСТЬ/*СЕМЬ/*ДЕВЯТЬ/*ДЕСЯТЬ/ДЦАТЬ/;    ;    1;            ь;            и;            и;            ь;            ью;            и;            ь;        Пять, Шесть, Семь, Десять и др.
    |;        *СОРОК/;                                ;        0;            ;            а;            а;            ;            а;            а;            ;        Сорок
    |;        *ВОСЕМЬДЕСЯТ/;                            ;        8;            емьдесят;    ьмидесяти;    ьмидесяти;    емьдесят;    емьюдесятью;ьмидесяти;    емьдесят;Восемьдесят
    |;        ЬДЕСЯТ/;                                ;        6;            ьдесят;        идесяти;    идесяти;    ьдесят;        ьюдесятью;    идесяти;     ьдесят;    Пятьдесят и др.
    |;        *СТО/*ДЕВЯНОСТО/;                        ;        1;            о;            а;            а;            о;            а;            а;             о;        Девяносто, Сто
    |;        *ДВЕСТИ/;                                ;        4;            ести;        ухсот;        умстам;        ести;        умястами;    ухстах;        ести;    Двести
    |;        *ТРИСТА/;                                ;        4;            иста;        ехсот;        емстам;        иста;        емястами;    ехстах;        иста;    Триста
    |;        *ЧЕТЫРЕСТА/;                            ;        4;            еста;        ехсот;        емстам;        еста;        ьмястами;    ехстах;        еста;    Четыреста
    |;        *ВОСЕМЬСОТ/;                            ;        6;            емьсот;        ьмисот;        ьмистам;    емьсот;        емьюстами;    ьмистах;    емьсот;    Восемьсот
    |;        ЬСОТ/;                                    ;        4;            ьсот;        исот;        истам;        ьсот;        ьюстами;     истах;        ьсот;    Пятьсот, Шестьсот, Семьсот, Девятьсот
    |;        *НОЛЬ/*НУЛЬ/;                            ;        1;            ь;            я;            ю;            ь;            ем;            е;            ь;        Ноль, Нуль
    |М;        1/;                                        1;        0;            -ин;        -го;        -му;        -ин;        -им;        -ом;        -го;    
    |С;        1/;                                        1;        0;            -но;        -го;        -му;        -ин;        -им;        -ом;        -го;    
    |Ж;        1/;                                        1;        0;            -на;        -ой;        -ой;        -ну;        -ой;        -ой;        -ну;        
    |М;        2/;                                        2;        0;            -а;            -ух;        -ум;        -а;            -мя;        -ух;        -ух;    
    |С;        2/;                                        2;        0;            -а;            -ух;        -ум;        -а;            -мя;        -ух;        -ух;
    |Ж;        2/;                                        2;        0;            -е;            -ух;        -ум;        -е;            -мя;        -ух;        -ух;
    |;        3/;                                        2;        0;            -и;            -ех;        -ем;        -и;            -мя;        -ех;        -ех;    
    |;        4/;                                        2;        0;            -ре;        -х;            -ем;        -ре;        -мя;        -ех;        -ех;    
    |;        5/6/9/10/11/12/13/14/15/16/17/18/19/20/30/;;    0;            -ть;        -ти;        -ти;        -ть;        -тью;        -ти;        -ть;    
    |;        7/8/;                                    ;        0;            -мь;        -ми;        -ми;        -мь;        -мью;        -ми;        -мь;    
    |;        40/;                                    ;        0;            -к;            -ка;        -ка;        -к;            -ка;        -ка;        -к;        
    |;        50/60/70/80/;                            ;        0;            -т;            -ти;        -ти;        -т;            -тью;        -ти;        -т;        
    |;        90/;                                    ;        0;            -сто;        -та;        -та;        -сто;        -та;        -та;        -сто;    
    |;        100/;                                    ;        0;            ;            -та;        -та;        ;            -та;        -та;        ;    
    |;        200/;                                    ;        0;            -и;            -сот;        -стам;        -и;            -стами;        -стах;      -и;    
    |;        300/400/;                                ;        0;            -а;            -сот;        -стам;        -а;            -стами;        -стах;      -а;        
    |;        500/600/700/800/900/;                    ;        0;            -сот;        -сот;        -стам;        -сот;        -стами;        -стах;      -сот;    
    |;        *0/;                                    ;        0;            -ль;        -ля;        -лю;        -ль;        -ем;        -ле;        -ль;    
    |;        0/;                                        ;        0;            ;            ;            ;            ;            ;            ;            ;";
    
    _ПравилаВ = //Выражение
    //Род;    Окончания;                                    Обрезка;    И;                Р;                Д;                В;                Т;                П;                О;                
    "С;        ЕНИЕ/;                                        1;            е/я;            я/й;            ю/ям;            е/я;            ем/ями;            и/ях;            е/й;            
    //"Р" в колонке "Род" означает, слово родоизменяемое, и порядок окончания в списке определяет род слова
    |Р;        КИЙ/КАЯ/КОЕ/КИЕ/;                            2;            ий/ая/ое/ие;    ого/ой/ого/их;    ому/ой/ому/им;    ий/ую/ое/ие;    им/ой/им/ими;    ом/ой/ом/их;    ого/ую/ое/их;    
    |Р;        НИЙ/НЯЯ/НЕЕ/НИЕ/;                            2;            ий/яя/ее/ие;    его/ей/его/их;    ему/ей/ему/им;    ий/юю/ее/ие;    им/ей/им/ими;    ем/ей/ем/их;    его/юю/ое/их;    
    |Р;        ЩИЙ/ЩАЯ/ЩЕЕ/ЩИЕ/;                            2;            ий/ая/ее/ие;    его/ей/его/их;    ему/ей/ему/им;    ий/ую/ее/ие;    им/ей/им/ими;    ем/ей/ем/их;    его/ую/ое/их;    
    |Р;        ШИЙ/ШАЯ/ШОЕ/ШИЕ/;                            2;            ий/ая/ее/ие;    его/ей/его/их;    ему/ей/ему/им;    ий/ую/ее/ие;    им/ей/им/ими;    ем/ей/ем/их;    его/ую/ое/их;    
    |Р;        ЫЙ/АЯ/ОЕ/ЫЕ/;                                2;            ый/ая/ое/ые;    ого/ой/ого/ых;    ому/ой/ому/ым;    ый/ую/ое/ые;    ым/ой/ым/ыми;    ом/ой/ом/ых;    ого/ую/ое/ых;    
    |Р;        ЧЕЛ/ЧЛА/ЧЛО/ЧЛИ/;                            2;            ел/ла/ло/ли;    ел/ла/ло/ли;    ел/ла/ло/ли;    ел/ла/ло/ли;    ел/ла/ло/ли;    ел/ла/ло/ли;    ел/ла/ло/ли;    
    |Р;        АЛ/АЛА/АЛО/АЛИ/;                            0111;        /а/о/и;            /а/о/и;            /а/о/и;            /а/о/и;            /а/о/и;            /а/о/и;            /а/о/и;            
    |Р;        ИЛ/ИЛА/ИЛО/ИЛИ/;                            0111;        /а/о/и;            /а/о/и;            /а/о/и;            /а/о/и;            /а/о/и;            /а/о/и;            /а/о/и;            
    |Р;        ЕЛ/ЕЛА/ЕЛО/ЕЛИ/;                            0111;        /а/о/и;            /а/о/и;            /а/о/и;            /а/о/и;            /а/о/и;            /а/о/и;            /а/о/и;            
    |Ж;        *ТЫСЯЧА/*ТЫСЯЧИ/*ТЫСЯЧ/;                        110;        а/и;            и/;                е/ам;            у/и;            ей/ами;            е/ах;            у/и;            
    |М;        ЛЛИОН/ЛЛИОНА/ЛЛИОНОВ/ЛЛИАРД/ЛЛИАРДА/ЛЛИАРДОВ/;012012;    /ы;                а/ов;            у/ам;            /ы;                ом/ами;            е/ах;            /ы;                
    |;        *САНКТ/*УСТЬ/*ЙОШКАР/*НА/;                    0;            /;                /;                /;                /;                /;                /;                /;                
    |;        *СТЕРЛИНГОВ/;                                0;            /;                /;                /;                /;                /;                /;                /;                
    |М;        ОВЕК/;                                        0;            /и;                а/;                у/ам;            а/;                ом/ами;            е/ах;            а/;                
    |М;        ЕЦ/;                                        2;            ец/цы;            ца/цов;            цу/цам;            ец/цы;            цом/цами;        це/цах;            ца/цов;            
    |М;        ЕНЬ/;                                        3;            ень/ни;            ня/ней;            ню/ням;            ень/ни;            нем/нями;        не/нях;            ня/ней;            
    |М;        ШОК/;                                        2;            ок/ки;            ка/ков;            ку/кам;            ок/ки;            ком/ками;        ке/ках;            ка/ков;            
    |М;        *ДОЛЛАР/*ДОЛЛАРА/*ДОЛЛАРОВ/;                012;        /ы;                а/ов;            у/ам;            /ы;                ом/ами;            е/ах;            а/ов;            
    |М;        ЦЕНТ/ЦЕНТА/ЦЕНТОВ/;                            012;        /ы;                а/ов;            у/ам;            /ы;                ом/ами;            е/ах;            а/ов;            
    |М;        *РУБЛЬ/*РУБЛЯ/*РУБЛЕЙ/;                        112;        ь/и;            я/ей;            ю/ям;            ь/и;            ем/ями;            е/ях;            я/ей;            
    |Ж;        *КОПЕЙКА/*КОПЕЙКИ/*КОПЕЕК/;                    332;        йка/йки;        йки/ек;            йке/йкам;        йку/йки;        йкой/йками;        йке/йках;        йку/ек;            
    |М;        Б/В/Д/З/Л/М/Н/П/Р/С/Т/Ф/Ц/;                    0;            /ы;                а/ов;            у/ам;            /ы;                ом/ами;            е/ах;            а/ов;            
    |М;        Г/К/Х/;                                        0;            /и;                а/ов;            у/ам;            /и;                ом/ами;            е/ах;            а/ов;            
    |М;        Ж/Ч/Ш/Щ/;                                    0;            /и;                а/ей;            у/ам;            /и;                ем/ами;            е/ах;            а/ей;            
    |М;        Й/;                                            1;            й/и;            я/ев;            ю/ям;            й/и;            ем/ями;            е/ях;            я/ев;            
    |Ж;        Ь/;                                            1;            ь/и;            и/ей;            и/ям;            ь/и;            ью/ями;            и/ях;            и/ей;            
    |М;        Ь/;                                            1;            ь/и;            я/ей;            ю/ям;            ь/и;            ем/ями;            е/ях;            я/ей;            
    |Ж;        ЛЯ/;                                        2;            ля/ли;            ли/ель;            ле/лям;            лю/ли;            лей/лями;        ле/лях;            лю/ли;            
    |Ж;        ХНЯ/;                                        2;            ня/ни;            ни/онь;            не/ням;            ню/ни;            ней/нями;        не/нях;            ню/ни;            
    |Ж;        РЯ/НЯ/;                                        1;            я/и;            и/ей;            е/ям;            ю/и;            ей/ями;             е/ях;            ю/ей;            
    |Ж;        СКА/МКА/НКА/;                                2;            ка/ки;            ки/ок;            ке/кам;            ку/ки;            кой/ками;        ке/ках;            ку/ок;            
    |Ж;        ЖА/ЙА/ЧА/ША/ЩА/;                            1;            а/и;            и/;                е/ам;            у/и;            ей/ами;            е/ах;            у/;                
    |Ж;        ГА/КА/ХА/;                                    1;            а/и;            и/;                е/ам;            у/и;            ой/ами;            е/ах;            у/;                
    |Ж;        ЦА/;                                        1;            а/ы;            ы/;                е/ам;            у/ы;            ей/ами;            е/ах;            у/;                
    |Ж;        ВНА/;                                        2;            на/ны;            ны/ен;            не/нам;            ну/ны;            ной/нами;        не/нах;            ну/ен;            
    |Ж;        А/;                                            1;            а/ы;            ы/;                е/ам;            у/ы;            ой/ами;            е/ах;            у/;                
    |С;        *ЕВРО/;                                        0;            /;                /;                /;                /;                /;                /;                /;                
    |С;        КО/;                                        1;            о/а;            а/ов;            у/ам;            о/а;            ом/ами;            е/ах;            о/;                
    |С;        О/;                                            1;            о/а;            а/;                у/ам;            о/а;            ом/ами;            е/ах;            о/;                
    |С;        Е/;                                            1;            е/я;            я/й;            ю/ям;            е/я;            ем/ями;            и/ях;            е/й;            ";
    
    _Параметр0 = _Выражение;
    _Параметр1 = _Падеж;
    _Параметр2 = _Род;
    _Параметр3 = _Режим;
    _Параметр4 = _ФорматнаяСтрока;
    
    Если _Параметр0 = "_РазделитьСтроку" Тогда
        
        _ПозРазделителя = Найти(_Параметр1, _Параметр2); _Режим = Сред(_Параметр1, _ПозРазделителя + СтрДлина(_Параметр2)); Возврат Лев(_Параметр1, _ПозРазделителя - 1);
        
    ИначеЕсли _Параметр0 = "_ВМассивБезРазделителей" Тогда
        
        _МассивСтрок = Новый Массив(); Пока ИСТИНА Цикл _Поз = Найти(_Параметр1, _Параметр2); Если _Поз = 0 Тогда _МассивСтрок.Добавить(_Параметр1); Возврат _МассивСтрок;    КонецЕсли;    _МассивСтрок.Добавить(СокрЛП(Лев(_Параметр1, _Поз - 1))); _Параметр1 = СокрЛП(Сред(_Параметр1, _Поз + СтрДлина(_Параметр2))); КонецЦикла; Возврат _МассивСтрок;
        
    ИначеЕсли _Параметр0 = "_ВМассивСРазделителями" Тогда
        
        _МассивСтрок = Новый Массив(); _КолРазделителей = СтрДлина(_Параметр2);    Пока ИСТИНА Цикл _МинПозРазделителя = 10000; Для _ИндРазделителя = 1 По _КолРазделителей Цикл _ПозРазделителя = Найти(_Параметр1, Сред(_Параметр2, _ИндРазделителя, 1)); Если _ПозРазделителя > 0 Тогда _МинПозРазделителя = Мин(_МинПозРазделителя, _ПозРазделителя); КонецЕсли; КонецЦикла; Если _МинПозРазделителя = 10000 Тогда _МассивСтрок.Добавить(_Параметр1); Возврат _МассивСтрок; КонецЕсли; _МассивСтрок.Добавить(Лев(_Параметр1, _МинПозРазделителя - 1)); Для _Поз = _МинПозРазделителя По СтрДлина(_Параметр1) + 1 Цикл _ТекСимвол = Сред(_Параметр1, _Поз, 1); Если Найти(_Параметр2, _ТекСимвол) = 0 ИЛИ _Поз = СтрДлина(_Параметр1) + 1 Тогда _МассивСтрок.Добавить(Сред(_Параметр1, _МинПозРазделителя, _Поз - _МинПозРазделителя)); _Параметр1 = Сред(_Параметр1, _Поз); Прервать; КонецЕсли; КонецЦикла; КонецЦикла; 
        
    ИначеЕсли _Параметр0 = "_ПривестиПоДлинеИРегистру" Тогда
        
        _ИсходнаяСтрока     = _Параметр1;
        _Образец             = _Параметр2;
        
        _Результат = ?(Лев(_Образец, 1) = "-", Лев(_ИсходнаяСтрока, 1), ?(Лев(_Образец, 1) <> НРег(Лев(_Образец, 1)), ВРег(Лев(_ИсходнаяСтрока, 1)), НРег(Лев(_ИсходнаяСтрока, 1))));
        Если НЕ Сред(_Образец, 2, 1) = "" Тогда
            _Результат = _Результат + ?(Сред(_Образец, 2, 1) = "-", Сред(_ИсходнаяСтрока, 2), ?(Сред(_Образец, 2, 1) <> НРег(Сред(_Образец, 2, 1)), ВРег(Сред(_ИсходнаяСтрока, 2)), НРег(Сред(_ИсходнаяСтрока, 2))));
        КонецЕсли;

        Возврат _Результат;
        
    ИначеЕсли _Параметр0 = "_ПросклонятьСлово" Тогда
        
        _СтрокаСлово    = _Параметр3; 
        
        Если _СтрокаСлово.Склонение = "-" ИЛИ _СтрокаСлово.Склонение = "!" Тогда 
            Возврат "";
        КонецЕсли;
        
        _ИсходнаяСтрока = _СтрокаСлово.Значение;
        _Метод = ?(Найти("ФИО", _СтрокаСлово.Субметод) > 0, "ФИО", _СтрокаСлово.Субметод);
        _СтрокаПадежи    = ?(Найти("ЧВ", _Метод) > 0, "ИРДВТПО", "РДВТП");
        
        _ПраваяЧасть = "";
        
        _ТаблицаПравила = Вычислить("_Правила" + _СтрокаСлово.Субметод);
        Для _НомСтр = 1 По СтрЧислоСтрок(_ТаблицаПравила) Цикл
            
            _СтрокаПравила = СтрПолучитьСтроку(_ТаблицаПравила, _НомСтр);
            
            Если Найти(_СтрокаПравила, ВРег(Прав(_ИсходнаяСтрока, 1)) + "/") = 0 Тогда Продолжить; КонецЕсли; 
            
            _РодПравила = СокрЛП(daСклонение("_РазделитьСтроку", _СтрокаПравила, ";", _ПраваяЧасть)); 
            Если (Найти(" МЖС", _Род) > 1 И НЕ ПустаяСтрока(_РодПравила) И Найти(_РодПравила, _Род) = 0 И _РодПравила <> "Р") Тогда Продолжить; КонецЕсли;
            
            _ЛеваяЧасть = daСклонение("_РазделитьСтроку", _ПраваяЧасть, ";", _ПраваяЧасть);
            _МассивОкончания = daСклонение("_ВМассивБезРазделителей", СокрЛП(_ЛеваяЧасть), "/");
            Для _Инд = 0 По _МассивОкончания.ВГраница() - 1 Цикл
                
                _СтрокаОкончание = _МассивОкончания[_Инд];
                
                Если НЕ ((ВРег(Прав(_ИсходнаяСтрока, СтрДлина(_СтрокаОкончание))) = ВРег(_СтрокаОкончание)) 
                    ИЛИ (Лев(_СтрокаОкончание, 1) = "*" И ВРег(_ИсходнаяСтрока) = ВРег(Сред(_СтрокаОкончание, 2)))
                    ИЛИ (Лев(_СтрокаОкончание, 1) = "+" И ВРег(Прав(_ИсходнаяСтрока, СтрДлина(_СтрокаОкончание) - 1)) = Сред(ВРег(_СтрокаОкончание), 2) И _СтрокаСлово.Тег = "Н")) Тогда 
                    Продолжить;
                КонецЕсли;
                
                Если _Метод = "Д" ИЛИ _Метод = "Ч" Тогда 
                    _ТегПравило = СокрЛП(daСклонение("_РазделитьСтроку", _ПраваяЧасть, ";", _ПраваяЧасть));
                    _ТегПравило = ?(_Метод = "Ч" И СтрДлина(_ТегПравило) = 0, Сред("51222", Найти("1234", Прав(_ИсходнаяСтрока, 1)) + 1, 1), _ТегПравило); 
                    
                    Если СтрДлина(_ТегПравило) > 0 И ПустаяСтрока(_СтрокаСлово.Тег) Тогда
                        _СтрокаСлово.Тег = _ТегПравило;
                        _СтрокаСлово.Склонение = ?(_ТегПравило = "П", "!", _СтрокаСлово.Склонение); 
                        Возврат "";
                    КонецЕсли;
                КонецЕсли;
                
                Если _РодПравила = "Р" Тогда 
                    _РодНайденный = Сред("МЖСН", _Инд + 1, 1);
                    _СтрокаСлово.Тег = "Р"; 
                Иначе
                    _РодНайденный = ?(СтрДлина(_РодПравила) = 1, _РодПравила, "");
                КонецЕсли;
                
                _СтрокаСлово.Род = _РодНайденный;
                
                Если _Метод = "ФИО" И ПустаяСтрока(_Род) И ПустаяСтрока(_РодНайденный) Тогда 
                    Возврат ""; 
                КонецЕсли;
                
                Если _Метод = "В" И _СтрокаСлово.Склонение = "?" Тогда 
                    _СтрокаСлово.Склонение = "";
                    Возврат ""; 
                КонецЕсли;
                
                Если Найти(_СтрокаПадежи, _Падеж) = 0 Тогда 
                    _СтрокаСлово.Склонение = "!";
                    Возврат "";
                КонецЕсли;
                
                _Обрезка = СокрЛП(daСклонение("_РазделитьСтроку", _ПраваяЧасть, ";", _ПраваяЧасть));
                _Обрезка = Число(?(СтрДлина(_Обрезка) = 1, _Обрезка, Сред(_Обрезка, _Инд + 1, 1)));
                
                _МассивСклонения = daСклонение("_ВМассивБезРазделителей", СокрЛП(_ПраваяЧасть), ";");
                _Окончание = СокрЛП(_МассивСклонения[Найти(_СтрокаПадежи, _Падеж) - 1]);
                Если _Метод = "В" Тогда 
                    _МассивОкончания = daСклонение("_ВМассивБезРазделителей", _Окончание, "/");
                    _ИндОкончания = Число(Сред(?(_РодПравила = "Р", "00123", "00001"), Найти("МЖСН", ?(ПустаяСтрока(_Род), _РодНайденный, _Род)) + 1, 1));
                    _Окончание = _МассивОкончания[_ИндОкончания];
                КонецЕсли;
                _СтрокаСлово.Значение = Лев(_ИсходнаяСтрока, СтрДлина(_ИсходнаяСтрока) - _Обрезка) + daСклонение("_ПривестиПоДлинеИРегистру", _Окончание, Прав(_ИсходнаяСтрока, 1) + Прав(_ИсходнаяСтрока, 1)); 
                _СтрокаСлово.Склонение = "!";
                Возврат "";
                
            КонецЦикла;
            
        КонецЦикла;
        
        Если _Метод = "Ч" Тогда
            _СтрокаСлово.Субметод = "В"; 
            _СтрокаСлово.Склонение = "?";
            Возврат daСклонение("_ПросклонятьСлово", _Падеж, "", _СтрокаСлово);
        Иначе
            _СтрокаСлово.Склонение = "!"; 
            Возврат  ""; 
        КонецЕсли;
        
    ИначеЕсли _Параметр0 = "_ПроверкаТипов" Тогда
        
        _ИсходнаяСтрока     = _Параметр1;
        
        _СтруктураТипы = Новый Структура("ЕстьЦифры, ЕстьНеЦифры, ЕстьВРег, ЕстьНРег, Аббревиатура", Ложь, Ложь, Ложь, Ложь, Ложь);
        _СтрокаЦифры                 = "0123456789";
        _СтрокаЦифрыИРазделители     = "0123456789. "; 
        _КолНРег = 0;
        
        Для _Поз = 1 По СтрДлина(_ИсходнаяСтрока) Цикл
            _ТекСимвол = Сред(_ИсходнаяСтрока, _Поз, 1);
            _СтруктураТипы.ЕстьЦифры     = _СтруктураТипы.ЕстьЦифры ИЛИ Найти(_СтрокаЦифры, _ТекСимвол) > 0;
            _СтруктураТипы.ЕстьНеЦифры     = _СтруктураТипы.ЕстьНеЦифры ИЛИ Найти(_СтрокаЦифрыИРазделители, _ТекСимвол) = 0;
            _СтруктураТипы.ЕстьВРег     = _СтруктураТипы.ЕстьВРег ИЛИ _ТекСимвол <> НРег(_ТекСимвол);
            _СтруктураТипы.ЕстьНРег     = _СтруктураТипы.ЕстьНРег ИЛИ _ТекСимвол <> ВРег(_ТекСимвол);
            _КолНРег = _КолНРег + (_ТекСимвол <> ВРег(_ТекСимвол));
        КонецЦикла; 
        
        _СтруктураТипы.Аббревиатура = _СтруктураТипы.ЕстьНеЦифры И (_КолНРег < Макс(СтрДлина(_ИсходнаяСтрока) - 1, 2) ИЛИ _СтруктураТипы.ЕстьЦифры);
        
        Возврат _СтруктураТипы;
        
    ИначеЕсли _Параметр0 = "?" Тогда 
        
        Возврат _Версия;
        
    КонецЕсли;
    
    _РежимЗапуска = ?(ПустаяСтрока(_Режим), "ФИО", ВРег(СокрЛП(_Режим))); 
    
    Если Найти("ФИО", Лев(_РежимЗапуска, 1)) > 0 Тогда
        _РегистрыШаблона     = Новый Структура("ФАМИЛИЯ, ИМЯ, ОТЧЕСТВО, Ф, И, О", , , , "--", "--", "--"); 
        _Метод                 = "ФИО";
    ИначеЕсли Найти("ДЧВ", _РежимЗапуска) > 0 Тогда
        _РегистрыШаблона     = Новый Структура("А, Б, В, Г", "-", "-", "-", "-"); 
        _Метод                 = _РежимЗапуска;
    Иначе
        Возврат "<неправильный режим!!!>";
    КонецЕсли;
    _Разделители = " -+.,()/"""; 
    
    _МакросИзШаблона = _ФорматнаяСтрока;
    Если НЕ ПустаяСтрока(_ФорматнаяСтрока) Тогда
        
        Для Каждого _ЭлементРегистрыШаблона Из _РегистрыШаблона Цикл
            _Поз = Найти(ВРег(_МакросИзШаблона), _ЭлементРегистрыШаблона.Ключ);
            Если _Поз = 0 Тогда
                Продолжить;
            КонецЕсли;
            
            _СимволМакроса         = Лев(_ЭлементРегистрыШаблона.Ключ, 1); 
            _НайденныйШаблон     = Сред(_МакросИзШаблона, _Поз, СтрДлина(_ЭлементРегистрыШаблона.Ключ)); 
            _РегистрыШаблона[_СимволМакроса] = _НайденныйШаблон; 
            
            Если _Метод = "ФИО" Тогда
                _ПриведенныйМакрос = "%" + Найти("ФИО", _СимволМакроса); 
                _МакросИзШаблона = СтрЗаменить(_МакросИзШаблона, _НайденныйШаблон, _ПриведенныйМакрос);
            КонецЕсли;
        КонецЦикла;
        
        Если _Метод = "ФИО" Тогда
            Для _Ном = 1 По 3 Цикл
                _МакросИзШаблона = СтрЗаменить(_МакросИзШаблона, "%" + _Ном, "%" + Сред("ФИО", _Ном, 1));
            КонецЦикла; 
        КонецЕсли;
            
    КонецЕсли;
    
    _ТаблицаСлова = Новый ТаблицаЗначений;
    _ТаблицаСлова.Колонки.Добавить("Значение");
    _ТаблицаСлова.Колонки.Добавить("Субметод");
    _ТаблицаСлова.Колонки.Добавить("Род");
    _ТаблицаСлова.Колонки.Добавить("Тег");
    _ТаблицаСлова.Колонки.Добавить("Регистр");
    _ТаблицаСлова.Колонки.Добавить("Склонение");
    _ТаблицаСлова.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
    
    _ПадежИтоговый    = Сред("ИИРДВТПОИРДВТПО", Найти("ИРДВТПО1234567", ВРег(_Падеж)) + 1, 1); 
    _РодИтоговый    = СокрЛП(Сред("  МЖСНМЖСН", Найти("?МЖСН1234", ВРег(_Род)) + 1, 1)); 
    _МакросПоУмолчанию = "";
    _ПозШаблонВход = 1;
    _ПозЧастиСтроки = 0;
    _СоставноеСлово = Ложь;
    _РодСклонения    = ?(_Метод = "Ч", "", _РодИтоговый); 
    
    _МассивЧастиСтроки = daСклонение("_ВМассивСРазделителями", _Выражение, _Разделители);
    Пока _ПозЧастиСтроки <= _МассивЧастиСтроки.ВГраница() Цикл
        
        _ЧастьСтроки = _МассивЧастиСтроки[_ПозЧастиСтроки];
        
        Если _Метод = "ФИО" И НЕ ПустаяСтрока(_МакросИзШаблона) И Лев(_ЧастьСтроки, 1) = "." И _ТаблицаСлова.Количество() > 0 И СтрДлина(_ТаблицаСлова[_ТаблицаСлова.Количество() - 1].Регистр) > 1 Тогда
            _ТаблицаСлова[_ТаблицаСлова.Количество() - 1].Тег = "."; 
        КонецЕсли;
            
        Если Найти(_Разделители, Лев(_ЧастьСтроки, 1)) > 0 ИЛИ (_Метод = "ФИО" И _ПозШаблонВход > СтрДлина(_РежимЗапуска)) Тогда 
            _МакросПоУмолчанию = _МакросПоУмолчанию + ?(_СоставноеСлово, "", _ЧастьСтроки); 
        Иначе
            _СтрокаСлово = _ТаблицаСлова.Добавить();
            
            Если Лев(_ЧастьСтроки, 1) = "\" Тогда
                _ЧастьСтроки = Сред(_ЧастьСтроки, 2);
                _СтрокаСлово.Склонение = "-";
            ИначеЕсли Лев(_ЧастьСтроки, 1) = "^" Тогда  
                _ЧастьСтроки = Сред(_ЧастьСтроки, 2);
                _СтрокаСлово.Склонение = "+"; 
            КонецЕсли; 
            
            _СтруктураТипы = daСклонение("_ПроверкаТипов", _ЧастьСтроки);
            
            Если _Метод = "Ч" И _СтрокаСлово.Склонение <> "-" И _СтрокаСлово.Склонение <> "+" И _СтруктураТипы.ЕстьЦифры И НЕ _СтруктураТипы.ЕстьНеЦифры Тогда 
                _МассивЧастиСубСтроки = daСклонение("_ВМассивСРазделителями", СокрЛП(ЧислоПрописью(_ЧастьСтроки, "Л = ru_RU", ",,,,,,,,0")), " ");
                _МассивЧастиСтроки.Удалить(_ПозЧастиСтроки);
                Для _ПозЧастиСубСтроки = 0 По _МассивЧастиСубСтроки.ВГраница() Цикл
                    _МассивЧастиСтроки.Вставить(_ПозЧастиСтроки, _МассивЧастиСубСтроки[_МассивЧастиСубСтроки.ВГраница() - _ПозЧастиСубСтроки]);
                КонецЦикла; 
                _ЧастьСтроки = _МассивЧастиСтроки[_ПозЧастиСтроки];
            КонецЕсли;
            
            Если СтрДлина(_ЧастьСтроки) <= 1 И НЕ _СтруктураТипы.ЕстьЦифры Тогда 
                _СтрокаСлово.Склонение = "-";
            КонецЕсли;
            _СтрокаСлово.Значение = _ЧастьСтроки;
            
            Если _Метод = "ФИО" Тогда
                Если _ПозЧастиСтроки <= _МассивЧастиСтроки.ВГраница() - 2 И _МассивЧастиСтроки[_ПозЧастиСтроки + 1] = "-" Тогда 
                    _СтрокаСлово.Тег = "Н"; 
                    _СоставноеСлово = Истина;
                Иначе
                    _СоставноеСлово = Ложь;
                КонецЕсли; 
                _СимволМакроса = Сред(_РежимЗапуска, _ПозШаблонВход, 1);
                _СтрокаСлово.Регистр = _РегистрыШаблона[_СимволМакроса];
                _СтрокаСлово.Субметод = Сред(_РежимЗапуска, _ПозШаблонВход, 1); 
                _СтрокаСлово.Порядок = Найти("ОФИ", _СтрокаСлово.Субметод) * 100 + _ПозЧастиСтроки; 
            Иначе
                _СтрокаСлово.Субметод = _Метод;
                _СимволМакроса = "С" + Формат(_ПозШаблонВход, "ЧЦ=2; ЧВН="); 
                
                Если _Метод = "Ч" И ((_ПозЧастиСтроки + 1 <= _МассивЧастиСтроки.ВГраница() И Найти("/-.", Лев(_МассивЧастиСтроки[_ПозЧастиСтроки + 1], 1)) > 0)
                    ИЛИ (_ПозЧастиСтроки - 1 >= 0 И Найти("/-.", Лев(_МассивЧастиСтроки[_ПозЧастиСтроки - 1], 1)) > 0)) Тогда
                    _СтруктураТипы.Аббревиатура = Истина; 
                КонецЕсли;
                
                Если _СтруктураТипы.Аббревиатура Тогда
                    _СтрокаСлово.Регистр = _РегистрыШаблона.Г + _РегистрыШаблона.Г;
                    _СтрокаСлово.Склонение = "-"; 
                Иначе
                    _СтрокаСлово.Регистр = ?(_ПозШаблонВход = 1, _РегистрыШаблона.А, _РегистрыШаблона.Б) + _РегистрыШаблона.В;
                КонецЕсли;
                
                daСклонение("_ПросклонятьСлово", _ПадежИтоговый, _РодСклонения, _СтрокаСлово);
            КонецЕсли;
            
            Если НЕ _СоставноеСлово Тогда
                _ПозШаблонВход = _ПозШаблонВход + 1;
                _МакросПоУмолчанию = _МакросПоУмолчанию + "%" + _СимволМакроса;
            КонецЕсли;
            
        КонецЕсли;
        
        _ПозЧастиСтроки = _ПозЧастиСтроки + 1;
        
    КонецЦикла;
    
    _МакросИзШаблона = ?(_Метод = "ФИО" И НЕ ПустаяСтрока(_МакросИзШаблона), _МакросИзШаблона, _МакросПоУмолчанию);
    
    Если _Метод = "ФИО" Тогда
        Пока _ПозШаблонВход <= СтрДлина(_РежимЗапуска) Цикл 
            _СтрокаСлово = _ТаблицаСлова.Добавить();
            _СтрокаСлово.Субметод = Сред(_РежимЗапуска, _ПозШаблонВход, 1);
            _СтрокаСлово.Склонение = "-"; 
            _ПозШаблонВход = _ПозШаблонВход + 1;
        КонецЦикла;
        _ТаблицаСлова.Сортировать("Порядок");
    КонецЕсли;
    
    _РодНайденный    = ""; 
    
    Для Каждого _СтрокаСлово Из _ТаблицаСлова Цикл
        
        _ПадежСклонения = _ПадежИтоговый;
        
        Если _СтрокаСлово.Субметод = "Ч" Тогда 
            
            _СледИндекс = _ТаблицаСлова.Индекс(_СтрокаСлово) + 1;
            _РодСклонения = _РодИтоговый;
            Если _СледИндекс <= _ТаблицаСлова.Количество() - 1 И НЕ ПустаяСтрока(_ТаблицаСлова[_СледИндекс].Род) Тогда
                _РодСклонения = _ТаблицаСлова[_СледИндекс].Род;
            КонецЕсли;
            
        ИначеЕсли _СтрокаСлово.Субметод = "В" Тогда 
            
            _ТипСклонения = "";
            _ПредИндекс = _ТаблицаСлова.Индекс(_СтрокаСлово) - 1;
            Пока ИСТИНА Цикл 
                Если _ПредИндекс < 0 Тогда
                    Прервать;
                ИначеЕсли _ТаблицаСлова[_ПредИндекс].Субметод = "Ч" Тогда
                    _ТипСклонения = _ТаблицаСлова[_ПредИндекс].Тег; 
                    Прервать;
                Иначе
                    _ПредИндекс = _ПредИндекс - 1;
                КонецЕсли;
            КонецЦикла;
            
            Если _ТипСклонения = "1" Тогда 
                _РодСклонения = "";
                _ПадежСклонения = _ПадежИтоговый;
            ИначеЕсли _ТипСклонения = "2" Тогда 
                Если Найти("ИВ", _ПадежИтоговый) > 0 Тогда
                    _РодСклонения = ?(_СтрокаСлово.Тег = "Р", "Н", ""); 
                    _ПадежСклонения = "Р";
                Иначе    
                    _РодСклонения = "Н";
                    _ПадежСклонения = _ПадежИтоговый;
                КонецЕсли; 
            ИначеЕсли _ТипСклонения = "5" Тогда 
                Если Найти("ИВ", _ПадежИтоговый) > 0 Тогда
                    _РодСклонения = "Н";
                    _ПадежСклонения = "Р";
                Иначе    
                    _РодСклонения = "Н";
                    _ПадежСклонения = _ПадежИтоговый;
                КонецЕсли;
            Иначе 
                _РодСклонения = _СтрокаСлово.Род; 
                _ПадежСклонения = _ПадежИтоговый;
            КонецЕсли; 
            
        ИначеЕсли _СтрокаСлово.Субметод = "Д" И _СтрокаСлово.Тег = "К" Тогда 
            
            _ТекИндекс = _ТаблицаСлова.Индекс(_СтрокаСлово);
            Пока ИСТИНА Цикл 
                _СледИндекс = _ТекИндекс + 1;
                Если _ТекИндекс + 1 > _ТаблицаСлова.Количество() - 1 ИЛИ ПустаяСтрока(_ТаблицаСлова[_ТекИндекс + 1].Тег) Тогда 
                    Прервать;
                Иначе
                    Если _ТаблицаСлова[_СледИндекс].Тег = "П" Тогда 
                        _СтрокаСлово.Склонение = "-"; 
                        Прервать;
                    КонецЕсли; 
                    _ТекИндекс = _ТекИндекс + 1;
                КонецЕсли; 
            КонецЦикла;
            
        КонецЕсли;
        
        daСклонение("_ПросклонятьСлово", _ПадежСклонения, _РодСклонения, _СтрокаСлово);
        
        _РодНайденный = ?(НЕ ПустаяСтрока(_СтрокаСлово.Род), _СтрокаСлово.Род, _РодНайденный);
        _РодСклонения = ?(_Метод = "ФИО" И НЕ ПустаяСтрока(_РодНайденный), _РодНайденный, _РодСклонения); 
        
    КонецЦикла;
    
    Если _Род = "?" Тогда 
        _Род = ?(ПустаяСтрока(_РодНайденный), "?", _РодНайденный);
    КонецЕсли; 
    
    _РодИтоговый = ?(ПустаяСтрока(_РодИтоговый), ?(ПустаяСтрока(_РодНайденный), "М", _РодНайденный), _РодИтоговый); 
    _РезультатСклонения = "";
    
    Для Каждого _СтрокаСлово Из _ТаблицаСлова Цикл
        
        daСклонение("_ПросклонятьСлово", _ПадежИтоговый, _РодИтоговый, _СтрокаСлово); 
        _СтрокаСлово.Значение = daСклонение("_ПривестиПоДлинеИРегистру", _СтрокаСлово.Значение, _СтрокаСлово.Регистр);
        
        Если _СтрокаСлово.Тег = "Н" Тогда 
            _РезультатСклонения    = _РезультатСклонения + _СтрокаСлово.Значение + "-";
            Продолжить;
        КонецЕсли;
        
        _РезультатСклонения    = _РезультатСклонения + _СтрокаСлово.Значение;
        
        Если _Метод = "ФИО" Тогда
            _ЭлементШаблона = "%" + _СтрокаСлово.Субметод;
            Если НЕ ЗначениеЗаполнено(_СтрокаСлово.Значение) Тогда 
                _Поз = Найти(_МакросИзШаблона, _ЭлементШаблона);
                _ЭлементШаблона = ?(_Поз > 1 И Сред(_МакросИзШаблона, _Поз - 1, 1) = " ", " ", "") + _ЭлементШаблона + ?(_Поз <> 0 И Сред(_МакросИзШаблона, _Поз + 2, 1) = ".", ".", ""); 
            КонецЕсли;
            _РезультатСклонения    = _РезультатСклонения + _СтрокаСлово.Тег; 
        Иначе
            _ЭлементШаблона = "%С" + Формат(_ТаблицаСлова.Индекс(_СтрокаСлово) + 1, "ЧЦ=2; ЧВН=");
        КонецЕсли;
        
        _МакросИзШаблона = СтрЗаменить(_МакросИзШаблона, _ЭлементШаблона, _РезультатСклонения);
        
        _РезультатСклонения = "";
        
    КонецЦикла;
    
    Возврат _МакросИзШаблона;
        
КонецФункции

Функция СведенияоКонтакномЛицеПоставщика(Партнер)
	
	СтруктураКонтактногоЛица = Новый Структура("ФИО, Должность", "", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	КонтактныеЛицаПартнеров.Ссылка КАК СсылкаКонтактноеЛицо,
	               |	КонтактныеЛицаПартнеров.Владелец КАК Владелец,
	               |	КонтактныеЛицаПартнеров.Наименование КАК ФИО,
	               |	КонтактныеЛицаПартнеров.ЖБИ_Должность КАК Должность
	               |ИЗ
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |ГДЕ
	               |	КонтактныеЛицаПартнеров.Владелец = &Партнер
	               |	И КонтактныеЛицаПартнеров.ЖБИ_Главный
	               |	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда 
		СтруктураКонтактногоЛица.ФИО = РезультатЗапроса.ФИО;
		СтруктураКонтактногоЛица.Должность = РезультатЗапроса.Должность;
	КонецЕсли;
	
	Возврат СтруктураКонтактногоЛица;
	
КонецФункции

Функция ПолучитьОтветственноеЛицо(ОтветственноеЛицо, Владелец) Экспорт 
	
	СтруктураРуководитель = Новый Структура("ОтветственноеЛицо,ФизическоеЛицо, Должность, ДокументПраваПодписи", "","", "", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ОтветственноеЛицо", ОтветственноеЛицо);
	Запрос.Текст = "ВЫБРАТЬ
					|	ОтветственныеЛицаОрганизаций.Ссылка КАК ОтветственноеЛицо,
					|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК ФизическоеЛицо,
					|	ОтветственныеЛицаОрганизаций.Должность КАК Должность,
					|	ОтветственныеЛицаОрганизаций.ДокументПраваПодписи КАК ДокументПраваПодписи
					|ИЗ
					|	Справочник.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
					|ГДЕ
					|	ОтветственныеЛицаОрганизаций.Владелец = &Владелец
					|	И ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = &ОтветственноеЛицо";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		СтруктураРуководитель.ОтветственноеЛицо 	= РезультатЗапроса.ОтветственноеЛицо;
		СтруктураРуководитель.ФизическоеЛицо 		= РезультатЗапроса.ФизическоеЛицо;
		СтруктураРуководитель.Должность 			= РезультатЗапроса.Должность;
		СтруктураРуководитель.ДокументПраваПодписи 	= РезультатЗапроса.ДокументПраваПодписи;
	КонецЕсли;
	
	Возврат СтруктураРуководитель;
	
КонецФункции


#КонецОбласти

#Область Договор

Функция ПечатьЖБИДоговорПоставки(МассивОбъектов, ОбъектыПечати) Экспорт 
	
	Если МассивОбъектов.Количество()>0 Тогда 
		СсылкаДоговор = МассивОбъектов[0];
	Иначе 
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;	
	Макет = Справочники.ДоговорыКонтрагентов.ПолучитьМакет("ЖБИ_ДоговорПоставки");
	
	ДанныеДоговора = ДанныеДоговора(СсылкаДоговор);
	ТаблицаДоговора = Новый ТабличныйДокумент;		
	ДоговорВывестиРаздел("Шапка", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("ПредметДоговора", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_ОбязательстваСторон", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_Условия", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_ОтветственностьCторон", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_СрокДействия", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_Порядок", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_ФорсМажор", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Подвал", ТаблицаДоговора, Макет, ДанныеДоговора);
	
	ДокументРезультат.Вывести(ТаблицаДоговора);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, 1, ОбъектыПечати, СсылкаДоговор);
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ПечатьЖБИДоговорТранспортировки(МассивОбъектов, ОбъектыПечати) Экспорт 
	
	Если МассивОбъектов.Количество()>0 Тогда 
		СсылкаДоговор = МассивОбъектов[0];
	Иначе 
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;	
	Макет = Справочники.ДоговорыКонтрагентов.ПолучитьМакет("ЖБИ_ДоговорТранспортировки");
	
	ДанныеДоговора = ДанныеДоговора(СсылкаДоговор);
	ТаблицаДоговора = Новый ТабличныйДокумент;		
	ДоговорВывестиРаздел("Шапка", ТаблицаДоговора, Макет, ДанныеДоговора);
	
	Если ДанныеДоговора.ВидОтношений = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ДоговорВывестиРаздел("ШапкаЮР", ТаблицаДоговора, Макет, ДанныеДоговора);
	Иначе 
		ДоговорВывестиРаздел("ШапкаИП", ТаблицаДоговора, Макет, ДанныеДоговора);
	КонецЕсли;
	
	ДоговорВывестиРаздел("Раздел_ПредметДоговора", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_Общиее", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_ОбязательстваСторон", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_Обязанности", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_Расчеты", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_ОтветственностьCторон", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_СрокДействия", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_Порядок", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_ФорсМажор", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_Споры", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Раздел_Прочее", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Подвал", ТаблицаДоговора, Макет, ДанныеДоговора);
	
	ДокументРезультат.Вывести(ТаблицаДоговора);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, 1, ОбъектыПечати, СсылкаДоговор);
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ПечатьЖБИДоговорЗакупки(МассивОбъектов, ОбъектыПечати) Экспорт 
	
	Если МассивОбъектов.Количество()>0 Тогда 
		СсылкаДоговор = МассивОбъектов[0];
	Иначе 
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ДокументРезультат 						= Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы 	= ОриентацияСтраницы.Портрет;
	Макет = Справочники.ДоговорыКонтрагентов.ПолучитьМакет("ЖБИ_ДоговорЗакупки");
	
	ДанныеДоговора = ДанныеДоговора(СсылкаДоговор);
	ТаблицаДоговора = Новый ТабличныйДокумент;		
	//ДоговорВывестиРаздел("Шапка", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Договор", ТаблицаДоговора, Макет, ДанныеДоговора);
	//ДоговорВывестиРаздел("Раздел_Условия", ТаблицаДоговора, Макет, ДанныеДоговора);
	//ДоговорВывестиРаздел("Раздел_Приемка", ТаблицаДоговора, Макет, ДанныеДоговора);
	//ДоговорВывестиРаздел("Раздел_УсловияОплаты", ТаблицаДоговора, Макет, ДанныеДоговора);
	//ДоговорВывестиРаздел("Раздел_Гарантии", ТаблицаДоговора, Макет, ДанныеДоговора);
	//ДоговорВывестиРаздел("Раздел_ОтветственностьCторон", ТаблицаДоговора, Макет, ДанныеДоговора);
	//ДоговорВывестиРаздел("Раздел_СрокДействия", ТаблицаДоговора, Макет, ДанныеДоговора);
	//ДоговорВывестиРаздел("Раздел_ФорсМажор", ТаблицаДоговора, Макет, ДанныеДоговора);
	//ДоговорВывестиРаздел("Раздел_Конфиденциальность", ТаблицаДоговора, Макет, ДанныеДоговора);
	//ДоговорВывестиРаздел("Раздел_Заверения", ТаблицаДоговора, Макет, ДанныеДоговора);
	//ДоговорВывестиРаздел("Раздел_Прочее", ТаблицаДоговора, Макет, ДанныеДоговора);
	ДоговорВывестиРаздел("Подвал", ТаблицаДоговора, Макет, ДанныеДоговора);
	
	ДокументРезультат.Вывести(ТаблицаДоговора);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, 1, ОбъектыПечати, СсылкаДоговор);
	
	ДокументРезультат.АвтоМасштаб 	= Истина;
	ДокументРезультат.ПолеСверху	= 2;
	ДокументРезультат.ПолеСнизу		= 2;
	
	Возврат ДокументРезультат;
	
КонецФункции

Функция ДанныеДоговора(СсылкаДоговор)
	
	ДанныеДоговора 				= Новый Структура();
	
	Организация 				= СсылкаДоговор.Организация;
	ДатаАктуальности 			= ТекущаяДатаСеанса();
	//СтруктураОтветственных 		= ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация, ДатаАктуальности);
	//ДолжностьПоставщик 			= СтруктураОтветственных.РуководительДолжность;
	//ДолжностьПокупателя 		= СсылкаДоговор.КонтактноеЛицо.ДолжностьПоВизитке;
	//ДанныеПоПоставщикуВДоговоре = СтруктураОтветственных.РуководительНаименование;
	
	
	СведенияОПоставщике 		= ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация,ДатаАктуальности,,СсылкаДоговор.БанковскийСчет);
	СведенияОПоставщике.Вставить("ПочтаПоставщика",УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,Справочники.ВидыКонтактнойИнформации.EmailОрганизации,ДатаАктуальности));
	СведенияОПоставщике.Вставить("ПочтовыйАдресПоставщика",УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,ДатаАктуальности));
	
	//СведенияОПокупателе 		= ФормированиеПечатныхФорм.СведенияОЮрФизЛице(СсылкаДоговор.Контрагент,ДатаАктуальности,,СсылкаДоговор.БанковскийСчетКонтрагента);
	//СведенияОПокупателе.Вставить("ПочтаПокупателя",УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаДоговор.Контрагент,Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,ДатаАктуальности));
	//СведенияОПокупателе.Вставить("ПочтовыйАдресПокупателя",УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаДоговор.Контрагент,Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,ДатаАктуальности));	
	СведенияОПокупателе = ПолучитьКонтактнуюИнформациюПартнера(СсылкаДоговор.Партнер, СсылкаДоговор);
	
	ДанныеДоговора.Вставить("ВидОтношений",СсылкаДоговор.Контрагент.ЮрФизЛицо);
	ДанныеДоговора.Вставить("НазваниеОрганизации",Организация.НаименованиеСокращенное);
	Если Не ЗначениеЗаполнено(СсылкаДоговор.ЖБИ_ПодписантОрганизация) Тогда 
		СтруктураРуководитель 		= ПолучитьОтветственноеЛицо(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, Организация);
	Иначе
		СтруктураРуководитель = Новый Структура();
		СтруктураРуководитель.Вставить("Должность", СсылкаДоговор.ЖБИ_ПодписантОрганизация.Должность);
		СтруктураРуководитель.Вставить("ФизическоеЛицо", СсылкаДоговор.ЖБИ_ПодписантОрганизация.ФизическоеЛицо);
		СтруктураРуководитель.Вставить("ДокументПраваПодписи", СсылкаДоговор.ЖБИ_ОснованиеСоСтороныОрганизации);
	КонецЕсли;	
	ДанныеДоговора.Вставить("ДолжностьОрганизации",daСклонение(СтруктураРуководитель.Должность,"Р", , "Д", "Абв"));
	ДанныеДоговора.Вставить("ФИООрганизации",daСклонение(СтруктураРуководитель.ФизическоеЛицо, "Р", , , "Фамилия И. О."));
	ДанныеДоговора.Вставить("ПодписантОснованиеСоСтороныОрганизации",СтруктураРуководитель.ДокументПраваПодписи);

	ДанныеДоговора.Вставить("НазваниеОрганизацииПокупателя",СведенияОПокупателе.НаименованиеДляПечатныхФорм);
	ДанныеДоговора.Вставить("ДоговорНомер",СсылкаДоговор.Номер);
	ДанныеДоговора.Вставить("ДоговорДата",Формат(СсылкаДоговор.Дата,"ДФ='dd.MM.yyyy'"));
	
	ФИОПокупатель 			= СсылкаДоговор.ЖБИ_ПодписантКонтрагент.Наименование;
	//ПоискРода 					= "?"; Результат = daСклонение(ФИОПокупатель, "Р", ПоискРода);
	ДанныеДоговора.Вставить("ФИОПокупателя",daСклонение(СсылкаДоговор.ЖБИ_ПодписантКонтрагент.Наименование,"Р", , ,"Фамилия И. О."));	
	ДанныеДоговора.Вставить("ДолжностьПокупателя",daСклонение(СсылкаДоговор.ЖБИ_ПодписантКонтрагент.ЖБИ_Должность,"Р", , "Д", "Абв"));
	ДанныеДоговора.Вставить("ОснованиеСоСтороныКонтрагента",СсылкаДоговор.ЖБИ_ОснованиеСоСтороныКонтрагента);
	
	ДанныеДоговора.Вставить("ЮридическийАдресПоставщика",СведенияОПоставщике.ЮридическийАдрес);
	ДанныеДоговора.Вставить("ЮридическийАдресПокупателя",СведенияОПокупателе.ЮридическийАдрес);
	ДанныеДоговора.Вставить("ПочтовыйАдресПоставщика",СведенияОПоставщике.ПочтовыйАдресПоставщика);
	ДанныеДоговора.Вставить("ПочтовыйАдресПокупателя",СведенияОПокупателе.ПочтовыйАдрес);
	ДанныеДоговора.Вставить("ТелефонПоставщика",СведенияОПоставщике.Телефоны);
	ДанныеДоговора.Вставить("ТелефонПокупателя",СведенияОПокупателе.НомерТелефона);
	ДанныеДоговора.Вставить("ПочтаПоставщика",СведенияОПоставщике.ПочтаПоставщика);
	ДанныеДоговора.Вставить("ПочтаПокупателя",СведенияОПокупателе.ЭлектроннаяПочта);
	ДанныеДоговора.Вставить("ИННКПППоставщика",СведенияОПоставщике.ИНН+"/"+СведенияОПоставщике.КПП);
	ДанныеДоговора.Вставить("ИННКПППокупателя",СведенияОПокупателе.ИНН+"/"+СведенияОПокупателе.КПП);
	ДанныеДоговора.Вставить("РСПоставщика",СведенияОПоставщике.НомерСчета);
	ДанныеДоговора.Вставить("РСПокупателя",СведенияОПокупателе.НомерСчета);
	ДанныеДоговора.Вставить("БанкПоставщик",СведенияОПоставщике.Банк);
	ДанныеДоговора.Вставить("БанкПокупателя",СведенияОПокупателе.Банк);
	ДанныеДоговора.Вставить("БИКПоставщика",СведенияОПоставщике.БИК);
	ДанныеДоговора.Вставить("БИКПокупателя",СведенияОПокупателе.БИК);
	ДанныеДоговора.Вставить("КСПоставщика",СведенияОПоставщике.КоррСчет);
	ДанныеДоговора.Вставить("КСПокупателя",СведенияОПокупателе.КоррСчет);
	ДанныеДоговора.Вставить("ДолжностьОрганизацииИП",СтруктураРуководитель.Должность);
	ДанныеДоговора.Вставить("ДолжностьПокупателяИП",СсылкаДоговор.ЖБИ_ПодписантКонтрагент.ЖБИ_Должность);
	ДанныеДоговора.Вставить("ФИООрганизацииИП",daСклонение(СтруктураРуководитель.ФизическоеЛицо, "И", , , "Фамилия И. О."));
	ДанныеДоговора.Вставить("ФИОПокупателяИП",daСклонение(СсылкаДоговор.ЖБИ_ПодписантКонтрагент.Наименование, "И", , , "Фамилия И. О."));
	ДанныеДоговора.Вставить("ДатаПодписания",Формат(КонецГода(ТекущаяДатаСеанса()),"ДФ=yyyy"));
	//ДанныеДоговора.Вставить("ФИОСокрашенноеПокупателя",ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(СсылкаДоговор.КонтактноеЛицо.Наименование));
	
	Возврат ДанныеДоговора;
	
КонецФункции

Процедура ДоговорВывестиРаздел(ИмяОбласти, ДокументРезультат, Макет, ДанныеДоговора)
	
	ОбластьРаздела = Макет.ПолучитьОбласть(ИмяОбласти);
	ЗаполнитьЗначенияСвойств(ОбластьРаздела.Параметры,ДанныеДоговора);
	//ОбластьРаздела.Параметры.Заполнить(ДанныеДоговора);
	ДокументРезультат.Вывести(ОбластьРаздела);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказКлиента

#Область СчетНаОплату

Процедура ЗаполнитьТабличныйДокументСчетаНаОплату(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	Товары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	//заполним поле Номенклатура поставщика
	СсылкаЗаказ = ДанныеДляПечати.РезультатПоШапке.Выгрузить()[0].Ссылка;
	Товары.Колонки.Добавить("ЖБИ_НоменклатураПоставщика");
	ТоварыНоменклатураПоставщика = СсылкаЗаказ.Товары.Выгрузить();
	Для Каждого НомСтр Из ТоварыНоменклатураПоставщика Цикл
		Товары[НомСтр.НомерСтроки-1].ЖБИ_НоменклатураПоставщика = НомСтр.ЖБИ_НоменклатураПоставщика;
	КонецЦикла;
	
	ЭтапыОплаты = ДанныеДляПечати.РезультатПоЭтапамОплаты.Выгрузить();
	ПервыйДокумент = Истина;	
	Пока ДанныеПечати.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);		
		ТаблицаТовары = Товары.НайтиСтроки(СтруктураПоиска);
		ТаблицаЭтапыОплаты = ЭтапыОплаты.НайтиСтроки(СтруктураПоиска);
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
		ЕстьСкидки = ЗаголовокСкидки.ЕстьСкидки;		
		Макет = Новый ТабличныйДокумент;
		ЗаполнитьРеквизитыШапкиСчетаНаОплату(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ТаблицаТовары);
				
		// Таблица "Товары"
		ОбластьШапкаТаблицы          = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицыСтандарт = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьПодвалТаблицы         = Макет.ПолучитьОбласть("ПодвалТаблицыВсего");
		ОбластьПодвалНДС             = Макет.ПолучитьОбласть("ПодвалТаблицыНДС");

		ВыводШапки = 0;		
		Если ДанныеПечати.УчитыватьНДС Тогда
			ОбластьПодвалСНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВсегоСНДС");
		КонецЕсли;
		
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");		
		МассивПроверкиВывода = Новый Массив;
		
		ИспользоватьНаборы = Ложь;
		Сумма = 0;
		СуммаНДС = 0;
		ВсегоСкидок = 0;
		ВсегоБезСкидок = 0;
		НомерСтроки = 0;
		СоответствиеСтавокНДС = Новый Соответствие;
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыСтандарт;			
			НомерСтроки = НомерСтроки + 1;
			НомерСтрокиПечать = НомерСтроки;	
			Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
				ВыводШапки = 1;
			КонецЕсли;
			
			ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
			
			ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
			
			Товар = ПрефиксИПостфикс.Префикс
			+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			СтрокаТовары.НаименованиеПолное,
			СтрокаТовары.Характеристика,
			,
			, // Серия
			ДополнительныеПараметрыПолученияНаименованияДляПечати)
			+ ПрефиксИПостфикс.Постфикс
			+ " "+Справочники.ЖБИ_НормативныеДокументы.ГостНоменклатурыПоставщика(СтрокаТовары.ЖБИ_НоменклатураПоставщика);
			
			
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Товар", Товар);
			СтруктураДанныхСтроки.Вставить("НомерСтроки", НомерСтрокиПечать);
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаТовары);						
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураДанныхСтроки);
		
			МассивПроверкиВывода.Очистить();
			МассивПроверкиВывода.Добавить(ОбластьСтрокаТаблицы);
			Если НомерСтроки = ТаблицаТовары.Количество() Тогда
				МассивПроверкиВывода.Добавить(ОбластьПодвалТаблицы);
				МассивПроверкиВывода.Добавить(ОбластьПодвалНДС);
				МассивПроверкиВывода.Добавить(ОбластьСуммаПрописью);
			КонецЕсли;
			
			ЦенаЗаполненияСтр = ?(ДанныеПечати.ЦенаВключаетНДС,"Цена с НДС","Цена");
			ОбластьШапкаТаблицы.Параметры.Цена = ЦенаЗаполненияСтр;
			Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
				Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
					ВыводШапки = 2;
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				КонецЕсли;
			Иначе				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				
				Сумма = Сумма + СтрокаТовары.Сумма;
				СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
				
				Если ЕстьСкидки Тогда
					ВсегоСкидок = ВсегоСкидок + СтрокаТовары.СуммаСкидки;
					ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
				КонецЕсли;
				
				Если ДанныеПечати.УчитыватьНДС Тогда
					СуммаНДСПоСтавке = СоответствиеСтавокНДС[СтрокаТовары.СтавкаНДС];
					Если СуммаНДСПоСтавке = Неопределено Тогда
						СуммаНДСПоСтавке = 0;
					КонецЕсли;
					СоответствиеСтавокНДС.Вставить(СтрокаТовары.СтавкаНДС, СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураДанныхВсегоСкидки = Новый Структура;
		
		// Подвал таблицы "Товары"
		Если ЕстьСкидки Тогда
			СтруктураДанныхВсегоСкидки.Вставить("ВсегоСкидок", ?(ЗаголовокСкидки.ТолькоНаценка,-ВсегоСкидок, ВсегоСкидок));
			СтруктураДанныхВсегоСкидки.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
			Если ДанныеПечати.УчитыватьНДС Тогда
				СтруктураДанныхВсегоСкидки.Вставить("ВсегоСуммаНДС", СуммаНДС);
			КонецЕсли;
		КонецЕсли;
		СтруктураДанныхВсегоСкидки.Вставить("Всего", ФормированиеПечатныхФорм.ФорматСумм(Сумма));
		ОбластьПодвалТаблицы.Параметры.Заполнить(СтруктураДанныхВсегоСкидки);
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
		
		// Область "ПодвалТаблицыНДС"
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
				СтруктураДанныхПодвалНДС = Новый Структура;
				СтруктураДанныхПодвалНДС.Вставить("НДС", ФормированиеПечатныхФорм.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, ДанныеПечати.ЦенаВключаетНДС));
				СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", ФормированиеПечатныхФорм.ФорматСумм(ТекСтавкаНДС.Значение, ,"-"));
				ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
				ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
				
			КонецЦикла;
			СтруктураДанныхПодвалВсегоСНДС = Новый Структура;
			СтруктураДанныхПодвалНДС.Вставить("ВсегоСНДС", ФормированиеПечатныхФорм.ФорматСумм(Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС)));
			ОбластьПодвалСНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
			ТабличныйДокумент.Вывести(ОбластьПодвалСНДС);
			
		Иначе
			СтруктураДанныхПодвалНДС = Новый Структура;
			СтруктураДанныхПодвалНДС.Вставить("НДС", НСтр("ru='Без налога (НДС)'"));
			СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", "-");
			ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
			ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
		КонецЕсли;
		
		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока,"RUB","руб.");
		
		СтруктураДанныхСуммаПрописью = Новый Структура;
		СтруктураДанныхСуммаПрописью.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта));
		
		СтруктураДанныхСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ОбластьСуммаПрописью.Параметры.Заполнить(СтруктураДанныхСуммаПрописью);
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		ЗаполнитьРеквизитыПодвалаСчетаНаОплату(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, СоответствиеСтавокНДС, ПараметрыПечати);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкиСчетаНаОплату(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ТаблицаТовары)  
	
	Макет = Документы.ЗаказКлиента.ПолучитьМакет("ЖБИ_СчетНаОплату");
	
	СведенияОПоставщике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");
	ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакета, "ЗаголовокСчета", ДанныеПечати.Организация);
	ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПоставщикЮрАдрес");
	СтруктураДанныхПоставщик = Новый Структура;
	СтруктураДанныхПоставщик.Вставить("ПредставлениеПоставщика", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ОрганизацияПоставщик, ДанныеПечати.Дата),
			"ЮридическийАдрес,Телефоны,"));
	ОбластьМакета = Макет.ПолучитьОбласть("ПоставщикЮрАдрес");
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПоставщик);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("ОбразецЗаполненияПП");
	СтруктураДанныхШапки = Новый Структура;
	СтруктураДанныхШапки.Вставить("ИНН", СведенияОПоставщике.ИНН);
	СтруктураДанныхШапки.Вставить("КПП",СведенияОПоставщике.КПП);
	ПредставлениеПоставщикаДляПлатПоручения = "";
	
	СтруктураДанныхШапки.Вставить("ИдентификаторПлатежа", ДанныеПечати.ИдентификаторПлатежа);
	
	Если ЗначениеЗаполнено(ДанныеПечати.БанковскийСчет) Тогда		
		Если ЗначениеЗаполнено(ДанныеПечати.БИКБанкаДляРасчетов) Тогда
			Банк		= ДанныеПечати.НаименованиеБанкаДляРасчетов;
			БИК         = ДанныеПечати.БИКБанкаДляРасчетов;
			КоррСчет    = ДанныеПечати.КоррСчетБанкаДляРасчетов;
			ГородБанка  = ДанныеПечати.ГородБанкаДляРасчетов;
			НомерСчета  = ДанныеПечати.КоррСчетБанка;
		Иначе
			Банк		= ДанныеПечати.НаименованиеБанка;
			БИК         = ДанныеПечати.БИКБанк;
			КоррСчет    = ДанныеПечати.КоррСчетБанка;
			ГородБанка  = ДанныеПечати.ГородБанка;
			НомерСчета  = ДанныеПечати.НомерБанковскогоСчета;
		КонецЕсли;
		
		СтруктураДанныхШапки.Вставить("БИКБанкаПолучателя", БИК);
		СтруктураДанныхШапки.Вставить("БанкПолучателя", Банк);
		СтруктураДанныхШапки.Вставить("БанкПолучателяПредставление", СокрЛП(Банк) + " " + ГородБанка);
		СтруктураДанныхШапки.Вставить("СчетБанкаПолучателя", КоррСчет);
		СтруктураДанныхШапки.Вставить("СчетБанкаПолучателяПредставление", КоррСчет);
		СтруктураДанныхШапки.Вставить("СчетПолучателяПредставление", НомерСчета);
		СтруктураДанныхШапки.Вставить("СчетПолучателя", НомерСчета);
		ПредставлениеПоставщикаДляПлатПоручения = ДанныеПечати.БанковскийСчетТекстКорреспондента;		
	КонецЕсли;
	
	Если ПустаяСтрока(ПредставлениеПоставщикаДляПлатПоручения) Тогда
		ПредставлениеПоставщикаДляПлатПоручения = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПоставщике, "ПолноеНаименование,");
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(ДанныеПечати.НазначениеПлатежа)
	//	И ТипЗнч(ДанныеПечати.Ссылка) <> Тип("ДокументСсылка.СчетНаОплатуКлиенту") Тогда		
	//	СтруктураДанныхШапки.Вставить("НазначениеПлатежа", Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
	//	ДанныеПечати.Номер, ДанныеПечати.Ссылка));		
	//Иначе		
	//	СтруктураДанныхШапки.Вставить("НазначениеПлатежа", ДанныеПечати.НазначениеПлатежа);		
	//КонецЕсли;
	
	НазначениеПлатежа = "Оплата по счету клиента "+ДанныеПечати.Номер + " от "+Формат(ДанныеПечати.Дата,"ДЛФ=DD");
	СтруктураДанныхШапки.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	
	СтруктураДанныхШапки.Вставить("ПредставлениеПоставщикаДляПлатПоручения", ПредставлениеПоставщикаДляПлатПоручения);
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);		
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");	
	ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='Счет на оплату'"));
	СтруктураДанныхШапки = Новый Структура;
	СтруктураДанныхШапки.Вставить("ТекстЗаголовка", ТекстЗаголовка);
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
	
	СтруктураДанныхПоставщик = Новый Структура;
	СтруктураДанныхПоставщик.Вставить("ПредставлениеПоставщика", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ОрганизацияПоставщик, ДанныеПечати.Дата),
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПоставщик);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
	СтруктураДанныхПокупатель = Новый Структура;
	СтруктураДанныхПокупатель.Вставить("ПредставлениеПолучателя", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата),
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,"));
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПокупатель);
	ТабличныйДокумент.Вывести(ОбластьМакета);
			
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаСчетаНаОплату(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, СоответствиеСтавокНДС, ПараметрыПечати)
	
	Организация 		 	= ДанныеПечати.Ссылка.Организация;
	МассивПроверкиВывода 	= Новый Массив;
	Если ПараметрыПечати.Свойство("ОтображатьФаксимиле") Тогда 
		Факсимиле 			= Истина;
		ФаксимилеСотрудника = ДанныеПечати.Ссылка.ЖБИ_ПодписантПоставщик.ЖБИ_ФаксимилеПользователя;
	Иначе 
		Факсимиле = Ложь;
	КонецЕсли;
	
	АдресДоставки = ДанныеПечати.Ссылка.АдресДоставки;
	Область = Макет.ПолучитьОбласть("УсловияДоставки");
	Область.Параметры.АдресДоставки = АдресДоставки;
	ТабличныйДокумент.Вывести(Область);
	
	// Вывести подписи
	Если Факсимиле Тогда
		Область = Макет.ПолучитьОбласть("ПодвалСчетаПодписьФаксимиле");
		ВывестиФаксимилеОрганизацииВТабличныйДокумент(Макет, Область, "ПодвалФаксимиле", Организация, "ФаксимилеОрганизации");
		ВывестиФаксимилеСотрудникаВТабличныйДокумент(Макет, Область, "ПодвалФаксимиле", ФаксимилеСотрудника, "ФаксимилеСотрудника");
		ВывестиФаксимилеСотрудникаВТабличныйДокумент(Макет, Область, "ПодвалФаксимиле", ФаксимилеСотрудника, "ФаксимилеСотрудника1");
	Иначе 
		Область = Макет.ПолучитьОбласть("ПодвалСчета");
	КонецЕсли;
	
	МассивКИ = Новый Массив();
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	ТаблицаИсполнители = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ДанныеПечати.Ссылка.Менеджер, МассивКИ, ТекущаяДатаСеанса(), Ложь);
	
	Если ЗначениеЗаполнено(ДанныеПечати.Ссылка.ЖБИ_ПодписантПоставщик) Тогда 
		СтруктураРуководитель = Новый Структура();
		СтруктураРуководитель.Вставить("Должность", ДанныеПечати.Ссылка.ЖБИ_ПодписантПоставщик.Должность);
		СтруктураРуководитель.Вставить("ФизическоеЛицо", ДанныеПечати.Ссылка.ЖБИ_ПодписантПоставщик.ФизическоеЛицо);
		СтруктураРуководитель.Вставить("ДокументПраваПодписи", ДанныеПечати.Ссылка.ЖБИ_ПодписантПоставщик.Наименование);
	Иначе
		СтруктураРуководитель = ПолучитьОтветственноеЛицо(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, Организация);	
	КонецЕсли;
	
	СтруктураДанныхПодвал = Новый Структура;
	//СтруктураДанныхПодвал.Вставить("ФИОРуководителя", daСклонение(СтруктураРуководитель.ФизическоеЛицо, "И", , , "Фамилия И. О."));
	СтруктураДанныхПодвал.Вставить("ФИОРуководителя", СтруктураРуководитель.ДокументПраваПодписи);
	СтруктураДанныхПодвал.Вставить("ДолжностьРуководителя", СтруктураРуководитель.Должность);
	СтруктураДанныхПодвал.Вставить("ФИОБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
	ЗаполнитьИсполнителейПечати(ТаблицаИсполнители,СтруктураДанныхПодвал, ДанныеПечати.Ссылка);
	
	Область.Параметры.Заполнить(СтруктураДанныхПодвал);
	
	МассивПроверкиВывода.Очистить();
	МассивПроверкиВывода.Добавить(Область);
	Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	ТабличныйДокумент.Вывести(Область);
	
КонецПроцедуры

#КонецОбласти

#Область Спецификация

Процедура ЗаполнитьТабличныйДокументСпецификация_ЗаказПоставщику(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ИспользоватьРучныеСкидки         = Ложь;
	ИспользоватьАвтоматическиеСкидки = Ложь;
	
	ПервыйДокумент = Истина;	
	Для Каждого НомСтр Из ДанныеДляПечати Цикл 
		
		ДанныеПечати 					= НомСтр;
		Товары 							= НомСтр.Товары.Выгрузить();		
		ТаблицаТовары 					= Товары;
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало 	= ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаголовокСкидки 	= ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
		ЕстьСкидки 			= ЗаголовокСкидки.ЕстьСкидки;		
		Макет 				= Новый ТабличныйДокумент;
		ЗаполнитьРеквизитыШапкиСпецификация_ЗаказПоставщику(НомСтр, Макет, ТабличныйДокумент, ТаблицаТовары);
				
		// Таблица "Товары"
		ОбластьШапкаТаблицы          = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицыСтандарт = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьПодвалТаблицы         = Макет.ПолучитьОбласть("ПодвалТаблицыВсего");
		ОбластьПодвалНДС             = Макет.ПолучитьОбласть("ПодвалТаблицыНДС");

		ВыводШапки = 0;		
		Если НомСтр.ЦенаВключаетНДС Тогда
			ОбластьПодвалСНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВсегоСНДС");
		КонецЕсли;
		
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");		
		МассивПроверкиВывода = Новый Массив;
		
		ИспользоватьНаборы = Ложь;
		Сумма = 0;
		СуммаНДС = 0;
		ВсегоСкидок = 0;
		ВсегоБезСкидок = 0;
		НомерСтроки = 0;
		СоответствиеСтавокНДС = Новый Соответствие;
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыСтандарт;			
			НомерСтроки = НомерСтроки + 1;
			НомерСтрокиПечать = НомерСтроки;	
			Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
				ВыводШапки = 1;
			КонецЕсли;
			
			//ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
			//
			//ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
			//
			//Товар = ПрефиксИПостфикс.Префикс
			//+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			//СтрокаТовары.Номенклатура.НаименованиеПолное,
			//СтрокаТовары.Характеристика,
			//,
			//, // Серия
			//ДополнительныеПараметрыПолученияНаименованияДляПечати)
			//+ ПрефиксИПостфикс.Постфикс;
			
			Товар = СформироватьПредставлениеПечатиДляТовара(СтрокаТовары.Номенклатура, СтрокаТовары.НоменклатураПоставщика);
			
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Товар", Товар);
			СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", СтрокаТовары.Номенклатура.ЕдиницаИзмерения);
			СтруктураДанныхСтроки.Вставить("НомерСтроки", НомерСтрокиПечать);
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаТовары);	
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураДанныхСтроки);
		
			МассивПроверкиВывода.Очистить();
			МассивПроверкиВывода.Добавить(ОбластьСтрокаТаблицы);
			Если НомерСтроки = ТаблицаТовары.Количество() Тогда
				МассивПроверкиВывода.Добавить(ОбластьПодвалТаблицы);
				МассивПроверкиВывода.Добавить(ОбластьПодвалНДС);
				МассивПроверкиВывода.Добавить(ОбластьСуммаПрописью);
			КонецЕсли;
			
			ЦенаЗаполненияСтр = ?(НомСтр.ЦенаВключаетНДС,"Цена с НДС","Цена");
			ОбластьШапкаТаблицы.Параметры.Цена = ЦенаЗаполненияСтр;
			Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
				Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
					ВыводШапки = 2;
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				КонецЕсли;
			Иначе				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				
				Сумма = Сумма + СтрокаТовары.Сумма;
				СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
				
				Если ЕстьСкидки Тогда
					ВсегоСкидок = ВсегоСкидок + СтрокаТовары.СуммаСкидки;
					ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
				КонецЕсли;
				
				Если НомСтр.ЦенаВключаетНДС Тогда
					СуммаНДСПоСтавке = СоответствиеСтавокНДС[СтрокаТовары.СтавкаНДС];
					Если СуммаНДСПоСтавке = Неопределено Тогда
						СуммаНДСПоСтавке = 0;
					КонецЕсли;
					СоответствиеСтавокНДС.Вставить(СтрокаТовары.СтавкаНДС, СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураДанныхВсегоСкидки = Новый Структура;
		
		// Подвал таблицы "Товары"
		Если ЕстьСкидки Тогда
			СтруктураДанныхВсегоСкидки.Вставить("ВсегоСкидок", ?(ЗаголовокСкидки.ТолькоНаценка,-ВсегоСкидок, ВсегоСкидок));
			СтруктураДанныхВсегоСкидки.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
			Если НомСтр.ЦенаВключаетНДС Тогда
				СтруктураДанныхВсегоСкидки.Вставить("ВсегоСуммаНДС", СуммаНДС);
			КонецЕсли;
		КонецЕсли;
		СтруктураДанныхВсегоСкидки.Вставить("Всего", ФормированиеПечатныхФорм.ФорматСумм(Сумма));
		ОбластьПодвалТаблицы.Параметры.Заполнить(СтруктураДанныхВсегоСкидки);
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
		
		// Область "ПодвалТаблицыНДС"
		Если НомСтр.ЦенаВключаетНДС Тогда
			
			Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
				СтруктураДанныхПодвалНДС = Новый Структура;
				СтруктураДанныхПодвалНДС.Вставить("НДС", ФормированиеПечатныхФорм.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, НомСтр.ЦенаВключаетНДС));
				СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", ФормированиеПечатныхФорм.ФорматСумм(ТекСтавкаНДС.Значение, ,"-"));
				ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
				ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
				
			КонецЦикла;
			СтруктураДанныхПодвалВсегоСНДС = Новый Структура;
			СтруктураДанныхПодвалНДС.Вставить("ВсегоСНДС", ФормированиеПечатныхФорм.ФорматСумм(Сумма + ?(НомСтр.ЦенаВключаетНДС, 0, СуммаНДС)));
			ОбластьПодвалСНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
			ТабличныйДокумент.Вывести(ОбластьПодвалСНДС);
			
		Иначе
			СтруктураДанныхПодвалНДС = Новый Структура;
			СтруктураДанныхПодвалНДС.Вставить("НДС", НСтр("ru='Без налога (НДС)'"));
			СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", "-");
			ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
			ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
		КонецЕсли;
		
		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(НомСтр.ЦенаВключаетНДС, 0, СуммаНДС);
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, НомСтр.Валюта));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока,"RUB","руб.");
		
		СтруктураДанныхСуммаПрописью = Новый Структура;
		СтруктураДанныхСуммаПрописью.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, НомСтр.Валюта));
		
		СтруктураДанныхСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ОбластьСуммаПрописью.Параметры.Заполнить(СтруктураДанныхСуммаПрописью);
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		ЗаполнитьРеквизитыПодвалаСпецификация_ЗаказПоставщику(НомСтр, Макет, ТабличныйДокумент, СоответствиеСтавокНДС, ПараметрыПечати);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, НомСтр.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкиСпецификация_ЗаказПоставщику(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаТовары) 
	
	Макет = Документы.ЗаказПоставщику.ПолучитьМакет("ЖБИ_Спецификация");
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");	
	СтруктураДанныхШапки = Новый Структура;
	СтруктураДанныхШапки.Вставить("НомерДоговора", ДанныеПечати.Ссылка.Договор.Номер);
	СтруктураДанныхШапки.Вставить("ДатаДокумента", Формат(ДанныеПечати.Дата,"ДФ='dd.MM.yyyy'"));
	СтруктураДанныхШапки.Вставить("НомерСпецификации", Формат(ДанныеПечати.ЖБИ_НомерСпецификации,"ДФ='dd.MM.yyyy'"));
	//ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='По счету на оплату'"));
	ТекстЗаголовка = "По счету на оплату № " + ДанныеПечати.НомерПоДаннымПоставщика + " от " + Формат(ДанныеПечати.ДатаПоДаннымПоставщика,"ДЛФ=DD"); 	
	СтруктураДанныхШапки.Вставить("ТекстЗаголовка", ТекстЗаголовка);
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
	ТабличныйДокумент.Вывести(ОбластьМакета);
			
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаСпецификация_ЗаказПоставщику(ДанныеПечати, Макет, ТабличныйДокумент, СоответствиеСтавокНДС, ПараметрыПечати)
	
	МассивПроверкиВывода = Новый Массив;
	Организация 		 = ДанныеПечати.Организация;
	
	//УсловияРасчета
	УсловияРасчета1 = ДанныеПечати.ЖБИ_УсловиеВДоговоре1.УсловиеВДоговоре;
	УсловияРасчета2 = ДанныеПечати.ЖБИ_УсловиеВДоговоре2.УсловиеВДоговоре;
	УсловияРасчета3 = ДанныеПечати.ЖБИ_УсловиеВДоговоре3.УсловиеВДоговоре;
	//УсловияРасчета4 = ДанныеПечати.ЖБИ_УсловиеВДоговоре4.УсловиеВДоговоре;
	УсловияРасчета5 = ДанныеПечати.ЖБИ_УсловиеВДоговоре5.УсловиеВДоговоре;
	
	НомСтр 					= 1;
	ОбластьУсловияРасчета 	= Макет.ПолучитьОбласть("УсловияРасчета");
	УсловияРасчетаДополнение = Макет.ПолучитьОбласть("УсловияРасчетаДополнение");
	Если ЗначениеЗаполнено(УсловияРасчета1) Тогда
		НомСтр = НомСтр + 1;
		ОбластьУсловияРасчета.Параметры.УсловияРасчета1 = ?(УсловияРасчета1 = "","",Строка(НомСтр) + ". " + УсловияРасчета1);
		НомСтр = ?(УсловияРасчета2 = "",НомСтр,НомСтр +1);
		ОбластьУсловияРасчета.Параметры.УсловияРасчета2 = ?(УсловияРасчета2 = "","",Строка(НомСтр) + ". " + УсловияРасчета2);
		НомСтр = ?(УсловияРасчета3 = "",НомСтр,НомСтр +1);
		ОбластьУсловияРасчета.Параметры.УсловияРасчета3 = ?(УсловияРасчета3 = "","",Строка(НомСтр) + ". " + УсловияРасчета3);
		//НомСтр = ?(УсловияРасчета4 = "",НомСтр,НомСтр +1);
		//ОбластьУсловияРасчета.Параметры.УсловияРасчета4 = ?(УсловияРасчета4 = "","",Строка(НомСтр) + ". " + УсловияРасчета4);
		НомСтр = ?(УсловияРасчета5 = "",НомСтр,НомСтр +1);
		УсловияРасчетаДополнение.Параметры.УсловияРасчета5 = ?(УсловияРасчета5 = "","",Строка(НомСтр) + ". " + УсловияРасчета5);
	ИначеЕсли ЗначениеЗаполнено(УсловияРасчета2) Тогда
		НомСтр = НомСтр + 1;
		ОбластьУсловияРасчета.Параметры.УсловияРасчета2 = ?(УсловияРасчета2 = "","",Строка(НомСтр) + ". " + УсловияРасчета2);
		НомСтр = ?(УсловияРасчета3 = "",НомСтр,НомСтр +1);
		ОбластьУсловияРасчета.Параметры.УсловияРасчета3 = ?(УсловияРасчета3 = "","",Строка(НомСтр) + ". " + УсловияРасчета3);
		//НомСтр = ?(УсловияРасчета4 = "",НомСтр,НомСтр +1);
		//ОбластьУсловияРасчета.Параметры.УсловияРасчета4 = ?(УсловияРасчета4 = "","",Строка(НомСтр) + ". " + УсловияРасчета4);
		НомСтр = ?(УсловияРасчета5 = "",НомСтр,НомСтр +1);
		УсловияРасчетаДополнение.Параметры.УсловияРасчета5 = ?(УсловияРасчета5 = "","",Строка(НомСтр) + ". " + УсловияРасчета5);
	ИначеЕсли ЗначениеЗаполнено(УсловияРасчета3) Тогда
		НомСтр = НомСтр + 1;
		ОбластьУсловияРасчета.Параметры.УсловияРасчета3 = ?(УсловияРасчета3 = "","",Строка(НомСтр) + ". " + УсловияРасчета3);
		//НомСтр = ?(УсловияРасчета4 = "",НомСтр,НомСтр +1);
		//ОбластьУсловияРасчета.Параметры.УсловияРасчета4 = ?(УсловияРасчета4 = "","",Строка(НомСтр) + ". " + УсловияРасчета4);
		НомСтр = ?(УсловияРасчета5 = "",НомСтр,НомСтр +1);
		УсловияРасчетаДополнение.Параметры.УсловияРасчета5 = ?(УсловияРасчета5 = "","",Строка(НомСтр) + ". " + УсловияРасчета5);
	//ИначеЕсли ЗначениеЗаполнено(УсловияРасчета4) Тогда
	//	НомСтр = НомСтр +1;
	//	ОбластьУсловияРасчета.Параметры.УсловияРасчета4 = ?(УсловияРасчета4 = "","",Строка(НомСтр) + ". " + УсловияРасчета4);
	//	НомСтр = ?(УсловияРасчета5 = "",НомСтр,НомСтр +1);
	//	ОбластьУсловияРасчета.Параметры.УсловияРасчета5 = ?(УсловияРасчета5 = "","",Строка(НомСтр) + ". " + УсловияРасчета5);
	ИначеЕсли ЗначениеЗаполнено(УсловияРасчета5) Тогда
		НомСтр 				= ?(УсловияРасчета5 = "",НомСтр,НомСтр +1);
		УсловияРасчетаДополнение.Параметры.УсловияРасчета5 = ?(УсловияРасчета5 = "","",Строка(НомСтр) + ". " + УсловияРасчета5);
	КонецЕсли;	
	
	ТабличныйДокумент.Вывести(ОбластьУсловияРасчета);
	Если Не ПустаяСтрока(УсловияРасчета5) Тогда 
		ТабличныйДокумент.Вывести(УсловияРасчетаДополнение);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеПечати.Договор.ЖБИ_ПодписантОрганизация) Тогда 
		СтруктураРуководитель 		= ПолучитьОтветственноеЛицо(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, Организация);
	Иначе
		СтруктураРуководитель = Новый Структура();
		СтруктураРуководитель.Вставить("Должность", ДанныеПечати.Договор.ЖБИ_ПодписантОрганизация.Должность);
		СтруктураРуководитель.Вставить("ФизическоеЛицо", ДанныеПечати.Договор.ЖБИ_ПодписантОрганизация.ФизическоеЛицо);
		СтруктураРуководитель.Вставить("ДокументПраваПодписи", ДанныеПечати.Договор.ЖБИ_ОснованиеСоСтороныОрганизации);
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалСчета");
	
	//Покупатель
	СтруктураДанныхПокупатель = Новый Структура;
	СтруктураДанныхПокупатель.Вставить("ПредставлениеПолучателя", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ДанныеПечати.Дата),
			"ПолноеНаименование"));
	ОбластьПодвал.Параметры.ПредставлениеПолучателя 	= СтруктураДанныхПокупатель.ПредставлениеПолучателя;
	ОбластьПодвал.Параметры.ДолжностьПокупателя 		= ДанныеПечати.Ссылка.ЖБИ_ПодписантПокупатель.Должность;
	ОбластьПодвал.Параметры.ФИОСокрашенноеПокупателя 	= daСклонение(ДанныеПечати.Ссылка.ЖБИ_ПодписантПокупатель.Наименование, "И", , , "Фамилия И. О.");
	
	//Поставщик	
	СтруктураДанныхПоставщик = Новый Структура;
	СтруктураДанныхПоставщик.Вставить("ПредставлениеПоставщика", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата),
			"ПолноеНаименование"));
	ОбластьПодвал.Параметры.ПредставлениеПоставщика 	= СтруктураДанныхПоставщик.ПредставлениеПоставщика;
	ОбластьПодвал.Параметры.ДолжностьПоставщик 			= ДанныеПечати.Ссылка.ЖБИ_ПодписантПоставщик.ЖБИ_Должность;;
	ОбластьПодвал.Параметры.ФИОСокрашенноеПостащик 		= daСклонение(ДанныеПечати.Ссылка.ЖБИ_ПодписантПоставщик.Наименование,"И", , ,"Фамилия И. О.");
	
	ОбластьПодвал.Параметры.ДатаСпецификации = Формат(ДанныеПечати.Ссылка.ЖБИ_ДатаСпецификации,"ДФ='dd.MM.yyyy'");
	
	МассивПроверкиВывода.Очистить();
	МассивПроверкиВывода.Добавить(ОбластьПодвал);
	Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	МассивКИ = Новый Массив();
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	
	СтруктураДанныхПодвал 	= Новый Структура;
	ТаблицаИсполнители		= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ДанныеПечати.Ссылка.Менеджер, МассивКИ, ТекущаяДатаСеанса(), Ложь);
	ЗаполнитьИсполнителейПечати(ТаблицаИсполнители,СтруктураДанныхПодвал, ДанныеПечати.Ссылка);

	ОбластьПодвал.Параметры.Заполнить(СтруктураДанныхПодвал);
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументСпецификация(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	
	ДанныеПечати = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	Товары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	//заполним поле Номенклатура поставщика
	СсылкаЗаказ = ДанныеДляПечати.РезультатПоШапке.Выгрузить()[0].Ссылка;
	Товары.Колонки.Добавить("ЖБИ_НоменклатураПоставщика");
	ТоварыНоменклатураПоставщика = СсылкаЗаказ.Товары.Выгрузить();
	Для Каждого НомСтр Из ТоварыНоменклатураПоставщика Цикл
		Товары[НомСтр.НомерСтроки-1].ЖБИ_НоменклатураПоставщика = НомСтр.ЖБИ_НоменклатураПоставщика;	КонецЦикла;
	
	ЭтапыОплаты = ДанныеДляПечати.РезультатПоЭтапамОплаты.Выгрузить();
	ПервыйДокумент = Истина;	
	Пока ДанныеПечати.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);		
		ТаблицаТовары = Товары.НайтиСтроки(СтруктураПоиска);
		ТаблицаЭтапыОплаты = ЭтапыОплаты.НайтиСтроки(СтруктураПоиска);
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
		ЕстьСкидки = ЗаголовокСкидки.ЕстьСкидки;		
		Макет = Новый ТабличныйДокумент;
		ЗаполнитьРеквизитыШапкиСпецификация(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ТаблицаТовары);
				
		// Таблица "Товары"
		ОбластьШапкаТаблицы          = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицыСтандарт = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьПодвалТаблицы         = Макет.ПолучитьОбласть("ПодвалТаблицыВсего");
		ОбластьПодвалНДС             = Макет.ПолучитьОбласть("ПодвалТаблицыНДС");

		ВыводШапки = 0;		
		Если ДанныеПечати.УчитыватьНДС Тогда
			ОбластьПодвалСНДС = Макет.ПолучитьОбласть("ПодвалТаблицыВсегоСНДС");
		КонецЕсли;
		
		ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");		
		МассивПроверкиВывода = Новый Массив;
		
		ИспользоватьНаборы = Ложь;
		Сумма = 0;
		СуммаНДС = 0;
		ВсегоСкидок = 0;
		ВсегоБезСкидок = 0;
		НомерСтроки = 0;
		СоответствиеСтавокНДС = Новый Соответствие;
		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТовары.ЖБИ_НоменклатураПоставщика) Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбластьСтрокаТаблицы = ОбластьСтрокаТаблицыСтандарт;			
			НомерСтроки = НомерСтроки + 1;
			НомерСтрокиПечать = НомерСтроки;	
			Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
				ВыводШапки = 1;
			КонецЕсли;
			
			ПрефиксИПостфикс = НаборыСервер.ПолучитьПрефиксИПостфикс(СтрокаТовары, ИспользоватьНаборы);
			
			//ДополнительныеПараметрыПолученияНаименованияДляПечати = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
			
			//Товар = ПрефиксИПостфикс.Префикс
			//+ НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			//СтрокаТовары.НаименованиеПолное,
			//СтрокаТовары.Характеристика,
			//,
			//, // Серия
			//ДополнительныеПараметрыПолученияНаименованияДляПечати)
			//+ ПрефиксИПостфикс.Постфикс;
			
			Товар = СформироватьПредставлениеПечатиДляТовара(СтрокаТовары.Номенклатура, СтрокаТовары.ЖБИ_НоменклатураПоставщика);
			
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("Товар", Товар);
			СтруктураДанныхСтроки.Вставить("ЕдиницаИзмерения", СтрокаТовары.Номенклатура.ЕдиницаИзмерения);
			СтруктураДанныхСтроки.Вставить("НомерСтроки", НомерСтрокиПечать);
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтрокаТовары);	
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураДанныхСтроки);
		
			МассивПроверкиВывода.Очистить();
			МассивПроверкиВывода.Добавить(ОбластьСтрокаТаблицы);
			Если НомерСтроки = ТаблицаТовары.Количество() Тогда
				МассивПроверкиВывода.Добавить(ОбластьПодвалТаблицы);
				МассивПроверкиВывода.Добавить(ОбластьПодвалНДС);
				МассивПроверкиВывода.Добавить(ОбластьСуммаПрописью);
			КонецЕсли;
			
			ЦенаЗаполненияСтр = ?(ДанныеПечати.УчитыватьНДС,"Цена с НДС","Цена");
			ОбластьШапкаТаблицы.Параметры.Цена = ЦенаЗаполненияСтр;
			Если ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
				Если (НомерСтроки = 1 И ВыводШапки = 0) ИЛИ (НомерСтроки = 0 И ВыводШапки = 1) Тогда
					ВыводШапки = 2;
					ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
				КонецЕсли;
			Иначе				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
			Если Не НаборыСервер.ИспользоватьОбластьКомплектующие(СтрокаТовары, ИспользоватьНаборы) Тогда
				
				Сумма = Сумма + СтрокаТовары.Сумма;
				СуммаНДС = СуммаНДС + СтрокаТовары.СуммаНДС;
				
				Если ЕстьСкидки Тогда
					ВсегоСкидок = ВсегоСкидок + СтрокаТовары.СуммаСкидки;
					ВсегоБезСкидок = ВсегоБезСкидок + СтрокаТовары.СуммаБезСкидки;
				КонецЕсли;
				
				Если ДанныеПечати.УчитыватьНДС Тогда
					СуммаНДСПоСтавке = СоответствиеСтавокНДС[СтрокаТовары.СтавкаНДС];
					Если СуммаНДСПоСтавке = Неопределено Тогда
						СуммаНДСПоСтавке = 0;
					КонецЕсли;
					СоответствиеСтавокНДС.Вставить(СтрокаТовары.СтавкаНДС, СуммаНДСПоСтавке + СтрокаТовары.СуммаНДС);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураДанныхВсегоСкидки = Новый Структура;
		
		// Подвал таблицы "Товары"
		Если ЕстьСкидки Тогда
			СтруктураДанныхВсегоСкидки.Вставить("ВсегоСкидок", ?(ЗаголовокСкидки.ТолькоНаценка,-ВсегоСкидок, ВсегоСкидок));
			СтруктураДанныхВсегоСкидки.Вставить("ВсегоБезСкидок", ВсегоБезСкидок);
			Если ДанныеПечати.УчитыватьНДС Тогда
				СтруктураДанныхВсегоСкидки.Вставить("ВсегоСуммаНДС", СуммаНДС);
			КонецЕсли;
		КонецЕсли;
		СтруктураДанныхВсегоСкидки.Вставить("Всего", ФормированиеПечатныхФорм.ФорматСумм(Сумма));
		ОбластьПодвалТаблицы.Параметры.Заполнить(СтруктураДанныхВсегоСкидки);
		ТабличныйДокумент.Вывести(ОбластьПодвалТаблицы);
		
		// Область "ПодвалТаблицыНДС"
		Если ДанныеПечати.УчитыватьНДС Тогда
			
			Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
				СтруктураДанныхПодвалНДС = Новый Структура;
				СтруктураДанныхПодвалНДС.Вставить("НДС", ФормированиеПечатныхФорм.ТекстНДСПоСтавке(ТекСтавкаНДС.Ключ, ДанныеПечати.ЦенаВключаетНДС));
				СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", ФормированиеПечатныхФорм.ФорматСумм(ТекСтавкаНДС.Значение, ,"-"));
				ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
				ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
				
			КонецЦикла;
			СтруктураДанныхПодвалВсегоСНДС = Новый Структура;
			СтруктураДанныхПодвалНДС.Вставить("ВсегоСНДС", ФормированиеПечатныхФорм.ФорматСумм(Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС)));
			ОбластьПодвалСНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
			ТабличныйДокумент.Вывести(ОбластьПодвалСНДС);
			
		Иначе
			СтруктураДанныхПодвалНДС = Новый Структура;
			СтруктураДанныхПодвалНДС.Вставить("НДС", НСтр("ru='Без налога (НДС)'"));
			СтруктураДанныхПодвалНДС.Вставить("ВсегоНДС", "-");
			ОбластьПодвалНДС.Параметры.Заполнить(СтруктураДанныхПодвалНДС);
			ТабличныйДокумент.Вывести(ОбластьПодвалНДС);
		КонецЕсли;
		
		// Вывести Сумму прописью
		СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", НомерСтроки);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока,"RUB","руб.");
		
		СтруктураДанныхСуммаПрописью = Новый Структура;
		СтруктураДанныхСуммаПрописью.Вставить("СуммаПрописью", РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта));
		
		СтруктураДанныхСуммаПрописью.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
		ОбластьСуммаПрописью.Параметры.Заполнить(СтруктураДанныхСуммаПрописью);
		ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		
		ЗаполнитьРеквизитыПодвалаСпецификация(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, СоответствиеСтавокНДС, ПараметрыПечати);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкиСпецификация(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ТаблицаТовары) 
	
	Макет = Документы.ЗаказКлиента.ПолучитьМакет("ЖБИ_Спецификация");	
	
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");	
	СтруктураДанныхШапки = Новый Структура;
	СтруктураДанныхШапки.Вставить("НомерДоговора", ДанныеПечати.Ссылка.Договор.Номер);
	СтруктураДанныхШапки.Вставить("ДатаДокумента", Формат(ДанныеПечати.Ссылка.Договор.Дата,"ДФ='dd.MM.yyyy'"));
	ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru='По счету на оплату'"));
	СтруктураДанныхШапки.Вставить("ТекстЗаголовка", ТекстЗаголовка);
	СтруктураДанныхШапки.Вставить("НомерСпецификации", Формат(ДанныеПечати.Ссылка.ЖБИ_НомерСпецификации, "ДФ='dd.MM.yyyy'"));
	ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
	ТабличныйДокумент.Вывести(ОбластьМакета);
			
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвалаСпецификация(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, СоответствиеСтавокНДС, ПараметрыПечати)
	
	МассивПроверкиВывода = Новый Массив;
	Организация 		 = ДанныеПечати.Ссылка.Организация;
	
	//АдресДоставки
	АдресДоставки = ДанныеПечати.Ссылка.АдресДоставки;
	ОбластьАдресДоставки = Макет.ПолучитьОбласть("УсловияДоставки");
	ОбластьАдресДоставки.Параметры.АдресДоставки = АдресДоставки;
	ТабличныйДокумент.Вывести(ОбластьАдресДоставки);
	
	//УсловияРасчета
	УсловияРасчета = ДанныеПечати.Ссылка.ЖБИ_УсловиеВДоговоре1.УсловиеВДоговоре;
	ОбластьУсловияРасчета = Макет.ПолучитьОбласть("УсловияРасчета");
	ОбластьУсловияРасчета.Параметры.УсловияРасчета = УсловияРасчета;
	ТабличныйДокумент.Вывести(ОбластьУсловияРасчета);
	
	//УсловияОтгрузки
	УсловияОтгрузки = ДанныеПечати.Ссылка.ЖБИ_УсловиеВДоговоре2.УсловиеВДоговоре;
	ОбластьУсловияОтгрузки = Макет.ПолучитьОбласть("УсловияОтгрузки");
	ОбластьУсловияОтгрузки.Параметры.УсловияОтгрузки = УсловияОтгрузки;
	ТабличныйДокумент.Вывести(ОбластьУсловияОтгрузки);
	
	//УсловияДополнение
	УсловияДополнение = ДанныеПечати.Ссылка.ЖБИ_УсловиеВДоговоре3.УсловиеВДоговоре;
	Если НЕ ПустаяСтрока(УсловияДополнение) Тогда 
		ОбластьУсловияОтгрузки = Макет.ПолучитьОбласть("УсловияДополннение");
		ОбластьУсловияОтгрузки.Параметры.УсловияДополнение = УсловияДополнение;
		ТабличныйДокумент.Вывести(ОбластьУсловияОтгрузки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеПечати.Ссылка.Договор.ЖБИ_ПодписантОрганизация) Тогда 
		СтруктураРуководитель 		= ПолучитьОтветственноеЛицо(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, Организация);
	Иначе
		СтруктураРуководитель = Новый Структура();
		СтруктураРуководитель.Вставить("Должность", ДанныеПечати.Ссылка.Договор.ЖБИ_ПодписантОрганизация.Должность);
		СтруктураРуководитель.Вставить("ФизическоеЛицо", ДанныеПечати.Ссылка.Договор.ЖБИ_ПодписантОрганизация.ФизическоеЛицо);
		СтруктураРуководитель.Вставить("ДокументПраваПодписи", ДанныеПечати.Ссылка.Договор.ЖБИ_ОснованиеСоСтороныОрганизации);
	КонецЕсли;
	
	//Поставщик
	ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалСчета");
	СтруктураДанныхПоставщик = Новый Структура;
	СтруктураДанныхПоставщик.Вставить("ПредставлениеПоставщика", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата),
			"ПолноеНаименование"));
	ОбластьПодвал.Параметры.ПредставлениеПоставщика 	= СтруктураДанныхПоставщик.ПредставлениеПоставщика;
	ОбластьПодвал.Параметры.ДолжностьПоставщик 			= ДанныеПечати.Ссылка.ЖБИ_ПодписантПоставщик.Должность;
	ОбластьПодвал.Параметры.ФИОСокрашенноеПостащик 		= daСклонение(ДанныеПечати.Ссылка.ЖБИ_ПодписантПоставщик, "И", , , "Фамилия И. О.");
	
	//Покупатель
	СтруктураДанныхПокупатель = Новый Структура;
	СтруктураДанныхПокупатель.Вставить("ПредставлениеПокупателя", 
		ФормированиеПечатныхФорм.ОписаниеОрганизации(ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата),
			"ПолноеНаименование"));
	ОбластьПодвал.Параметры.ПредставлениеПолучателя 	= СтруктураДанныхПокупатель.ПредставлениеПокупателя;
	ОбластьПодвал.Параметры.ДолжностьПокупателя 		= ДанныеПечати.Ссылка.ЖБИ_ПодписантПокупатель.ЖБИ_Должность;
	ОбластьПодвал.Параметры.ФИОСокрашенноеПокупателя 	= daСклонение(ДанныеПечати.Ссылка.ЖБИ_ПодписантПокупатель,"И", , ,"Фамилия И. О.");
	
	ОбластьПодвал.Параметры.ДатаСпецификации 			= Формат(ДанныеПечати.Ссылка.ЖБИ_ДатаСпецификации,"ДФ='dd.MM.yyyy'");
	
	МассивПроверкиВывода.Очистить();
	МассивПроверкиВывода.Добавить(ОбластьПодвал);
	Если НЕ ТабличныйДокумент.ПроверитьВывод(МассивПроверкиВывода) Тогда
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	МассивКИ = Новый Массив();
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	ТаблицаИсполнители	= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ДанныеПечати.Ссылка.Менеджер, МассивКИ, ТекущаяДатаСеанса(), Ложь);
	
	СтруктураДанныхПодвал = Новый Структура;
	ЗаполнитьИсполнителейПечати(ТаблицаИсполнители,СтруктураДанныхПодвал, ДанныеПечати.Ссылка);
	ОбластьПодвал.Параметры.Заполнить(СтруктураДанныхПодвал);
	
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаказПоставщику

#Область ЖБИ_ИндивидуальныеУсловияПоставки

Функция ЗаполнитьТабличныйДокументЗаявкаПоставщикуИндЦены(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт 
	
	Если МассивОбъектов.Количество()>0 Тогда 
		СсылкаНаДокумент = МассивОбъектов[0];
	Иначе 
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
		
	Макет 					= Документы.ЗаказПоставщику.ПолучитьМакет("ЖБИ_ЗаявкаПоставщику");	
	НомерСтрокиНачало 		= ТабличныйДокумент.ВысотаТаблицы + 1;	
	ДанныеПечати 			= ДанныеПечатиЗаявкаПоставщику(СсылкаНаДокумент);		
	
	ЗаголовокСчета 			= Макет.ПолучитьОбласть("ЗаголовокСчета");
	ЗаполнитьЗначенияСвойств(ЗаголовокСчета.Параметры,ДанныеПечати);
	ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ЗаголовокСчета, "ЗаголовокСчета", ДанныеПечати.Организация);
	ТабличныйДокумент.Вывести(ЗаголовокСчета);
	
	Заголовок 				= Макет.ПолучитьОбласть("Заголовок");
	Заголовок.Параметры.НомерВходящегоДокумента = СсылкаНаДокумент.Номер;
	Заголовок.Параметры.ДатаВходящегоДокумента  = Формат(СсылкаНаДокумент.Дата,"ДЛФ=DD");
	//ЗаполнитьЗначенияСвойств(Заголовок.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(Заголовок);
	
	ШапкаТаблицы 			= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ЗаполнитьЗначенияСвойств(ШапкаТаблицы.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(ШапкаТаблицы);
	
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Ном = 1;
	Для Каждого НомСтр Из СсылкаНаДокумент.Товары Цикл 
		СтрокаТаблицы.Параметры.НомерСтроки 		= Ном;
		СтрокаТаблицы.Параметры.Товар 				= СформироватьПредставлениеПечатиДляТовара(НомСтр.Номенклатура, НомСтр.НоменклатураПоставщика);
		СтрокаТаблицы.Параметры.Количество 			= НомСтр.Количество;
		СтрокаТаблицы.Параметры.ЕдиницаИзмерения 	= НомСтр.Номенклатура.ЕдиницаИзмерения;
		ТабличныйДокумент.Вывести(СтрокаТаблицы);
		Ном = Ном + 1;
	КонецЦикла;
	
	Подвал 					= Макет.ПолучитьОбласть("Подвал");
	ЗаполнитьЗначенияСвойств(Подвал.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(Подвал);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаНаДокумент);
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ЗаполнитьТабличныйДокументЗаявкаПоставщикуИндЦеныКратко(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт 
	
	Если МассивОбъектов.Количество()>0 Тогда 
		СсылкаНаДокумент = МассивОбъектов[0];
	Иначе 
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
		
	Макет 					= Документы.ЗаказПоставщику.ПолучитьМакет("ЖБИ_ЗаявкаПоставщикуКратко");	
	НомерСтрокиНачало 		= ТабличныйДокумент.ВысотаТаблицы + 1;	
	ДанныеПечати 			= ДанныеПечатиЗаявкаПоставщику(СсылкаНаДокумент);		
	
	Заголовок 				= Макет.ПолучитьОбласть("Заголовок");
	//ЗаполнитьЗначенияСвойств(Заголовок.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(Заголовок);
	
	ШапкаТаблицы 			= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ЗаполнитьЗначенияСвойств(ШапкаТаблицы.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(ШапкаТаблицы);
	
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Ном = 1;
	Для Каждого НомСтр Из СсылкаНаДокумент.Товары Цикл 
		СтрокаТаблицы.Параметры.НомерСтроки 		= Ном;
		СтрокаТаблицы.Параметры.Товар 				= СформироватьПредставлениеПечатиДляТовара(НомСтр.Номенклатура, НомСтр.НоменклатураПоставщика);
		СтрокаТаблицы.Параметры.Количество 			= НомСтр.Количество;
		СтрокаТаблицы.Параметры.ЕдиницаИзмерения 	= НомСтр.Номенклатура.ЕдиницаИзмерения;
		ТабличныйДокумент.Вывести(СтрокаТаблицы);
		Ном = Ном + 1;
	КонецЦикла;
	
	Подвал 					= Макет.ПолучитьОбласть("Подвал");
	ЗаполнитьЗначенияСвойств(Подвал.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(Подвал);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаНаДокумент);
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

Функция ЗаполнитьТабличныйДокументЗаявкаПоставщику(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт 
	
	Если МассивОбъектов.Количество()>0 Тогда 
		СсылкаНаДокумент = МассивОбъектов[0];
	Иначе 
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
		
	Макет 					= Документы.ЗаказПоставщику.ПолучитьМакет("ЖБИ_ЗаявкаПоставщику");	
	НомерСтрокиНачало 		= ТабличныйДокумент.ВысотаТаблицы + 1;	
	ДанныеПечати 			= ДанныеПечатиЗаявкаПоставщику(СсылкаНаДокумент);		
	
	ЗаголовокСчета 			= Макет.ПолучитьОбласть("ЗаголовокСчета");
	ЗаполнитьЗначенияСвойств(ЗаголовокСчета.Параметры,ДанныеПечати);
	ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ЗаголовокСчета, "ЗаголовокСчета", ДанныеПечати.Организация);
	ТабличныйДокумент.Вывести(ЗаголовокСчета);
	
	Заголовок 				= Макет.ПолучитьОбласть("Заголовок");
	Заголовок.Параметры.НомерВходящегоДокумента = СсылкаНаДокумент.НомерПоДаннымПоставщика;
	Заголовок.Параметры.ДатаВходящегоДокумента  = Формат(СсылкаНаДокумент.ДатаПоДаннымПоставщика,"ДЛФ=DD");
	//ЗаполнитьЗначенияСвойств(Заголовок.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(Заголовок);
	
	ШапкаТаблицы 			= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ЗаполнитьЗначенияСвойств(ШапкаТаблицы.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(ШапкаТаблицы);
	
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Ном = 1;
	Для Каждого НомСтр Из СсылкаНаДокумент.Товары Цикл 
		СтрокаТаблицы.Параметры.НомерСтроки 		= Ном;
		СтрокаТаблицы.Параметры.Товар 				= СформироватьПредставлениеПечатиДляТовара(НомСтр.Номенклатура, НомСтр.НоменклатураПоставщика);
		СтрокаТаблицы.Параметры.Количество 			= НомСтр.КоличествоУпаковок;
		СтрокаТаблицы.Параметры.ЕдиницаИзмерения 	= НомСтр.Номенклатура.ЕдиницаИзмерения;
		ТабличныйДокумент.Вывести(СтрокаТаблицы);
		Ном = Ном + 1;
	КонецЦикла;
	
	Подвал 					= Макет.ПолучитьОбласть("Подвал");
	ЗаполнитьЗначенияСвойств(Подвал.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(Подвал);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаНаДокумент);
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ЗаполнитьТабличныйДокументЗаявкаПоставщикуКратко(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт 
	
	Если МассивОбъектов.Количество()>0 Тогда 
		СсылкаНаДокумент = МассивОбъектов[0];
	Иначе 
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
		
	Макет 					= Документы.ЗаказПоставщику.ПолучитьМакет("ЖБИ_ЗаявкаПоставщикуКратко");	
	НомерСтрокиНачало 		= ТабличныйДокумент.ВысотаТаблицы + 1;	
	ДанныеПечати 			= ДанныеПечатиЗаявкаПоставщику(СсылкаНаДокумент);		
	
	Заголовок 				= Макет.ПолучитьОбласть("Заголовок");
	//ЗаполнитьЗначенияСвойств(Заголовок.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(Заголовок);
	
	ШапкаТаблицы 			= Макет.ПолучитьОбласть("ШапкаТаблицы");
	ЗаполнитьЗначенияСвойств(ШапкаТаблицы.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(ШапкаТаблицы);
	
	СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицы");
	Ном = 1;
	Для Каждого НомСтр Из СсылкаНаДокумент.Товары Цикл 
		СтрокаТаблицы.Параметры.НомерСтроки 		= Ном;
		СтрокаТаблицы.Параметры.Товар 				= СформироватьПредставлениеПечатиДляТовара(НомСтр.Номенклатура, НомСтр.НоменклатураПоставщика);
		СтрокаТаблицы.Параметры.Количество 			= НомСтр.КоличествоУпаковок;
		СтрокаТаблицы.Параметры.ЕдиницаИзмерения 	= НомСтр.Номенклатура.ЕдиницаИзмерения;
		ТабличныйДокумент.Вывести(СтрокаТаблицы);
		Ном = Ном + 1;
	КонецЦикла;
	
	Подвал 					= Макет.ПолучитьОбласть("Подвал");
	ЗаполнитьЗначенияСвойств(Подвал.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(Подвал);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаНаДокумент);
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеПечатиЗаявкаПоставщику(СсылкаНаДокумент)
	
	ДанныеПечатиЗаявкаПоставщику 	= Новый Структура();
	
	Организация 						= СсылкаНаДокумент.Организация;
	ДатаАктуальности 					= ТекущаяДатаСеанса();
	СведенияОПоставщике 				= ФормированиеПечатныхФорм.СведенияОЮрФизЛице(СсылкаНаДокумент.Контрагент,ДатаАктуальности,,СсылкаНаДокумент.БанковскийСчет);
	
	СведенияКонтактногоЛицаПоставщика 			= Новый Структура("ФИО, Должность", "", "");
	Если ЗначениеЗаполнено(СсылкаНаДокумент.Договор) Тогда 
		СведенияКонтактногоЛицаПоставщика.ФИО = daСклонение(СсылкаНаДокумент.Договор.ЖБИ_ПодписантКонтрагент.Наименование,"Р", , ,"Фамилия И. О.");
		СведенияКонтактногоЛицаПоставщика.Должность = daСклонение(СсылкаНаДокумент.Договор.ЖБИ_ПодписантКонтрагент.ЖБИ_Должность,"Р", , "Д", "Абв");
	Иначе 
		СведенияКонтактногоЛицаПоставщика = СведенияоКонтакномЛицеПоставщика(СсылкаНаДокумент.Партнер);	
	КонецЕсли;			
	СведенияООрганизации 				= ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация,ДатаАктуальности,,СсылкаНаДокумент.БанковскийСчет);
	СтруктураОтветственных 				= ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация, ДатаАктуальности);
	ЭлАдрес 							= ВернутьЭлАдресОрганизации(Организация);
	
	МассивКИ = Новый Массив();
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	ТаблицаИсполнители					= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаНаДокумент.Менеджер, МассивКИ, ТекущаяДатаСеанса(), Ложь);
	
	ДанныеПечатиЗаявкаПоставщику.Вставить("Организация",Организация);
	ДанныеПечатиЗаявкаПоставщику.Вставить("ЮридическийАдрес",СведенияООрганизации.ЮридическийАдрес);
	ДанныеПечатиЗаявкаПоставщику.Вставить("ИНН",СведенияООрганизации.ИНН);
	ДанныеПечатиЗаявкаПоставщику.Вставить("КПП",СведенияООрганизации.КПП);
	ДанныеПечатиЗаявкаПоставщику.Вставить("ДатаЗаказаПоставщика",СсылкаНаДокумент.Дата);
	ДанныеПечатиЗаявкаПоставщику.Вставить("НомерЗаказаПоставщика",СсылкаНаДокумент.Номер);	
	ДанныеПечатиЗаявкаПоставщику.Вставить("ПредставлениеПоставщика",СведенияОПоставщике.НаименованиеДляПечатныхФорм);
	//ДанныеПечатиЗаявкаПоставщику.Вставить("ФИОСокрашенноеПоставщик",УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаНаДокумент.Контрагент,Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты,ДатаАктуальности));
	ДанныеПечатиЗаявкаПоставщику.Вставить("ФИОСокрашенноеПоставщик",ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СокрЛП(СведенияКонтактногоЛицаПоставщика.ФИО)));
	ДанныеПечатиЗаявкаПоставщику.Вставить("EmailОрганизации",ЭлАдрес);
	ДанныеПечатиЗаявкаПоставщику.Вставить("РабочийТелефонОрганизации",СведенияООрганизации.Телефоны);
	ДанныеПечатиЗаявкаПоставщику.Вставить("ДолжностьРуководителя",СтруктураОтветственных.РуководительДолжность);
	ДанныеПечатиЗаявкаПоставщику.Вставить("ФИОРуководителя",СтруктураОтветственных.Руководитель);
	
	ЗаполнитьИсполнителейПечати(ТаблицаИсполнители,ДанныеПечатиЗаявкаПоставщику, СсылкаНаДокумент);
	
	Возврат ДанныеПечатиЗаявкаПоставщику;
	
КонецФункции

#КонецОбласти

#Область ТТН

Функция ПолучитьДанныеПечатиФактическиеОтгрузкиТТН(СсылкаТТН)
	
	ДанныеПечати = Новый Структура("ФактическиеОтгрузки,ДоговорЗаявка,ДокументОтгрузки",Документы.ЖБИ_ФактическиеОтгрузки.ПустаяСсылка(),Документы.ЖБИ_ДоговорЗаявка.ПустаяСсылка(),Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",СсылкаТТН);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖБИ_ФактическиеОтгрузкиДокументыОтгрузки.Ссылка КАК ФактическиеОтгрузки,
	               |	ЖБИ_ФактическиеОтгрузкиДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
	               |	ЖБИ_ФактическиеОтгрузкиДокументыОтгрузки.Поставщик КАК Поставщик
	               |ПОМЕСТИТЬ ТаблДокументыОтгрузки
	               |ИЗ
	               |	Документ.ЖБИ_ФактическиеОтгрузки.ДокументыОтгрузки КАК ЖБИ_ФактическиеОтгрузкиДокументыОтгрузки
	               |ГДЕ
	               |	(ВЫРАЗИТЬ(ЖБИ_ФактическиеОтгрузкиДокументыОтгрузки.ДокументОтгрузки КАК Документ.ТранспортнаяНакладная)) = &Ссылка
	               |	И НЕ ВЫРАЗИТЬ(ЖБИ_ФактическиеОтгрузкиДокументыОтгрузки.ДокументОтгрузки КАК Документ.ТранспортнаяНакладная).ПометкаУдаления
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ТаблДокументыОтгрузки.ФактическиеОтгрузки КАК ФактическиеОтгрузки,
	               |	ТаблДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
	               |	ТаблДокументыОтгрузки.Поставщик КАК Поставщик,
	               |	ДокументыОтгрузки.ДокументОтгрузки КАК ДоговорЗаявка
	               |ИЗ
	               |	ТаблДокументыОтгрузки КАК ТаблДокументыОтгрузки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЖБИ_ФактическиеОтгрузки.ДокументыОтгрузки КАК ДокументыОтгрузки
	               |		ПО ТаблДокументыОтгрузки.ФактическиеОтгрузки = ДокументыОтгрузки.Ссылка
				   |			//И ТаблДокументыОтгрузки.Поставщик = ДокументыОтгрузки.Поставщик
	               |			И (ТИПЗНАЧЕНИЯ(ДокументыОтгрузки.ДокументОтгрузки) = ТИП(Документ.ЖБИ_ДоговорЗаявка))";	
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда 
		ДанныеПечати.ФактическиеОтгрузки 	= РезультатЗапроса.ФактическиеОтгрузки;
		ДанныеПечати.ДоговорЗаявка 			= РезультатЗапроса.ДоговорЗаявка;
	КонецЕсли;
	
	Если СсылкаТТН.ДокументыОснования.Количество()>0 Тогда
		ДанныеПечати.ДокументОтгрузки 		= СсылкаТТН.ДокументыОснования[0].ДокументОснование;	
	КонецЕсли;
	
	Возврат ДанныеПечати;
	
КонецФункции

Функция ЗаполнитьТабличныйДокументТТН(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, КомплектыПечати = Неопределено) Экспорт
	
	Если МассивОбъектов.Количество()>0 Тогда 
		СсылкаНаДокумент = МассивОбъектов[0];
	Иначе 
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
	ТипДокументов = ТипЗнч(МассивОбъектов[0]);
	
	Если ТипДокументов <> Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда 
		
		СтруктураВозврата = УправлениеПечатьюУТВызовСервераЛокализация.ПолучитьТранспортныеНакладныеНаПечать(МассивОбъектов);
		ТранспортныеНакладныеНаПечать = СтруктураВозврата.ТранспортныеНакладныеНаПечать;
		
		Для Каждого Документ Из СтруктураВозврата.МассивДокументовБезНакладных Цикл
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа %1 не создана ""Транспортная накладная"". Печать документа ""Транспортная накладная"" невозможна.'"),
			Документ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Текст,
			Документ)
			
		КонецЦикла	
		
	Иначе
		ТранспортныеНакладныеНаПечать = МассивОбъектов;	
	КонецЕсли;
	
	ТаблицаНакладныхНаПечать = Новый ТаблицаЗначений;
	ОписаниеТипаТранспортнаяНакладная = Новый ОписаниеТипов("ДокументСсылка.ТранспортнаяНакладная");
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ТаблицаНакладныхНаПечать.Колонки.Добавить("ТранспортнаяНакладная", ОписаниеТипаТранспортнаяНакладная);
	ТаблицаНакладныхНаПечать.Колонки.Добавить("ПорядковыйНомер", ОписаниеТипаЧисло);
	
	ПорядковыйНомер = 0;
	Для Каждого Накладная Из ТранспортныеНакладныеНаПечать Цикл 
		СтрокаТаблицы = ТаблицаНакладныхНаПечать.Добавить();	
		СтрокаТаблицы.ТранспортнаяНакладная = Накладная;
		СтрокаТаблицы.ПорядковыйНомер = ПорядковыйНомер;
		ПорядковыйНомер = ПорядковыйНомер  + 1;
	КонецЦикла;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТРАНСПОРТНАЯ_НАКЛАДНАЯ";
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ.ТранспортнаяНакладная");
	ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыТранспортнаяНакладная(ТаблицаНакладныхНаПечать);
	
	ЗаполнитьТабличныйДокументТН(
	ТабличныйДокумент,
	ДанныеДляПечати,
	ОбъектыПечати,
	КомплектыПечати,
	ПараметрыПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументТН(ТабличныйДокумент, СтруктураДанных, ОбъектыПечати, КомплектыПечати, ПараметрыПечати)
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ТранспортнаяНакладная.ЖБИ_ТранспортнаяНакладная");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	Если ПараметрыПечати.Свойство("ОтображатьФаксимиле") Тогда 
		Факсимиле = Истина;
	Иначе 
		Факсимиле = Ложь;
	КонецЕсли;
	
	ТаблицаДанныхДляПечати = СтруктураДанных.ТаблицаРезультата;
	ДанныеСсылкиДокументов = СтруктураДанных.РезультатИменаТоваров.Выбрать();
		
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ТаблицаДанныхДляПечати Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
			
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Если ТТН с доставкой и нашли связанные с доставкой ошибки - перейдем к следующему документу.
		СтруктураЗаданиеНаПеревозку = Новый Структура("НеНайденоЗаданиеНаПеревозку,
													  |БолееОдногоВхожденияВЗаданияНаПеревозку,
													  |РаспоряжениеНеПроведено",
													  Ложь,Ложь,Ложь);
		ЕстьОшибкиДоставки = Ложь;
		ЗаполнитьЗначенияСвойств(СтруктураЗаданиеНаПеревозку,ДанныеПечати);
		
		Если СтруктураЗаданиеНаПеревозку.НеНайденоЗаданиеНаПеревозку Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не найдено задание на перевозку. 
					|Печать формы 1-Т для документов с доставкой возможна после включения документа в задание на перевозку.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			ЕстьОшибкиДоставки = Истина;
		КонецЕсли;
		
		Если СтруктураЗаданиеНаПеревозку.БолееОдногоВхожденияВЗаданияНаПеревозку Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно напечатать форму 1-Т для %1, т.к. найдено более одного задания на перевозку, 
					|в которые включен этот документ.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			ЕстьОшибкиДоставки = Истина;
		КонецЕсли;
		
		Если СтруктураЗаданиеНаПеревозку.РаспоряжениеНеПроведено Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 не проведен. Печать товарно - транспортной накладной не будет выполнена.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			ЕстьОшибкиДоставки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибкиДоставки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеПечати.ЕстьНепроведенныеДокументыОснования Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 присутствуют непроведенные документы-основания. Печать транспортной накладной невозможна.'"),
				ДанныеПечати.Ссылка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
				
			Продолжить;
			
		КонецЕсли;
		
		ДанныеПечатиФактическиеОтгрузки = ПолучитьДанныеПечатиФактическиеОтгрузкиТТН(ДанныеПечати.Ссылка);	
		ФактическиеОтгрузки 	= ДанныеПечатиФактическиеОтгрузки.ФактическиеОтгрузки;
		ДоговорЗаявка			= ДанныеПечатиФактическиеОтгрузки.ДоговорЗаявка;
		Договор					= ДоговорЗаявка.Договор;
		ДокументОтгрузки		= ДанныеПечатиФактическиеОтгрузки.ДокументОтгрузки;
				
		ОбластьМакетаЛицеваяСторона = Макет.ПолучитьОбласть("ГоризонтальнаяЛицеваяСторона");
		ОбластьМакета 				= Макет.ПолучитьОбласть("ГоризонтальнаяЛицеваяСторонаПродолжение");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакетаЛицеваяСторона, ДанныеПечати.Ссылка);
		
		ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакетаЛицеваяСторона, "ГоризонтальнаяЛицеваяСторона", ДанныеПечати.Организация, "Логотип");
		
		ОбластьМакетаОборотная = Макет.ПолучитьОбласть("ГоризонтальнаяОборотнаяСторона");
		
		ВывестиЛоготипВТабличныйДокумент(Макет, ОбластьМакетаОборотная, "ГоризонтальнаяОборотнаяСторона", ДанныеПечати.Организация, "Логотип1");
				
		СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата);
		СведенияОГрузоотправитель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
		СведенияОПеревозчике      = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Перевозчик, ДанныеПечати.Дата);
		СведенияОВодителе         = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Водитель, ДанныеПечати.Дата);
		
		ПредставлениеГрузоотправителя = "";
		ПредставлениеПеревозчика      = "";
		Перевозчик                    = "";
		Грузоотправитель              = "";
		
		РеквизитыМакета = Новый Структура;
		
		ДатаЗагрузки 				= Формат(ФактическиеОтгрузки.ДатаЗагрузки,"ДФ=dd.MM.yyyy");
		ДатаВыгрузки 				= Формат(ФактическиеОтгрузки.ДатаВыгрузки,"ДФ=dd.MM.yyyy");
		НомерДоговора 				= "ПИУТ-" + Договор.Номер + "-" + ДоговорЗаявка.НомерЗаявки;
		
		НомерДокумента			= "";
		НайденныеСтроки			= ФактическиеОтгрузки.ДокументыОтгрузки.НайтиСтроки(Новый Структура("ДокументОтгрузки",ДанныеПечати.Ссылка));
		Если НайденныеСтроки.Количество()>0 Тогда 
			НомерДокумента = НайденныеСтроки[0].НомерДокумента;	
		КонецЕсли;
		
		НомерДоговораБезПрефикса 	= Договор.Номер + "-" + ДоговорЗаявка.НомерЗаявки + ?(ПустаяСтрока(НомерДокумента),"","-" + НомерДокумента);
				
		РеквизитыМакета.Вставить("Пункт0_1", 1);
		РеквизитыМакета.Вставить("Пункт0_2", ДатаЗагрузки);
		РеквизитыМакета.Вставить("Пункт0_3", НомерДоговораБезПрефикса);
		
		Если ЗначениеЗаполнено(ДанныеПечати.Грузополучатель) Тогда 
			Если СведенияОГрузополучателе.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
				Или СведенияОГрузополучателе.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
				РеквизитыМакета.Вставить("Пункт2_1", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
					"ПолноеНаименование,ИНН,ЮридическийАдрес"));
			Иначе
				//РеквизитыМакета.Вставить("Пункт2_2", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе, 
				//	"ПолноеНаименование,ЮридическийАдрес,Телефоны"));
				//РеквизитыМакета.Вставить("Пункт2_2", ДоговорЗаявка.ПунктНазначения);
				РеквизитыМакета.Вставить("Пункт2_2", ДанныеПечати.Ссылка.АдресДоставки);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеПечати.Грузоотправитель) Тогда 
			Если СведенияОГрузоотправитель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
			 Или СведенияОГрузоотправитель.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
				ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, 
					"ПолноеНаименование,ИНН,ЮридическийАдрес");
				РеквизитыМакета.Вставить("Пункт1_1", ПредставлениеГрузоотправителя);
				Грузоотправитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование");
			Иначе
				ПредставлениеГрузоотправителя = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, 
					"ПолноеНаименование,ЮридическийАдрес,Телефоны");
				РеквизитыМакета.Вставить("Пункт1_2", ПредставлениеГрузоотправителя);
				Грузоотправитель = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование");
			КонецЕсли;
		КонецЕсли;

		
		СтруктураПоиска = Новый Структура("ПорядковыйНомер", ДанныеПечати.ПорядковыйНомер);
		
		ИменаТоваров = "";
		Пока ДанныеСсылкиДокументов.НайтиСледующий(СтруктураПоиска) Цикл								
			ИменаТоваров = ИменаТоваров + ДанныеСсылкиДокументов.НаименованиеВидаНоменклатуры + ", ";
		КонецЦикла;			
		
		Если СтрДлина(ИменаТоваров) >= 2 Тогда
			ИменаТоваров = Лев(ИменаТоваров, СтрДлина(ИменаТоваров) - 2);
		КонецЕсли;
		
		РеквизитыМакета.Вставить("Пункт3_1", ИменаТоваров);
		ОбластьМакетаЛицеваяСторона.Параметры.Заполнить(РеквизитыМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаЛицеваяСторона);
		
		ОбластьМакетаТовары = Макет.ПолучитьОбласть("Товары");
		МассаБрутто         = 0;
		Для Каждого НомСтр Из ДокументОтгрузки.Товары Цикл	
			Товар = СформироватьПредставлениеПечатиДляТовара(НомСтр.Номенклатура, НомСтр.ЖБИ_НоменклатураПоставщика);
			Товар = Товар + " " + НомСтр.Количество + " ("+daСклонение(НомСтр.Количество, "И", "С", "Ч") + ") " + НомСтр.Номенклатура.ЕдиницаИзмерения;
			ОбластьМакетаТовары.Параметры.Пункт3_1_1 = Товар;
			ТабличныйДокумент.Вывести(ОбластьМакетаТовары);
			
			НайденныеСтроки = ДоговорЗаявка.Товары.НайтиСтроки(Новый Структура("Номенклатура,НоменклатураПоставщика,Количество",НомСтр.Номенклатура,НомСтр.ЖБИ_НоменклатураПоставщика,НомСтр.Количество));
			Для Каждого Ном Из НайденныеСтроки Цикл
				МассаБрутто = МассаБрутто + Ном.ОбщийВес;	
			КонецЦикла;			
			
		КонецЦикла;
		
		МассаБрутто 	= Строка(МассаБрутто) + " тонн";
		ОбщееКоличество = ДокументОтгрузки.Товары.Итог("Количество");
		РеквизитыМакета.Вставить("Пункт3_3", МассаБрутто);
			
		РеквизитыМакета.Вставить("Пункт6_1", ДанныеПечати.ПунктПогрузки);
		РеквизитыМакета.Вставить("Пункт6_2", ДатаЗагрузки + " " + "08:00");
		РеквизитыМакета.Вставить("Пункт6_3", ДатаЗагрузки + " " + "08:00");
		РеквизитыМакета.Вставить("Пункт7_1", ДанныеПечати.ПунктРазгрузки);
		
		МассаБруттоСтрока = НСтр("ru = '%МассаБрутто% кг'", Метаданные.Языки.Русский.КодЯзыка);
		МассаБруттоСтрока = СтрЗаменить(МассаБруттоСтрока, "%МассаБрутто%", ДанныеПечати.МассаБрутто);
		
		//РеквизитыМакета.Вставить("Пункт6_5", МассаБруттоСтрока);
		РеквизитыМакета.Вставить("Пункт6_5", МассаБрутто);
		РеквизитыМакета.Вставить("Пункт6_5_1", ОбщееКоличество);
		
		Если Не ЗначениеЗаполнено(ФактическиеОтгрузки.ПодписантЗаказчик) Тогда 
			СтруктураРуководитель = ПолучитьОтветственноеЛицо(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, ДанныеПечати.Организация);
		Иначе
			СтруктураРуководитель = Новый Структура();
			СтруктураРуководитель.Вставить("Должность", ФактическиеОтгрузки.ПодписантЗаказчик.Должность);
			СтруктураРуководитель.Вставить("ФизическоеЛицо", ФактическиеОтгрузки.ПодписантЗаказчик.ФизическоеЛицо);
			СтруктураРуководитель.Вставить("ДокументПраваПодписи", ФактическиеОтгрузки.ПодписантЗаказчик.ОснованиеПраваПодписи);
		КонецЕсли;
	
		ДолжностьРуководителя 				= daСклонение(СтруктураРуководитель.Должность,"И", , "Д", "Абв");
		Руководитель  					    = daСклонение(СтруктураРуководитель.ФизическоеЛицо,"И","М",,"Фамилия И. О.");
		РеквизитыМакета.Вставить("Пункт6_6", "Сдал: "+ДолжностьРуководителя + " " + Руководитель);
		
		РеквизитыМакета.Вставить("Пункт8_1", "В соответствии с действующим законодательством");
		РеквизитыМакета.Вставить("Пункт8_2", "В соответствии с действующим законодательством и договором перевозки");
		
		ДатаДоговораЗаявки = Формат(ДоговорЗаявка.Дата,"ДФ=dd.MM.yyyy");
		РеквизитыМакета.Вставить("Пункт9_1", ДатаДоговораЗаявки);
		
		ОбластьМакета.Параметры.Заполнить(РеквизитыМакета);
		
		Если Факсимиле Тогда
			ОбластьМакетаФаксимиле = Макет.ПолучитьОбласть("ГоризонтальнаяЛицеваяСторонаПродолжениеФаксимиле");
			ЗаполнитьЗначенияСвойств(ОбластьМакетаФаксимиле.Параметры,ОбластьМакета.Параметры);			
			ВывестиФаксимилеОрганизацииВТабличныйДокумент(Макет, ОбластьМакетаФаксимиле, "ПодвалФаксимиле", ДанныеПечати.Организация, "ФаксимилеОрганизации");
			ФаксимилеСотрудника    = ФактическиеОтгрузки.ПодписантЗаказчик.ЖБИ_ФаксимилеПользователя;
			ВывестиФаксимилеСотрудникаВТабличныйДокумент(Макет, ОбластьМакетаФаксимиле, "ПодвалФаксимиле", ФаксимилеСотрудника, "ФаксимилеСотрудника");
			ТабличныйДокумент.Вывести(ОбластьМакетаФаксимиле);
		Иначе 
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
				
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		РеквизитыМакета.Очистить();
		
		РеквизитыМакета.Вставить("Пункт10_01", ДатаДоговораЗаявки);
		РеквизитыМакета.Вставить("Пункт10_02", НомерДоговораБезПрефикса);
		
		Если ЗначениеЗаполнено(ДанныеПечати.Перевозчик) Тогда 
			Если СведенияОПеревозчике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
			 Или СведенияОПеревозчике.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
				//ПредставлениеПеревозчика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике, 
					//"ПолноеНаименование,ФактическийАдрес,Телефоны");
				ПредставлениеПеревозчика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике, 
					"ПолноеНаименование,ЮридическийАдрес,Телефоны");
				Перевозчик = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике, "ПолноеНаименование");
				РеквизитыМакета.Вставить("Пункт10_1", ПредставлениеПеревозчика);
			Иначе
				ПредставлениеПеревозчика = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике, 
					"ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны");
				Перевозчик = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПеревозчике, "ПолноеНаименование");
				РеквизитыМакета.Вставить("Пункт10_2", ПредставлениеПеревозчика);
			КонецЕсли;
		КонецЕсли;
		
		//ПредставлениеВодителя = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Водитель, ДанныеПечати.Дата);
		ПредставлениеВодителя = ФактическиеОтгрузки.Водитель.Водитель;
		
		РеквизитыМакета.Вставить("Пункт10_3", ПредставлениеВодителя);
		
		ГрузоподъемностьВТоннахАвтомобиля      = Формат(ДанныеПечати.ГрузоподъемностьВТоннахАвтомобиля,"");
		ВместимостьВКубическихМетрахАвтомобиля = Формат(ДанныеПечати.ВместимостьВКубическихМетрахАвтомобиля,"");
		
		ИнформацияОбАвтомобиле = ""
			+ ?(ПустаяСтрока(ДанныеПечати.ТипАвтомобиля),"",Строка(ДанныеПечати.ТипАвтомобиля) + ", ")
			+ ?(ПустаяСтрока(ДанныеПечати.МаркаАвтомобиля),"",ДанныеПечати.МаркаАвтомобиля  + ", ")
			+ ?(ПустаяСтрока(ГрузоподъемностьВТоннахАвтомобиля),"",ГрузоподъемностьВТоннахАвтомобиля + " " + НСтр("ru = 'т'", Метаданные.Языки.Русский.КодЯзыка)  + ", ")
			+ ?(ПустаяСтрока(ВместимостьВКубическихМетрахАвтомобиля),"",ВместимостьВКубическихМетрахАвтомобиля + " " + НСтр("ru = 'куб. м'", Метаданные.Языки.Русский.КодЯзыка));
		
		ИнформацияОбАвтомобиле = СокрЛП(ИнформацияОбАвтомобиле);
		
		Пока Прав(ИнформацияОбАвтомобиле,1) = "," Цикл
			ИнформацияОбАвтомобиле = Лев(ИнформацияОбАвтомобиле, СтрДлина(ИнформацияОбАвтомобиле)-1)
		КонецЦикла;
		
		МаркаАвто 		= ФактическиеОтгрузки.АвтомобильМарка;
		МаркаПрицепа 	= ФактическиеОтгрузки.МаркаПрицепа;
		ГосНомер		= ФактическиеОтгрузки.АвтомобильГосударственныйНомер;
		ГосНомерПрицепа	= ФактическиеОтгрузки.НомерПрицепа;
		РеквизитыМакета.Вставить("Пункт11_01", МаркаАвто);
		РеквизитыМакета.Вставить("Пункт11_1", МаркаПрицепа);		
		РеквизитыМакета.Вставить("Пункт11_02", ГосНомер);
		РеквизитыМакета.Вставить("Пункт11_2", ГосНомерПрицепа);
		
		//РеквизитыМакета.Вставить("Пункт11_1", ИнформацияОбАвтомобиле);
		//РеквизитыМакета.Вставить("Пункт11_2", ДанныеПечати.ГосНомерАвтомобиля);
		
		СведенияОЗаказчикеПеревозок = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.ЗаказчикПеревозки, ДанныеПечати.Дата,,ДанныеПечати.БанковскийСчетЗаказчикаПеревозки);

		РеквизитыМакета.Вставить("Пункт15_6", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОЗаказчикеПеревозок, 
			"ПолноеНаименование,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
				
		РеквизитыМакета.Вставить("Пункт16_1", Грузоотправитель);
		РеквизитыМакета.Вставить("Пункт16_2", Перевозчик);
		
		РеквизитыМакета.Вставить("Пункт16_11", ДатаЗагрузки);
		РеквизитыМакета.Вставить("Пункт16_21", ДатаЗагрузки);
		//РеквизитыМакета.Вставить("Пункт16_11", ДанныеПечати.Дата);
		//РеквизитыМакета.Вставить("Пункт16_21", ДанныеПечати.Дата);
		
		ОбластьМакетаОборотная.Параметры.Заполнить(РеквизитыМакета);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаОборотная);
		
		Если Факсимиле Тогда 
			ОбластьПодвал = Макет.ПолучитьОбласть("ПодвалФаксимиле");
			ВывестиФаксимилеОрганизацииВТабличныйДокумент(Макет, ОбластьПодвал, "ПодвалФаксимиле", ДанныеПечати.Организация, "ФаксимилеОрганизации1");
			ФаксимилеСотрудника = ФактическиеОтгрузки.ПодписантЗаказчик.ЖБИ_ФаксимилеПользователя;
			ВывестиФаксимилеСотрудникаВТабличныйДокумент(Макет, ОбластьПодвал, "ПодвалФаксимиле", ФаксимилеСотрудника, "ФаксимилеСотрудника1");
		Иначе 
			ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		КонецЕсли;
		ОбластьПодвал.Параметры.Заполнить(РеквизитыМакета);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
				
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДоверенностьВыданная

Функция ПолучитьДанныеПечатиФактическиеОтгрузкиДоверенность(СсылкаДоверенность)
	
	ДанныеПечати = Новый Структура("ФактическиеОтгрузки,ДоговорЗаявка",Документы.ЖБИ_ФактическиеОтгрузки.ПустаяСсылка(),Документы.ЖБИ_ДоговорЗаявка.ПустаяСсылка());
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",СсылкаДоверенность);
	Запрос.Текст = "ВЫБРАТЬ
					|	ЖБИ_ФактическиеОтгрузкиДокументыОтгрузки.Ссылка КАК ФактическиеОтгрузки,
					|	ЖБИ_ФактическиеОтгрузкиДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
					|	ЖБИ_ФактическиеОтгрузкиДокументыОтгрузки.Поставщик КАК Поставщик
					|ПОМЕСТИТЬ ТаблДокументыОтгрузки
					|ИЗ
					|	Документ.ЖБИ_ФактическиеОтгрузки.ДокументыОтгрузки КАК ЖБИ_ФактическиеОтгрузкиДокументыОтгрузки
					|ГДЕ
					|	(ВЫРАЗИТЬ(ЖБИ_ФактическиеОтгрузкиДокументыОтгрузки.ДокументОтгрузки КАК Документ.ДоверенностьВыданная)) = &Ссылка
					|	И НЕ ВЫРАЗИТЬ(ЖБИ_ФактическиеОтгрузкиДокументыОтгрузки.ДокументОтгрузки КАК Документ.ДоверенностьВыданная).ПометкаУдаления
					|;
					|
					|ВЫБРАТЬ
					|	ТаблДокументыОтгрузки.ФактическиеОтгрузки КАК ФактическиеОтгрузки,
					|	ТаблДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
					|	ТаблДокументыОтгрузки.Поставщик КАК Поставщик,
					|	ЖБИ_ДоговорЗаявкаТовары.Ссылка КАК ДоговорЗаявка
					|ИЗ
					|	ТаблДокументыОтгрузки КАК ТаблДокументыОтгрузки 
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЖБИ_ДоговорЗаявка.Товары КАК ЖБИ_ДоговорЗаявкаТовары
					|		ПО ТаблДокументыОтгрузки.ФактическиеОтгрузки = ЖБИ_ДоговорЗаявкаТовары.Ссылка.ДокументОснование
					|		И  ТаблДокументыОтгрузки.Поставщик = ЖБИ_ДоговорЗаявкаТовары.Поставщик
					|		И  НЕ ЖБИ_ДоговорЗаявкаТовары.Ссылка.ПометкаУдаления";						
					//|////////////////////////////////////////////////////////////////////////////////
					//|ВЫБРАТЬ
					//|	ТаблДокументыОтгрузки.ФактическиеОтгрузки КАК ФактическиеОтгрузки,
					//|	ТаблДокументыОтгрузки.ДокументОтгрузки КАК ДокументОтгрузки,
					//|	ТаблДокументыОтгрузки.Поставщик КАК Поставщик,
					//|	ДокументыОтгрузки.ДокументОтгрузки КАК ДоговорЗаявка
					//|ИЗ
					//|	ТаблДокументыОтгрузки КАК ТаблДокументыОтгрузки
					//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЖБИ_ФактическиеОтгрузки.ДокументыОтгрузки КАК ДокументыОтгрузки
					//|		ПО ТаблДокументыОтгрузки.Поставщик = ДокументыОтгрузки.Поставщик
					//|			И ТаблДокументыОтгрузки.ФактическиеОтгрузки = ДокументыОтгрузки.Ссылка
					//|			И (ТИПЗНАЧЕНИЯ(ДокументыОтгрузки.ДокументОтгрузки) = ТИП(Документ.ЖБИ_ДоговорЗаявка))";		
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда 
		ДанныеПечати.ФактическиеОтгрузки 	= РезультатЗапроса.ФактическиеОтгрузки;
		ДанныеПечати.ДоговорЗаявка 			= РезультатЗапроса.ДоговорЗаявка;
	КонецЕсли;
	
	Возврат ДанныеПечати;
	
КонецФункции

Функция ЗаполнитьТабличныйДокументДоверенность(Тип, МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доверенность.Ссылка КАК Ссылка,
	|	Доверенность.Номер КАК Номер,
	|	Доверенность.Дата КАК ДатаДокумента,
	|	Доверенность.Организация КАК Организация,
	|	Доверенность.Организация.Префикс КАК Префикс,
	|	ТаблицаОтветственныеЛица.РуководительНаименование  КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	Доверенность.ФизЛицо КАК ФизЛицо,
	|	Доверенность.ПоДокументу КАК РеквизитыДокументаНаПолучение,
	|	Доверенность.ДатаОкончанияДействия КАК СрокДействия,
	|	Доверенность.Должность КАК Должность,
	|	Доверенность.Ответственный КАК Ответственный,
	|	Доверенность.БанковскийСчет КАК БанковскийСчет,
	|	Доверенность.Контрагент.НаименованиеПолное КАК ПоставщикПредставление,
	|	Доверенность.ДокументОснование КАК ДокументОснование,
	|	Доверенность.ДокументОснование.Номер КАК НомерОснования,
	|	Доверенность.ДокументОснование.Дата КАК ДатаОснования,
	|	Доверенность.ДокументОснование.Организация.Префикс КАК ПрефиксОснования,
	|	Доверенность.Товары.(
	|		НомерСтроки КАК Номер,
	|		Доверенность.Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика.НаименованиеПолное КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ Доверенность.Товары.Упаковка.Наименование
	|		КОНЕЦ КАК Упаковка,
	|		&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ЕдиницаИзмеренияПредставление,
	|		КоличествоУпаковок КАК КоличествоУпаковок
	|	),
	|	Доверенность.МатериальныеЦенности.(
	|		НомерСтроки КАК Номер,
	|		МатериальнаяЦенность КАК МатериальнаяЦенность,
	|		Количество КАК Количество,
	|		ПРЕДСТАВЛЕНИЕ(Доверенность.МатериальныеЦенности.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление
	|	),
	|	Доверенность.ВидДокументаФизЛица КАК ВидДокумента,
	|	Доверенность.СерияДокументаФизЛица КАК ПаспортСерия,
	|	Доверенность.НомерДокументаФизЛица КАК ПаспортНомер,
	|	Доверенность.КемВыданДокументФизлица КАК ПаспортВыдан,
	|	Доверенность.ДатаВыдачиДокументаФизЛица КАК ПаспортДатаВыдачи,
	|	Доверенность.СуммаДокумента КАК СуммаДокумента,
	|	Представление(Доверенность.Валюта) КАК ВалютаПредставление
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенность
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Доверенность.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	Доверенность.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Доверенность.Товары.Упаковка",
			"Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование",
			"Доверенность.Товары.Упаковка",
			"Доверенность.Товары.Номенклатура"));
	
	ДанныеПечати = Запрос.Выполнить().Выбрать();
	
	ПервыйДокумент = Истина;
		
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ДоверенностьВыданная.ЖБИ_ДоверенностьМ2");
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	
	Если Тип = "ДоверенностьМ2" Тогда
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Доверенность_М2";
	ИначеЕсли Тип = "ДоверенностьМ2а" Тогда
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Доверенность_М2а";
	КонецЕсли;
	
	Если ПараметрыПечати.Свойство("ОтображатьФаксимиле") Тогда 
		Факсимиле = Истина;
	Иначе 
		Факсимиле = Ложь;
	КонецЕсли;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		ДанныеПечатиФактическиеОтгрузки = ПолучитьДанныеПечатиФактическиеОтгрузкиДоверенность(ДанныеПечати.Ссылка);	
		ФактическиеОтгрузки 	= ДанныеПечатиФактическиеОтгрузки.ФактическиеОтгрузки;
		ДоговорЗаявка			= ДанныеПечатиФактическиеОтгрузки.ДоговорЗаявка;
		Договор					= ДоговорЗаявка.Договор;
		НомерДоговора 			= Договор.Номер + "-" + ДоговорЗаявка.НомерЗаявки;
		
		НомерДокумента			= "";
		НайденныеСтроки			= ФактическиеОтгрузки.ДокументыОтгрузки.НайтиСтроки(Новый Структура("ДокументОтгрузки",ДанныеПечати.Ссылка));
		Если НайденныеСтроки.Количество()>0 Тогда 
			НомерДокумента = НайденныеСтроки[0].НомерДокумента;	
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//НомерДокументаНаПечать        = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеПечати.Номер, Ложь, Истина);
		НомерДокументаНаПечать        = НомерДоговора + ?(ПустаяСтрока(НомерДокумента),"","-" + НомерДокумента);
		
		//ФамилияИмяОтчествоДоверенного = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ФизЛицо, ДанныеПечати.ДатаДокумента);
		ФамилияИмяОтчествоДоверенного = ДанныеПечати.ФизЛицо;
		
		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Организация,
			ДанныеПечати.ДатаДокумента,
			,
			ДанныеПечати.БанковскийСчет);
		
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОбОрганизации, 
			"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны");
			
		КодПоОКУД = "";
		Если Тип = "ДоверенностьМ2" Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Отрез");
			ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
			ОбластьМакета.ДатаДокумента = ФактическиеОтгрузки.ДатаЗагрузки;
			
			СтруктураДанныхОтрез = Новый Структура;
			СтруктураДанныхОтрез.Вставить("НомерДокумента", НомерДокументаНаПечать);
			СтруктураДанныхОтрез.Вставить("ФИОДоверенного", ?(ПустаяСтрока(ДанныеПечати.Должность), "", ДанныеПечати.Должность + " ") + ФамилияИмяОтчествоДоверенного);
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхОтрез);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			НазваниеФормы = НСтр("ru='Типовая межотраслевая форма № М-2'", Метаданные.Языки.Русский.КодЯзыка);
			КодПоОКУД = "0315001";
			
		ИначеЕсли Тип = "ДоверенностьМ2а" Тогда
			
			НазваниеФормы = НСтр("ru='Типовая межотраслевая форма № М-2а'", Метаданные.Языки.Русский.КодЯзыка);
			КодПоОКУД = "0315002";
			
		КонецЕсли;
		
		// Заполнить реквизиты шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		СтруктураДанныхШапка = Новый Структура;
		ОбластьМакета.Параметры.Заполнить(ДанныеПечати);
		СтруктураДанныхШапка.Вставить("НомерДокумента", НомерДокументаНаПечать);
		СтруктураДанныхШапка.Вставить("НазваниеФормы", НазваниеФормы);
		СтруктураДанныхШапка.Вставить("ДатаДокумента", Формат(ФактическиеОтгрузки.ДатаЗагрузки,"ДФ = ""дд ММММ гггг """"г."""));
		СтруктураДанныхШапка.Вставить("СрокДействия", Формат(ДанныеПечати.СрокДействия,"ДФ = ""дд ММММ гггг """"г."""));
		СтруктураДанныхШапка.Вставить("ФамилияИмяОтчествоДоверенного", ДанныеПечати.ФизЛицо);
		СтруктураДанныхШапка.Вставить("ДолжностьДоверенного", ДанныеПечати.Должность);
		СтруктураДанныхШапка.Вставить("ОрганизацияПредставление", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("РеквизитыПотребителя", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("РеквизитыПлательщика", ПредставлениеОрганизации);
		СтруктураДанныхШапка.Вставить("ОрганизацияКодПоОКПО", СведенияОбОрганизации.КодПоОКПО);
		СтруктураДанныхШапка.Вставить("КодПоОКУД", КодПоОКУД);
		
		СтруктураДанныхШапка.Вставить("РеквизитыСчета", ФормированиеПечатныхФорм.ОписаниеОрганизации(
			СведенияОбОрганизации,
			"НомерСчета,Банк,БИК,КоррСчет,"));
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапка);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Заполнить таблицу
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаТаблицы");
		
		ВыборкаСтрокТовары = ДанныеПечати.Товары.Выбрать();
		ВыборкаСтрокМатериальныеЦенности = ДанныеПечати.МатериальныеЦенности.Выбрать();
		КоличествоСтрок = 0;
		НомерПоследнейСтроки = 0;
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			//Если ЗначениеЗаполнено(ВыборкаСтрокТовары.НоменклатураПоставщика) Тогда
			//	
			//	МатериальнаяЦенность = ВыборкаСтрокТовары.НоменклатураПоставщика;
			//	
			//Иначе
			//	
			//	МатериальнаяЦенность = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			//		ВыборкаСтрокТовары.Номенклатура,
			//		ВыборкаСтрокТовары.Характеристика);
			//	
			//КонецЕсли;
			
			МатериальнаяЦенность = СформироватьПредставлениеПечатиДляТовара(ВыборкаСтрокТовары.Номенклатура, ВыборкаСтрокТовары.НоменклатураПоставщика);
			
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			СтруктураДанныхСтрокаТаблицы.Вставить("МатериальнаяЦенность", МатериальнаяЦенность);
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ВыборкаСтрокТовары.КоличествоУпаковок = 0,
				"",
				Строка(ВыборкаСтрокТовары.КоличествоУпаковок) + " (" + 
				ФормированиеПечатныхФорм.КоличествоПрописью(ВыборкаСтрокТовары.КоличествоУпаковок) + ")"));
			
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЦикла;
		
		Пока ВыборкаСтрокМатериальныеЦенности.Следующий() Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокМатериальныеЦенности);
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			НомерПоследнейСтроки = ВыборкаСтрокМатериальныеЦенности.Номер + КоличествоСтрок;
			СтруктураДанныхСтрокаТаблицы.Вставить("Номер", НомерПоследнейСтроки);
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ВыборкаСтрокМатериальныеЦенности.Количество = 0,
				"",
				Строка(ВыборкаСтрокМатериальныеЦенности.Количество) + " (" + 
				ФормированиеПечатныхФорм.КоличествоПрописью(ВыборкаСтрокМатериальныеЦенности.Количество) + ")"));
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЦикла;
		
		Если НЕ ДанныеПечати.СуммаДокумента = 0 Тогда
			
			СтруктураДанныхСтрокаТаблицы = Новый Структура;
			НомерПоследнейСтроки = НомерПоследнейСтроки + 1;
			СтруктураДанныхСтрокаТаблицы.Вставить("Номер", НомерПоследнейСтроки);
			СтруктураДанныхСтрокаТаблицы.Вставить("МатериальнаяЦенность", НСтр("ru = 'Наличные денежные средства'"));
			СтруктураДанныхСтрокаТаблицы.Вставить("КоличествоПрописью",
				?(ДанныеПечати.СуммаДокумента = 0,
				"",
				Строка(ДанныеПечати.СуммаДокумента) + " (" + 
				ФормированиеПечатныхФорм.КоличествоПрописью(ДанныеПечати.СуммаДокумента) + ")"));
			СтруктураДанныхСтрокаТаблицы.Вставить("ЕдиницаИзмеренияПредставление", ДанныеПечати.ВалютаПредставление);
			ОбластьМакета.Параметры.Заполнить(СтруктураДанныхСтрокаТаблицы);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Заполнить реквизиты подвала
		Если Факсимиле Тогда 
			ОбластьМакета 		= Макет.ПолучитьОбласть("ПодвалФаксимиле");
			ВывестиФаксимилеОрганизацииВТабличныйДокумент(Макет, ОбластьМакета, "ПодвалФаксимиле", ДанныеПечати.Организация, "ФаксимилеОрганизации");
			ФаксимилеСотрудника = ФактическиеОтгрузки.ПодписантЗаказчик.ЖБИ_ФаксимилеПользователя;
			ВывестиФаксимилеСотрудникаВТабличныйДокумент(Макет, ОбластьМакета, "ПодвалФаксимиле", ФаксимилеСотрудника, "ФаксимилеСотрудника");
			ВывестиФаксимилеСотрудникаВТабличныйДокумент(Макет, ОбластьМакета, "ПодвалФаксимиле", ФаксимилеСотрудника, "ФаксимилеСотрудника1");
		Иначе 
			ОбластьМакета = Макет.ПолучитьОбласть("Подвал");	
		КонецЕсли;
					
		СтруктураДанныхПодвал = Новый Структура;
		СтруктураДанныхПодвал.Вставить("ФИОРуководителя", ФактическиеОтгрузки.ПодписантЗаказчик.Наименование);
		//СтруктураДанныхПодвал.Вставить("ФИОРуководителя", ФактическиеОтгрузки.ПодписантЗаказчик.Наименование);
		СтруктураДанныхПодвал.Вставить("ФИОГлавногоБухгалтера", ДанныеПечати.ГлавныйБухгалтер);
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхПодвал);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область ЖБИ_ФактическиеОтгрузки

Функция ЗаполнитьТабличныйДокументДоговорЗаявка(ТабличныйДокумент, МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	Если МассивОбъектов.Количество()>0 Тогда 
		СсылкаНаДокумент = МассивОбъектов[0];
	Иначе 
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
		
	Макет 						= Документы.ЖБИ_ДоговорЗаявка.ПолучитьМакет("ЖБИ_ДоговорЗаявка");	
	НомерСтрокиНачало 			= ТабличныйДокумент.ВысотаТаблицы + 1;	
	ДанныеПечати 				= ДанныеПечатиДоговорЗаявка(СсылкаНаДокумент);
	
	Если ПараметрыПечати.Свойство("ОтображатьФаксимиле") Тогда 
		Факсимиле = Истина;
	Иначе 
		Факсимиле = Ложь;
	КонецЕсли;
	
	ЗаголовокЗаголовокЛоготип 	= Макет.ПолучитьОбласть("ЗаголовокЛоготип");
	ЗаполнитьЗначенияСвойств(ЗаголовокЗаголовокЛоготип.Параметры,ДанныеПечати);
	ФормированиеПечатныхФорм.ВывестиЛоготипВТабличныйДокумент(Макет, ЗаголовокЗаголовокЛоготип, "ЗаголовокЗаголовокЛоготип", ДанныеПечати.Организация);
	ТабличныйДокумент.Вывести(ЗаголовокЗаголовокЛоготип);
	
	Если ДанныеПечати.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда 
		Заголовок 				= Макет.ПолучитьОбласть("ЗаголовокЮрЛицо");
	Иначе
		Заголовок 				= Макет.ПолучитьОбласть("ЗаголовокИП");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Заголовок.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(Заголовок);
	
	Пункт1 						= Макет.ПолучитьОбласть("Пункт1");
	Пункт1_Поставщик 			= Макет.ПолучитьОбласть("Пункт1_Поставщик");
	//Пункт1_ПунктНазначения 		= Макет.ПолучитьОбласть("Пункт1_ПунктНазначения");
	Ном = 1;
	ТЧПоставщики				= СсылкаНаДокумент.Товары.Выгрузить(,"Поставщик,ПунктОтгрузки,ПунктНазначения");
	ТЧПоставщики.Свернуть("Поставщик,ПунктОтгрузки,ПунктНазначения");
	Для Каждого НомСтр Из ТЧПоставщики Цикл 
		Если Ном = 1 Тогда 
			ЗаполнитьЗначенияСвойств(Пункт1.Параметры,НомСтр);
			Пункт1.Параметры.Поставщик 			= НомСтр.Поставщик.НаименованиеПолное;
			Пункт1.Параметры.ПунктОтгрузки 		= НомСтр.ПунктОтгрузки;
			Пункт1.Параметры.ПунктНазначения 	= НомСтр.ПунктНазначения;
			ТабличныйДокумент.Вывести(Пункт1);
		Иначе
			ЗаполнитьЗначенияСвойств(Пункт1_Поставщик.Параметры,НомСтр);
			//Пункт1.Параметры.Поставщик 				= НомСтр.Поставщик.НаименованиеПолное;
			//Пункт1_Поставщик.Параметры.ПунктОтгрузки 	= НомСтр.ПунктОтгрузки;
			Пункт1_Поставщик.Параметры.ПунктНазначения 	= НомСтр.ПунктНазначения;
			ТабличныйДокумент.Вывести(Пункт1_Поставщик);		
		КонецЕсли;
		Ном = Ном + 1;
	КонецЦикла;
	//Пункт1_ПунктНазначения.Параметры.ПунктНазначения = ДанныеПечати.ПунктНазначения;
	//ТабличныйДокумент.Вывести(Пункт1_ПунктНазначения);
		
	СтрокаТаблицы 				= Макет.ПолучитьОбласть("Товары");
	ТЧТовары 					= Макет.ПолучитьОбласть("ТЧТовары");
	Ном = 1;
	Для Каждого НомСтр Из СсылкаНаДокумент.Товары Цикл 		
		Если Ном = 1 Тогда 
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы.Параметры,НомСтр);
			СтрокаТаблицы.Параметры.Товар 				= НомСтр.Номенклатура;
			СтрокаТаблицы.Параметры.ЕдиницаИзмерения 	= НомСтр.Номенклатура.ЕдиницаИзмерения;
			ТабличныйДокумент.Вывести(СтрокаТаблицы);
		Иначе
			ЗаполнитьЗначенияСвойств(ТЧТовары.Параметры,НомСтр);
			ТЧТовары.Параметры.Товар 				= НомСтр.Номенклатура;
			ТЧТовары.Параметры.ЕдиницаИзмерения 	= НомСтр.Номенклатура.ЕдиницаИзмерения;
			ТабличныйДокумент.Вывести(ТЧТовары);		
		КонецЕсли;
		Ном = Ном + 1;	
	КонецЦикла;	
	СтрокаТаблицыИтоги 			= Макет.ПолучитьОбласть("ТоварИтоги");
	СтрокаТаблицыИтоги.Параметры.ИтогоКоличество 	= СсылкаНаДокумент.Товары.Итог("Количество");
	СтрокаТаблицыИтоги.Параметры.ИтогоОбщийВес 		= СсылкаНаДокумент.Товары.Итог("ОбщийВес");
	ТабличныйДокумент.Вывести(СтрокаТаблицыИтоги);
	
	Пункт1_6 					= Макет.ПолучитьОбласть("Пункт1_6");
	ЗаполнитьЗначенияСвойств(Пункт1_6.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(Пункт1_6);
	
	ТЧПоставщики				= СсылкаНаДокумент.Товары.Выгрузить(,"Поставщик,ПунктОтгрузки");
	ТЧПоставщики.Свернуть("Поставщик,ПунктОтгрузки");
	Пункт1_6_МестоЗагрузки 				= Макет.ПолучитьОбласть("Пункт1_6_МестоЗагрузки");
	Пункт1_6_МестоЗагрузки_Поставщик 	= Макет.ПолучитьОбласть("Пункт1_6_МестоЗагрузки_Поставщик");

	ДатаАктуальности 					= ТекущаяДатаСеанса();
	Ном = 1;
	Для Каждого НомСтр Из ТЧПоставщики Цикл
		КонтактныеЛицаПоставщика = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		НайденныеСтроки 		 = СсылкаНаДокумент.Товары.НайтиСтроки(Новый Структура("Поставщик,ПунктОтгрузки",НомСтр.Поставщик,НомСтр.ПунктОтгрузки));
		Если НайденныеСтроки.Количество()>0 Тогда
			КонтактныеЛицаПоставщика = НайденныеСтроки[0].КонтактныеЛицаПоставщика; 	
		КонецЕсли;
		Если Ном = 1 Тогда 
			ЗаполнитьЗначенияСвойств(Пункт1_6_МестоЗагрузки.Параметры,НомСтр);
			Пункт1_6_МестоЗагрузки.Параметры.КонтактныеЛицаПоставщика = КонтактныеЛицаПоставщика;
			ТелефонКонтактноеЛицоПоставщика = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактныеЛицаПоставщика,Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,ДатаАктуальности);
			Пункт1_6_МестоЗагрузки.Параметры.ТелефонКонтактноеЛицоПоставщика = ТелефонКонтактноеЛицоПоставщика;
			ТабличныйДокумент.Вывести(Пункт1_6_МестоЗагрузки);
		Иначе
			ЗаполнитьЗначенияСвойств(Пункт1_6_МестоЗагрузки_Поставщик.Параметры,НомСтр);
			Пункт1_6_МестоЗагрузки_Поставщик.Параметры.КонтактныеЛицаПоставщика = КонтактныеЛицаПоставщика;
			ТелефонКонтактноеЛицоПоставщика = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактныеЛицаПоставщика,Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,ДатаАктуальности);
			Пункт1_6_МестоЗагрузки_Поставщик.Параметры.ТелефонКонтактноеЛицоПоставщика = ТелефонКонтактноеЛицоПоставщика;
			ТабличныйДокумент.Вывести(Пункт1_6_МестоЗагрузки_Поставщик);		
		КонецЕсли;
		Ном = Ном + 1;
	КонецЦикла;
	
	Пункт1_6_МестоЗагрузки_График 		= Макет.ПолучитьОбласть("Пункт1_6_МестоЗагрузки_График");
	ТабличныйДокумент.Вывести(Пункт1_6_МестоЗагрузки_График);
	
	Пункт1_6_ДатаЗагрузки		= Макет.ПолучитьОбласть("Пункт1_6_ДатаЗагрузки");
	МестоРазгрузки				= Макет.ПолучитьОбласть("МестоРазгрузки");
	ТЧПоставщики				= СсылкаНаДокумент.Товары.Выгрузить(,"Покупатель,ПунктНазначения");
	ТЧПоставщики.Свернуть("Покупатель,ПунктНазначения");
	
	Ном = 1;
	Для Каждого НомСтр Из ТЧПоставщики Цикл
		КонтактныеЛицаПлательщика = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		НайденныеСтроки 		  = СсылкаНаДокумент.Товары.НайтиСтроки(Новый Структура("Покупатель,ПунктНазначения",НомСтр.Покупатель,НомСтр.ПунктНазначения));
		Если НайденныеСтроки.Количество()>0 Тогда
			КонтактныеЛицаПлательщика = НайденныеСтроки[0].КонтактныеЛицаПокупателя; 	
		КонецЕсли;
		Если Ном = 1 Тогда 
			ЗаполнитьЗначенияСвойств(Пункт1_6_ДатаЗагрузки.Параметры,НомСтр);
			Пункт1_6_ДатаЗагрузки.Параметры.ДатаВыгрузки = ДанныеПечати.ДатаВыгрузки;
			Пункт1_6_ДатаЗагрузки.Параметры.КонтактныеЛицаПлательщика = КонтактныеЛицаПлательщика;
			ТелефонКонтактноеЛицоПокупателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактныеЛицаПлательщика,Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,ДатаАктуальности);
			Пункт1_6_ДатаЗагрузки.Параметры.ТелефонКонтактноеЛицоПокупателя = ТелефонКонтактноеЛицоПокупателя;
			ТабличныйДокумент.Вывести(Пункт1_6_ДатаЗагрузки);
		Иначе
			ЗаполнитьЗначенияСвойств(МестоРазгрузки.Параметры,НомСтр);
			Пункт1_6_ДатаЗагрузки.Параметры.ДатаВыгрузки = ДанныеПечати.ДатаВыгрузки;
			МестоРазгрузки.Параметры.КонтактныеЛицаПлательщика = КонтактныеЛицаПлательщика;
			ТелефонКонтактноеЛицоПокупателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактныеЛицаПлательщика,Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,ДатаАктуальности);
			МестоРазгрузки.Параметры.ТелефонКонтактноеЛицоПокупателя = ТелефонКонтактноеЛицоПокупателя;
			ТабличныйДокумент.Вывести(МестоРазгрузки);		
		КонецЕсли;
		Ном = Ном + 1;
	КонецЦикла;
	
	Пункт1_6_Подвал 					= Макет.ПолучитьОбласть("Пункт1_6_Подвал");
	ЗаполнитьЗначенияСвойств(Пункт1_6_Подвал.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(Пункт1_6_Подвал);	
	
	Если Факсимиле Тогда 
		Подвал = Макет.ПолучитьОбласть("ПодвалФаксимиле");
		ВывестиФаксимилеОрганизацииВТабличныйДокумент(Макет, Подвал, "ПодвалФаксимиле", ДанныеПечати.Организация, "ФаксимилеОрганизации");
		ВывестиФаксимилеСотрудникаВТабличныйДокумент(Макет, Подвал, "ПодвалФаксимиле", ДанныеПечати.Факсимиле, "ФаксимилеСотрудника");
	Иначе 
		Подвал = Макет.ПолучитьОбласть("Подвал");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Подвал.Параметры,ДанныеПечати);
	ТабличныйДокумент.Вывести(Подвал);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаНаДокумент);
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеПечатиДоговорЗаявка(СсылкаНаДокумент)
	
	ДанныеПечатиДоговорЗаявка = Новый Структура();
	
	Организация 						= СсылкаНаДокумент.Организация;
	Перевозчик							= СсылкаНаДокумент.Перевозчик;
	Контрагент							= СсылкаНаДокумент.Контрагент;
	Договор								= СсылкаНаДокумент.Договор;
	ДатаАктуальности 					= ТекущаяДатаСеанса();
	ДокументОснование					= СсылкаНаДокумент.ДокументОснование;
	НомерПоПорядку 						= СсылкаНаДокумент.НомерЗаявки;

	ДанныеПечатиДоговорЗаявка.Вставить("Организация",Организация);
	ДанныеПечатиДоговорЗаявка.Вставить("Перевозчик",Перевозчик);
	ДанныеПечатиДоговорЗаявка.Вставить("Контрагент",Контрагент);
	
	ДанныеПечатиДоговорЗаявка.Вставить("НомерДоговора",Договор.Номер);
	ДанныеПечатиДоговорЗаявка.Вставить("ДатаДоговора",Формат(Договор.Дата,"ДФ=dd.MM.yyyy"));
	ДанныеПечатиДоговорЗаявка.Вставить("СчетчикПродаж",НомерПоПорядку);
	ДанныеПечатиДоговорЗаявка.Вставить("ДатаЗагрузки",Формат(ДокументОснование.ДатаЗагрузки,"ДФ=dd.MM.yyyy"));
	
	//Перевозчик
	ДанныеПечатиДоговорЗаявка.Вставить("НазваниеОрганизацииПеревозчика",Перевозчик);
	ДанныеПечатиДоговорЗаявка.Вставить("ПодписантДолжностьПеревозчик",daСклонение(ДокументОснование.ПодписантДолжностьПеревозчик.Наименование,"Р", , "Д", "Абв"));
	ПодписантПеревозчикФИО 				= ДокументОснование.ПодписантПеревозчик.Наименование;
	ПоискРода 							= "?"; Результат = daСклонение(ПодписантПеревозчикФИО, "Р", ПоискРода);
	ДанныеПечатиДоговорЗаявка.Вставить("ПодписантПеревозчик",daСклонение(ДокументОснование.ПодписантПеревозчик.Наименование,"Р",?(ПоискРода = "?","М",ПоискРода),"ФИО"));
	ДанныеПечатиДоговорЗаявка.Вставить("ПодписантОснованиеСоСтороныПеревозчика",ДокументОснование.ПодписантОснованиеСоСтороныПеревозчика);
	
	//Покупатель организация
	ДанныеПечатиДоговорЗаявка.Вставить("НазваниеОрганизации",Организация.НаименованиеСокращенное);
	Если Не ЗначениеЗаполнено(ДокументОснование.ПодписантЗаказчик) Тогда 
		СтруктураРуководитель = ПолучитьОтветственноеЛицо(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель, Организация);
		СтруктураРуководитель.Вставить("Факсимиле",СтруктураРуководитель.ОтветственноеЛицо.ЖБИ_ФаксимилеПользователя);
	Иначе
		СтруктураРуководитель = Новый Структура();
		СтруктураРуководитель.Вставить("Должность", ДокументОснование.ПодписантЗаказчик.Должность);
		СтруктураРуководитель.Вставить("ФизическоеЛицо", ДокументОснование.ПодписантЗаказчик.ФизическоеЛицо); 
		СтруктураРуководитель.Вставить("ДокументПраваПодписи", ДокументОснование.ПодписантЗаказчик.ОснованиеПраваПодписи);
		СтруктураРуководитель.Вставить("Факсимиле",ДокументОснование.ПодписантЗаказчик.ЖБИ_ФаксимилеПользователя);
	КонецЕсли;
	
	ДанныеПечатиДоговорЗаявка.Вставить("ДолжностьОрганизации",daСклонение(СтруктураРуководитель.Должность,"Р", , "Д", "Абв"));
	ДанныеПечатиДоговорЗаявка.Вставить("ФИООрганизации",daСклонение(СтруктураРуководитель.ФизическоеЛицо,"Р","М","ФИО"));	
	ДанныеПечатиДоговорЗаявка.Вставить("ПодписантОснованиеСоСтороныОрганизации",СтруктураРуководитель.ДокументПраваПодписи);
	ДанныеПечатиДоговорЗаявка.Вставить("Факсимиле",СтруктураРуководитель.Факсимиле);
		
	//ДанныеПечатиДоговорЗаявка.Вставить("Поставщик",СсылкаНаДокумент.Поставщик.НаименованиеПолное);
	//ДанныеПечатиДоговорЗаявка.Вставить("ПунктОтгрузки",СсылкаНаДокумент.ПунктОтгрузки);
	ДанныеПечатиДоговорЗаявка.Вставить("ПунктНазначения",СсылкаНаДокумент.ПунктНазначения);
	ДанныеПечатиДоговорЗаявка.Вставить("СпособЗагрузки",ДокументОснование.СпособЗагрузки);
	ДанныеПечатиДоговорЗаявка.Вставить("ДатаЗагрузки",Формат(ДокументОснование.ДатаЗагрузки,"ДФ=dd.MM.yyyy"));
	
	//ТелефонКонтактноеЛицоПоставщика = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаНаДокумент.КонтактныеЛицаПоставщика,Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,ДатаАктуальности);	
	//ДанныеПечатиДоговорЗаявка.Вставить("КонтактныеЛицаПоставщика",СсылкаНаДокумент.КонтактныеЛицаПоставщика);
	//ДанныеПечатиДоговорЗаявка.Вставить("ТелефонКонтактноеЛицоПоставщика",ТелефонКонтактноеЛицоПоставщика);
	
	ДанныеПечатиДоговорЗаявка.Вставить("Плательщик",СсылкаНаДокумент.Покупатель.НаименованиеПолное);
	ДанныеПечатиДоговорЗаявка.Вставить("КонтактныеЛицаПлательщика",СсылкаНаДокумент.КонтактныеЛицаПокупателя);
	ТелефонКонтактноеЛицоПокупателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаНаДокумент.КонтактныеЛицаПокупателя,Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,ДатаАктуальности);	
	ДанныеПечатиДоговорЗаявка.Вставить("ТелефонКонтактноеЛицоПокупателя",ТелефонКонтактноеЛицоПокупателя);	
	
	ДанныеПечатиДоговорЗаявка.Вставить("ДатаВыгрузки",Формат(ДокументОснование.ДатаВыгрузки,"ДФ=dd.MM.yyyy"));
	
	ДанныеПечатиДоговорЗаявка.Вставить("АвтомобильМарка",ДокументОснование.АвтомобильМарка);
	ДанныеПечатиДоговорЗаявка.Вставить("АвтомобильГосударственныйНомер",ДокументОснование.АвтомобильГосударственныйНомер);
	ДанныеПечатиДоговорЗаявка.Вставить("МаркаПрицепа",ДокументОснование.МаркаПрицепа);
	ДанныеПечатиДоговорЗаявка.Вставить("НомерПрицепа",ДокументОснование.НомерПрицепа);
	
	ДанныеПечатиДоговорЗаявка.Вставить("Водитель",ДокументОснование.Водитель);
	ДанныеПечатиДоговорЗаявка.Вставить("ТелефонВодителя",ДокументОснование.ТелефонВодителя);
	
	ДанныеПечатиДоговорЗаявка.Вставить("ПаспортСерия","");
	ДанныеПечатиДоговорЗаявка.Вставить("ПаспортНомер","");
	ДанныеПечатиДоговорЗаявка.Вставить("ПаспортКемВыдан","");
	ДанныеПечатиДоговорЗаявка.Вставить("ПаспортДатаВыдачи","");
	ДокументУдостоверяющийЛичностьФизлица = ДокументУдостоверяющийЛичностьФизлица(ДокументОснование.Водитель.Водитель, ДатаАктуальности);
	Если ДокументУдостоверяющийЛичностьФизлица.Количество()>0 Тогда 
		ДанныеПечатиДоговорЗаявка.ПаспортСерия 		=  ДокументУдостоверяющийЛичностьФизлица[0].СерияДокументаФизЛица;
		ДанныеПечатиДоговорЗаявка.ПаспортНомер 		=  ДокументУдостоверяющийЛичностьФизлица[0].НомерДокументаФизЛица;
		ДанныеПечатиДоговорЗаявка.ПаспортКемВыдан 	=  ДокументУдостоверяющийЛичностьФизлица[0].КемВыданДокументФизлица;
		ДанныеПечатиДоговорЗаявка.ПаспортДатаВыдачи =  Формат(ДокументУдостоверяющийЛичностьФизлица[0].ДатаВыдачиДокументаФизЛица,"ДФ=dd.MM.yyyy");;
	КонецЕсли;
	
	СтавкаНДС = ?(ДокументОснование.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС," Без НДС"," с НДС " + ДокументОснование.СтавкаНДС);
	СуммаПрописьюФрахта = Строка(ДокументОснование.СтавкаФрахта) + " ("+РаботаСКурсамиВалют.СформироватьСуммуПрописью(ДокументОснование.СтавкаФрахта, ДокументОснование.Валюта, Истина)+")"+СтавкаНДС;
	ДанныеПечатиДоговорЗаявка.Вставить("СуммаПрописьюФрахта", СуммаПрописьюФрахта);
	
	СведенияОПокупателе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация,ДатаАктуальности,,ДокументОснование.БанковскийСчетПлательщика);
	
	МассивКИ = Новый Массив();
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	МассивКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	
	//СтруктураДанныхПодвал 	= Новый Структура;
	//ТаблицаИсполнители		= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СсылкаНаДокумент.Менеджер, МассивКИ, ТекущаяДатаСеанса(), Ложь);
	//ЗаполнитьИсполнителейПечати(ТаблицаИсполнители,СтруктураДанныхПодвал, СсылкаНаДокумент);
	
	ЭлАдрес = ВернутьЭлАдресОрганизации(Организация);
	
	//СведенияОПокупателе.Вставить("ПочтаПокупателя",УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,Справочники.ВидыКонтактнойИнформации.EmailОрганизации,ДатаАктуальности));
	СведенияОПокупателе.Вставить("ПочтаПокупателя",ЭлАдрес);
	СведенияОПокупателе.Вставить("ПочтовыйАдресПокупателя",УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,ДатаАктуальности));
	
	СведенияОПеревозчике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Контрагент,ДатаАктуальности,,ДокументОснование.БанковскийСчетПеревозка);
	СведенияОПеревозчике.Вставить("ПочтаПеревозчика",УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,Справочники.ВидыКонтактнойИнформации.EmailКонтрагента,ДатаАктуальности));
	СведенияОПеревозчике.Вставить("ПочтовыйАдресПочтаПеревозчика",УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Контрагент,Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента,ДатаАктуальности));
	
	ДанныеПечатиДоговорЗаявка.Вставить("НазваниеОрганизацииПокупателя",СведенияОПокупателе.НаименованиеДляПечатныхФорм);
	ДанныеПечатиДоговорЗаявка.Вставить("НазваниеОрганизацииПеревозчика",СведенияОПеревозчике.НаименованиеДляПечатныхФорм);
	ДанныеПечатиДоговорЗаявка.Вставить("ЮридическийАдресПокупателя",СведенияОПокупателе.ЮридическийАдрес);
	ДанныеПечатиДоговорЗаявка.Вставить("ЮридическийАдресПеревозчика",СведенияОПеревозчике.ЮридическийАдрес);
	ДанныеПечатиДоговорЗаявка.Вставить("ПочтовыйАдресПокупателя",СведенияОПокупателе.ПочтовыйАдресПокупателя);
	ДанныеПечатиДоговорЗаявка.Вставить("ПочтовыйАдресПеревозчика",СведенияОПеревозчике.ПочтовыйАдресПочтаПеревозчика);
	ДанныеПечатиДоговорЗаявка.Вставить("ТелефонПокупателя",СведенияОПокупателе.Телефоны);
	ДанныеПечатиДоговорЗаявка.Вставить("ТелефонПеревозчика",СведенияОПеревозчике.Телефоны);
	ДанныеПечатиДоговорЗаявка.Вставить("ПочтаПокупателя",СведенияОПокупателе.ПочтаПокупателя);
	ДанныеПечатиДоговорЗаявка.Вставить("ПочтаПеревозчика",СведенияОПеревозчике.ПочтаПеревозчика);
	ДанныеПечатиДоговорЗаявка.Вставить("ИННКПППокупателя",СведенияОПокупателе.ИНН+"/"+СведенияОПокупателе.КПП);
	ДанныеПечатиДоговорЗаявка.Вставить("ИННКПППеревозчика",СведенияОПеревозчике.ИНН+"/"+СведенияОПеревозчике.КПП);
	ДанныеПечатиДоговорЗаявка.Вставить("РСПокупателя",СведенияОПокупателе.НомерСчета);
	ДанныеПечатиДоговорЗаявка.Вставить("РСПеревозчика",СведенияОПеревозчике.НомерСчета);
	ДанныеПечатиДоговорЗаявка.Вставить("БИКПокупателя",СведенияОПокупателе.БИК);
	ДанныеПечатиДоговорЗаявка.Вставить("БИКПеревозчика",СведенияОПеревозчике.БИК);	
	ДанныеПечатиДоговорЗаявка.Вставить("КСПокупателя",СведенияОПокупателе.КоррСчет);
	ДанныеПечатиДоговорЗаявка.Вставить("БанкПокупателя",СведенияОПокупателе.Банк);
	ДанныеПечатиДоговорЗаявка.Вставить("КСПеревозчика",СведенияОПеревозчике.КоррСчет);
	ДанныеПечатиДоговорЗаявка.Вставить("БанкПеревозчика",СведенияОПеревозчике.Банк);
	
	ДанныеПечатиДоговорЗаявка.Вставить("ДолжностьПокупателя",СтруктураРуководитель.Должность);
	ДанныеПечатиДоговорЗаявка.Вставить("ДолжностьПеревозчика",ДокументОснование.ПодписантДолжностьПеревозчик.Наименование);
	
	ДанныеПечатиДоговорЗаявка.Вставить("ФИОСокрашенноеПокупателя",daСклонение(СтруктураРуководитель.ФизическоеЛицо.Наименование, "И", , , "Фамилия И. О."));
	ДанныеПечатиДоговорЗаявка.Вставить("ФИОСокрашенноеПеревозчика",daСклонение(ПодписантПеревозчикФИО, "И", , , "Фамилия И. О."));
	
	Возврат ДанныеПечатиДоговорЗаявка;
	
КонецФункции

#КонецОбласти
