
#Область ОбщиеПроцедурыИФункции 

// Если передено число - то истина, иначе ложь
Функция ЯвляетсяЧислом(Значение) 
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Истина
	Иначе
		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Если Значение = "" Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Попытка
			Р = Число(Значение);
		Исключение
			Возврат Ложь;
		КонецПопытки;
			Возврат Истина;
		КонецЕсли;
		
КонецФункции

Процедура ЗафиксироватьОшибку(СообщениеОбОшибке, ИмяСобытияЖурналаРегистрации, Знач ДанныеСсылка = Неопределено, Знач ВыводитьСообщениеОбОшибке = Истина) Экспорт

	Если ЗначениеЗаполнено(ДанныеСсылка) Тогда
		Попытка
			ОбъектМетаданных = ДанныеСсылка.Метаданные();			
		Исключение
			ОбъектМетаданных = Неопределено;
		КонецПопытки;
	Иначе
		ДанныеСсылка = Неопределено;		
		ОбъектМетаданных = Неопределено;
	КонецЕсли; 
	
	Если ПустаяСтрока(ИмяСобытияЖурналаРегистрации) Тогда
		ИмяСобытияЖурналаРегистрации = "Ошибка";	
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных, ДанныеСсылка, СообщениеОбОшибке);	
	
КонецПроцедуры

Функция СтрокаВДату(Знач ФорматДаты, Знач Дано, Ошибка = Ложь) Экспорт 
    Попытка 
        ё = Формат('00010101', "ДФ=" + ФорматДаты) // - необязательная проверка первого правильности параметра 
    Исключение 
        Ошибка = Истина; 
        Возврат '00010101' 
    КонецПопытки; 
    Ч = Новый Соответствие; 
    Для ё = 1 По СтрДлина(ФорматДаты) + 7 Цикл 
        Ч[Сред(ФорматДаты + "dMyHhms", ё, 1)] = 0    // - инициализация частей даты 
    КонецЦикла; 
    Для ё = 1 По 12 Цикл 
        Дано = СтрЗаменить(Дано, Формат(Дата(1, ё, 1), "ДФ=MMММ"), Формат(ё, "ЧЦ=4; ЧВН=")); // - замена названий месяцев числами 
        Дано = СтрЗаменить(Дано, Формат(Дата(1, ё, 1), "ДФ=MMМ" ), Формат(ё, "ЧЦ=3; ЧВН=")) 
    КонецЦикла; 
    Для ё = 1 По СтрДлина(ФорматДаты) Цикл 
        Ч[Сред(ФорматДаты, ё, 1)] = 10 * Ч[Сред(ФорматДаты, ё, 1)] + Найти("123456789", Сред(Дано, ё, 1)); // - накопление частей даты 
        Ошибка = Ошибка ИЛИ Найти("dMyHhms", Сред(ФорматДаты, ё, 1)) И НЕ Найти("0123456789", Сред(Дано, ё, 1)) // - необязательная проверка на цифры 
    КонецЦикла; 
    Ч["y"] = Ч["y"] + ?(Ч["y"] < 50, 2000, ?(Ч["y"] < 100, 1900, 0)); // - дополнение двух цифр года до четырех 
    Попытка 
        Возврат Дата(Ч["y"], Ч["M"], Ч["d"], Ч["H"] + Ч["h"], Ч["m"], Ч["s"]) 
    Исключение 
        Ошибка = Истина; 
        Возврат '00010101' 
    КонецПопытки 
КонецФункции

#КонецОбласти

#Область Лог

Процедура ЗаписьЖурналаОбмена(СтруктураСообщения,СтруктураОтвета)
	
	МенеджерЗаписи = РегистрыСведений.ЖБИ_РегистрацияОбмена.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период 		= ТекущаяДата();
	МенеджерЗаписи.ВидЗапроса 	= СтруктураСообщения.ВидЗапроса;
	МенеджерЗаписи.ТекстЗапроса = СтруктураСообщения.ТекстЗапроса;
	МенеджерЗаписи.ТекстОтвета 	= СтруктураСообщения.Ответ_Json;
	МенеджерЗаписи.Пользователь = ПараметрыСеанса.ТекущийПользователь; 
	МенеджерЗаписи.ОбменВыполненУспешно = СтруктураОтвета.successful;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Работа_со_структурой_сообщения

Функция ВернутьОтветноеСообщение(СтруктураСообщения) Экспорт 
		
	СтруктураОтвета = Новый Структура("successful",Истина);
	Если ЕстьОшибка(СтруктураСообщения) Тогда
		СтруктураОтвета = Новый Структура("successful",Ложь);
		СтруктураОтвета.Вставить("errorDescription", СтруктураСообщения.ТекстСообщенияОбОшибке);
	Иначе
		СтруктураОтвета.Вставить("result",СтруктураСообщения.Результат);		
	КонецЕсли;
	
	ПарамЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто,Символы.Таб, Истина, ЭкранированиеСимволовJSON.Нет, Ложь, Ложь, Ложь, Ложь);
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Истина;
	ЗаписьJSON.УстановитьСтроку(ПарамЗаписи);

	ЗаписатьJSON(ЗаписьJSON, СтруктураОтвета);
	СтрокаДляОтвета = ЗаписьJSON.Закрыть();
	
	//Лог +
	СтруктураСообщения.Ответ_Json = СтрокаДляОтвета;
	ЗаписьЖурналаОбмена(СтруктураСообщения,СтруктураОтвета);
	//Лог-
	
	Возврат СтрокаДляОтвета;
	
КонецФункции

Функция ЕстьОшибка(СтруктураСообщения)
	Возврат (СтруктураСообщения.ТекстСообщенияОбОшибке <> "");	
КонецФункции

Процедура ВставитьСообщениеОбОшибке(СтруктураСообщения, ТекстСообщенияОбОшибке, ИнформацияОбОшибке = Неопределено)
	
	Если ТипЗнч(ТекстСообщенияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ТекстСообщенияОбОшибке);
	Иначе
		ПредставлениеОшибки = ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			ИнформацияОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		КонецЕсли;
		ПредставлениеОшибки = ПредставлениеОшибки + Символы.ПС + ИнформацияОбОшибке;
	КонецЕсли;
	
	Если СтруктураСообщения = Неопределено Тогда		
		Сообщить(ПредставлениеОшибки);
	Иначе
		СтруктураСообщения.Вставить("ТекстСообщенияОбОшибке", ПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ExecuteTask

Функция ExecuteTask(ТекстЗапроса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураСообщения = ПолучитьСтруктуруСообщения(ТекстЗапроса);
	Если ЕстьОшибка(СтруктураСообщения) Тогда
		Возврат ВернутьОтветноеСообщение(СтруктураСообщения);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ТекстОтвета = "";
	ИмяФункции = СтруктураСообщения.ИмяФункции;		
	Попытка
		Если ИмяФункции = "ping" Тогда
			GetPing(СтруктураСообщения);
		ИначеЕсли ИмяФункции = "getpricelist" Тогда //получить каталог товаров
			Узел = ПланыОбмена.ЖБИ_ОбменССайтом.НайтиПоРеквизиту("СлужебнаяКод","ОбменССайтом");
			Если НЕ ЗначениеЗаполнено(Узел) Тогда 
				ВставитьСообщениеОбОшибке(СтруктураСообщения,"Не найден узел обмена ОбменССайтом");
				ВернутьОтветноеСообщение(СтруктураСообщения);
			КонецЕсли;		
			GetPriceList(СтруктураСообщения, Узел);
		Иначе 
			ВставитьСообщениеОбОшибке(СтруктураСообщения,"Неверный тип запроса (RequestStatement):" + ИмяФункции, ИнформацияОбОшибке());
		КонецЕсли;		
		ТекстОтвета = ВернутьОтветноеСообщение(СтруктураСообщения);
	Исключение
		ВставитьСообщениеОбОшибке(СтруктураСообщения,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + ТекстЗапроса, ИнформацияОбОшибке());
		ТекстОтвета = ВернутьОтветноеСообщение(СтруктураСообщения);
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТекстОтвета;
	
КонецФункции

Функция ПолучитьСтруктуруСообщения(ТекстЗапроса)
		
	СтруктураСообщения = Новый Структура("Запрос_Json, ИмяФункции, Результат,Ответ_Json");
	СтруктураСообщения.Вставить("ТекстСообщенияОбОшибке", "");
	СтруктураСообщения.Вставить("ТекстЗапроса", ТекстЗапроса);
	
	ПрочитатьТекстЗапроса(СтруктураСообщения);
	Если ЕстьОшибка(СтруктураСообщения) Тогда Возврат СтруктураСообщения; КонецЕсли;
	 
	ПроверитьАвторизацию(СтруктураСообщения);
	Если ЕстьОшибка(СтруктураСообщения) Тогда Возврат СтруктураСообщения; КонецЕсли;
	
	Возврат СтруктураСообщения;
	
КонецФункции

Процедура ПрочитатьТекстЗапроса(СтруктураСообщения)
	
	ТекстЗапроса = СтруктураСообщения.ТекстЗапроса;
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		ВставитьСообщениеОбОшибке(СтруктураСообщения, "Пустой текст запроса");
		Возврат;
	КонецЕсли;

	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстЗапроса);
		СтруктураСообщения.Запрос_Json = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ВставитьСообщениеОбОшибке(СтруктураСообщения, "Ошибка чтения json сообщения:" + Символы.ПС + ТекстЗапроса, ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(СтруктураСообщения.Запрос_Json)<>Тип("Структура") Тогда
		ВставитьСообщениеОбОшибке(СтруктураСообщения, "Пустой текст запроса");
		Возврат;
	КонецЕсли;
	
	RequestStatement = "";
	Если СтруктураСообщения.Запрос_Json.Свойство("RequestStatement", RequestStatement) Тогда
		СтруктураСообщения.ИмяФункции = RequestStatement;
	Иначе 
		ВставитьСообщениеОбОшибке(СтруктураСообщения, "Ошибка чтения типа запроса: RequestStatement" + Символы.ПС + ТекстЗапроса);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьАвторизацию(СтруктураСообщения)
	
	Authentication = "";
	Если СтруктураСообщения.Запрос_Json.Свойство("Authentication",Authentication) Тогда
	Иначе 
		ВставитьСообщениеОбОшибке(СтруктураСообщения, "Не передан запрос авторизации Authentication");
		Возврат;
	КонецЕсли;
	
	//Проверка гуид сессии
	Если СтруктураСообщения.ИмяФункции<>"ping" Тогда
		ГуидСессии = "";
		Если Authentication.Свойство("id", ГуидСессии) Тогда
		Иначе 
			ВставитьСообщениеОбОшибке(СтруктураСообщения, "id сессии не найдена или устарела");
			Возврат;
		КонецЕсли;
		
		ПериодТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ГуидСессии",ГуидСессии);
		Запрос.Текст = "ВЫБРАТЬ
							|	ЖБИ_ПериодСессииОбмена.Период		
							|ИЗ
							|	РегистрСведений.ЖБИ_ПериодСессииОбмена КАК ЖБИ_ПериодСессииОбмена
							|ГДЕ
							|	ЖБИ_ПериодСессииОбмена.ГуидСессии = &ГуидСессии";	
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда 
			ПериодСессии = РезультатЗапроса.Период;
			Если ПериодТекущаяДата>ПериодСессии Тогда
				ВставитьСообщениеОбОшибке(СтруктураСообщения,"id сессии устарела");	
			КонецЕсли;
		Иначе 
			ВставитьСообщениеОбОшибке(СтруктураСообщения,"id сессии не найдена или устарела"); 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Проверка строки подключения	
	СтрокаСоединения = "";
	Если СтруктураСообщения.ИмяФункции = "ping" Тогда
		Если Authentication.Свойство("ConnectionString", СтрокаСоединения) Тогда
		Иначе 
			ВставитьСообщениеОбОшибке(СтруктураСообщения, "Ошибка чтения строки подключения: ConnectionString");
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Пользователь", 		ПараметрыСеанса.Пользователь);
		Запрос.УстановитьПараметр("СтрокаСоединения", 	СтрокаСоединения);
		Запрос.Текст = "ВЫБРАТЬ
							|	СтрокиСоединения.НомерСтроки КАК НомерСтроки
							|ИЗ
							|	Справочник.ЖБИ_ПрофилиНастроекПользователя.СтрокиСоединения КАК СтрокиСоединения
							|ГДЕ
							|	НЕ СтрокиСоединения.Ссылка.ПометкаУдаления
							|	И СтрокиСоединения.Ссылка.Владелец = &Пользователь
							|	И СтрокиСоединения.СтрокаСоединения = &СтрокаСоединения";
		Если Запрос.Выполнить().Пустой() Тогда
			ВставитьСообщениеОбОшибке(СтруктураСообщения,"Не найдена строка соединения в справочнике ""Профиль настроек пользователя"": " + СтрокаСоединения); 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область GetPing

Функция ПолучитьГуидСессииОбмена()
	
	ГуидСессии = "";
	ПериодТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодСессии",НачалоДня(ТекущаяДатаСеанса()));
	Запрос.Текст = "ВЫБРАТЬ
	                |	ЖБИ_ПериодСессииОбмена.Период,
	                |	ЖБИ_ПериодСессииОбмена.ГуидСессии
	                |ИЗ
	                |	РегистрСведений.ЖБИ_ПериодСессииОбмена.СрезПоследних(&ПериодСессии, ) КАК ЖБИ_ПериодСессииОбмена";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	ПериодСессии = Дата(1,1,1);
	Если РезультатЗапроса.Следующий() Тогда 
		ПериодСессии 	= РезультатЗапроса.Период;
		ГуидСессии 		= РезультатЗапроса.ГуидСессии;
	КонецЕсли;
	
	Если ПериодТекущаяДата>ПериодСессии Тогда
		
		//удалим устаревшие данные
		МенеджерЗаписи = РегистрыСведений.ЖБИ_ПериодСессииОбмена.СоздатьМенеджерЗаписи(); 
		МенеджерЗаписи.Период 		= ПериодСессии;
		МенеджерЗаписи.ГуидСессии 	= ГуидСессии;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда 
			МенеджерЗаписи.Удалить();		
		КонецЕсли; 
		
		//добавим новые
		МенеджерЗаписи = РегистрыСведений.ЖБИ_ПериодСессииОбмена.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Период 		= ПериодТекущаяДата;
		МенеджерЗаписи.ГуидСессии 	= Новый УникальныйИдентификатор;
		МенеджерЗаписи.Записать();
		
		ПериодСессии 	= МенеджерЗаписи.Период;
		ГуидСессии 		= МенеджерЗаписи.ГуидСессии;		
	КонецЕсли;
	
	Возврат ГуидСессии;
			
КонецФункции

Процедура GetPing(СтруктураСообщения)
	
	ГуидСесии = ПолучитьГуидСессииОбмена();
	СтруктураСообщения.Результат = ГуидСесии;
	
КонецПроцедуры

#Область GetPriceList 

Функция ЗаполнитьТипСтрокиДляСайта(ЗначениеСвойства)
	
	ТипСтроки = "string";
	ЭтоЧисло  = ЯвляетсяЧислом(ЗначениеСвойства);
	Если ЭтоЧисло Тогда 
		ТипСтроки = "decimal";	
	КонецЕсли;
	
	Возврат ТипСтроки; 
		
КонецФункции

Функция ПолучитьТаблицуGetPriceList()
		
	ТаблицаPriceList = Новый ТаблицаЗначений;
	ТаблицаPriceList.Колонки.Добавить("group",Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	ТаблицаPriceList.Колонки.Добавить("groupid", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТаблицаPriceList.Колонки.Добавить("subgroup1", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	ТаблицаPriceList.Колонки.Добавить("subgroup1_id", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТаблицаPriceList.Колонки.Добавить("subgroup2", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	ТаблицаPriceList.Колонки.Добавить("subgroup2_id", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36)));
	ТаблицаPriceList.Колонки.Добавить("brand", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТаблицаPriceList.Колонки.Добавить("id", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36))); //id товара
	ТаблицаPriceList.Колонки.Добавить("nomercatalog", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТаблицаPriceList.Колонки.Добавить("nomercatalog_forsite", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ТаблицаPriceList.Колонки.Добавить("name", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ТаблицаPriceList.Колонки.Добавить("textname", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500)));
	ТаблицаPriceList.Колонки.Добавить("document", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	ТаблицаPriceList.Колонки.Добавить("datedelivery", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));
	ТаблицаPriceList.Колонки.Добавить("price", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(15)));
	ТаблицаPriceList.Колонки.Добавить("total", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(15)));
	ТаблицаPriceList.Колонки.Добавить("picture", Новый ОписаниеТипов("Строка"));
	
	ТаблицаPriceList.Колонки.Добавить("diameter", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));//свойство диаметр
	ТаблицаPriceList.Колонки.Добавить("length", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));//свойство длина
	ТаблицаPriceList.Колонки.Добавить("thickness", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));//свойство толщина стенки
	ТаблицаPriceList.Колонки.Добавить("weight", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));//свойство вес
	ТаблицаPriceList.Колонки.Добавить("size", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));//свойство объем
	ТаблицаPriceList.Колонки.Добавить("height", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));//свойство высота мм
	ТаблицаPriceList.Колонки.Добавить("width", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25)));//свойство ширина мм
	
	Возврат ТаблицаPriceList;
	
КонецФункции

Функция МожноВыгружатьГруппуНаСайт(Номенклатура, МассивГруппНеВыгружать)
	
	РезультатПроверки = Истина;
	Для Каждого НомСтр Из МассивГруппНеВыгружать Цикл
		Если Номенклатура.ПринадлежитЭлементу(НомСтр) Тогда 
			РезультатПроверки = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ВернутьГруппуТовара(МассивГрупп, Уровень)

	СтруктураГруппы = Новый Структура("group,groupid,visible","","","true");	
	Если МассивГрупп.Количество() = 0 Тогда 
		Возврат СтруктураГруппы;
	ИначеЕсли Уровень = 1
		И МассивГрупп.Количество()>=1 Тогда
		group 					= ?(МассивГрупп[0].group = NULL,"",МассивГрупп[0].group);
		groupid 				= МассивГрупп[0].groupid;
		visible 				= МассивГрупп[0].visible;
		СтруктураГруппы.group 	= group;
		СтруктураГруппы.groupid = groupid;
		СтруктураГруппы.visible = XMLСтрока(visible);
	ИначеЕсли Уровень = 2
		И МассивГрупп.Количество()>=2 Тогда
		group 					= ?(МассивГрупп[1].group = NULL,"",МассивГрупп[1].group);
		groupid 				= МассивГрупп[1].groupid;
		visible 				= МассивГрупп[1].visible;
		СтруктураГруппы.group 	= group;
		СтруктураГруппы.groupid = groupid;
		СтруктураГруппы.visible = XMLСтрока(visible);
	ИначеЕсли Уровень = 3
		И МассивГрупп.Количество()>=3 Тогда
		group 					= ?(МассивГрупп[2].group = NULL,"",МассивГрупп[2].group);
		groupid 				= МассивГрупп[2].groupid;
		visible 				= МассивГрупп[2].visible;
		СтруктураГруппы.group 	= group;
		СтруктураГруппы.groupid = groupid;
		СтруктураГруппы.visible = XMLСтрока(visible);
	КонецЕсли;
	
	Возврат СтруктураГруппы;
	
КонецФункции

Функция ВернутьГруппуТовара_v1(Номенклатура, Уровень)

	СтруктураГруппы = Новый Структура("group,groupid,visible,sorting,group_description,group_description1","","","false",0,"","");	
	Если Уровень = 1 Тогда
		group 					= Номенклатура.Родитель.Наименование;
		groupid 				= ?(group = "","",XMLСтрока(Номенклатура.Родитель));
		visible 				= ?(groupid = "",Ложь,Номенклатура.Родитель.ЖБИ_ВыгружатьНаСайт);
		sorting                 = ?(groupid = "",0,Номенклатура.Родитель.ЖБИ_Порядок);
		group_description       = ?(groupid = "",0,СРЕД(Номенклатура.Родитель.ЖБИ_ОписаниеГруппы,0,2048));
		group_description1      = ?(groupid = "",0,СРЕД(Номенклатура.Родитель.ЖБИ_ОписаниеГруппы1,0,7000));
		СтруктураГруппы.group 	= group;
		СтруктураГруппы.groupid = groupid;
		СтруктураГруппы.visible = XMLСтрока(visible);
		СтруктураГруппы.sorting = XMLСтрока(sorting);
		СтруктураГруппы.group_description  = XMLСтрока(group_description);
		СтруктураГруппы.group_description1 = XMLСтрока(group_description1);
	ИначеЕсли Уровень = 2 Тогда
		group 					= Номенклатура.Родитель.Родитель.Наименование;
		groupid 				= ?(group = "","",XMLСтрока(Номенклатура.Родитель.Родитель));
		visible 				= ?(groupid = "",Ложь,Номенклатура.Родитель.Родитель.ЖБИ_ВыгружатьНаСайт);
		sorting                 = ?(groupid = "",0,Номенклатура.Родитель.Родитель.ЖБИ_Порядок);
		group_description       = ?(groupid = "",0,СРЕД(Номенклатура.Родитель.ЖБИ_ОписаниеГруппы,0,2048));
		group_description1      = ?(groupid = "",0,СРЕД(Номенклатура.Родитель.ЖБИ_ОписаниеГруппы1,0,7000));
		СтруктураГруппы.group 	= group;
		СтруктураГруппы.groupid = groupid;
		СтруктураГруппы.visible = XMLСтрока(visible);
		СтруктураГруппы.sorting = XMLСтрока(sorting);
		СтруктураГруппы.group_description  = XMLСтрока(group_description);
		СтруктураГруппы.group_description1 = XMLСтрока(group_description1);
	ИначеЕсли Уровень = 3 Тогда
		group 					= Номенклатура.Родитель.Родитель.Родитель.Наименование;
		groupid 				= ?(group = "","",XMLСтрока(Номенклатура.Родитель.Родитель.Родитель));
		visible 				= ?(groupid = "",Ложь,Номенклатура.Родитель.Родитель.Родитель.ЖБИ_ВыгружатьНаСайт);
		sorting                 = ?(groupid = "",0,Номенклатура.Родитель.Родитель.Родитель.ЖБИ_Порядок);
		group_description       = ?(groupid = "",0,СРЕД(Номенклатура.Родитель.ЖБИ_ОписаниеГруппы,0,2048));
		group_description1      = ?(groupid = "",0,СРЕД(Номенклатура.Родитель.ЖБИ_ОписаниеГруппы1,0,7000));
		СтруктураГруппы.group 	= group;
		СтруктураГруппы.groupid = groupid;
		СтруктураГруппы.visible = XMLСтрока(visible);
		СтруктураГруппы.sorting = XMLСтрока(sorting);
		СтруктураГруппы.group_description  = XMLСтрока(group_description);
		СтруктураГруппы.group_description1 = XMLСтрока(group_description1);
	КонецЕсли;
	
	Возврат СтруктураГруппы;
	
КонецФункции

Функция ВернутьСтруктуруИерархии(СтруктураГруппы1,СтруктураГруппы2,СтруктураГруппы3)
	
	Свойства = "group,groupid,group_visible,group_sort,group_description,group_description1,
	|subgroup1,subgroup1_id,subgroup1_visible,subgroup1_sort,subgroup1_description,subgroup1_description1,
	|subgroup2,subgroup2_id,subgroup2_visible,subgroup2_sort,subgroup2_description,subgroup2_description2";
	
	СтруктураИерархии = Новый Структура(Свойства,"","","","","","","","","","","","","","","");
	Если НЕ ПустаяСтрока(СтруктураГруппы3.groupid) Тогда 		
		СтруктураИерархии.group 			= СтруктураГруппы3.group;
		СтруктураИерархии.groupid 			= СтруктураГруппы3.groupid;
		СтруктураИерархии.group_visible		= СтруктураГруппы3.visible;
		СтруктураИерархии.group_sort		= СтруктураГруппы3.sorting;
		СтруктураИерархии.group_description	= СтруктураГруппы3.group_description;
		СтруктураИерархии.group_description1= СтруктураГруппы3.group_description1;
		
		СтруктураИерархии.subgroup1 		= СтруктураГруппы2.group;
		СтруктураИерархии.subgroup1_id 		= СтруктураГруппы2.groupid;
		СтруктураИерархии.subgroup1_visible	= СтруктураГруппы2.visible;
		СтруктураИерархии.subgroup1_sort	= СтруктураГруппы2.sorting;
		СтруктураИерархии.subgroup1_description	= СтруктураГруппы2.group_description;
		СтруктураИерархии.subgroup1_description1= СтруктураГруппы2.group_description1;
		
		СтруктураИерархии.subgroup2 		= СтруктураГруппы1.group;
		СтруктураИерархии.subgroup2_id 		= СтруктураГруппы1.groupid;
		СтруктураИерархии.subgroup2_visible	= СтруктураГруппы1.visible;	
		СтруктураИерархии.subgroup2_sort	= СтруктураГруппы1.sorting;
		СтруктураИерархии.subgroup2_description	= СтруктураГруппы1.group_description;
		СтруктураИерархии.subgroup2_description2= СтруктураГруппы1.group_description1;
	ИначеЕсли НЕ ПустаяСтрока(СтруктураГруппы2.groupid) Тогда 		
		СтруктураИерархии.group 			= СтруктураГруппы2.group;
		СтруктураИерархии.groupid 			= СтруктураГруппы2.groupid;
		СтруктураИерархии.group_visible		= СтруктураГруппы2.visible;
		СтруктураИерархии.group_sort		= СтруктураГруппы2.sorting;
		СтруктураИерархии.group_description	= СтруктураГруппы2.group_description;
		СтруктураИерархии.group_description1= СтруктураГруппы2.group_description1;
		
		СтруктураИерархии.subgroup1 		= СтруктураГруппы1.group;
		СтруктураИерархии.subgroup1_id 		= СтруктураГруппы1.groupid;
		СтруктураИерархии.subgroup1_visible	= СтруктураГруппы1.visible;
		СтруктураИерархии.subgroup1_sort	= СтруктураГруппы1.sorting;
		СтруктураИерархии.subgroup1_description	= СтруктураГруппы1.group_description;
		СтруктураИерархии.subgroup1_description1= СтруктураГруппы1.group_description1;
	Иначе
		СтруктураИерархии.group 			= СтруктураГруппы1.group;
		СтруктураИерархии.groupid 			= СтруктураГруппы1.groupid;
		СтруктураИерархии.group_visible		= СтруктураГруппы1.visible;
		СтруктураИерархии.group_sort		= СтруктураГруппы1.sorting;
		СтруктураИерархии.group_description	= СтруктураГруппы1.group_description;
		СтруктураИерархии.group_description1= СтруктураГруппы1.group_description1;
	КонецЕсли;
	
	Возврат СтруктураИерархии;
	
КонецФункции

Функция ВернутьМассивКомплектов(ТаблКомплекты,Номенклатура,ИмяКомплекта)
	
	Массив_id 		= Новый Массив;
	НайденныеСтроки = ТаблКомплекты.НайтиСтроки(Новый Структура("Номенклатура",Номенклатура));
	Для Каждого НомСтр Из НайденныеСтроки Цикл 
		Для Каждого Ном Из НомСтр[ИмяКомплекта] Цикл 
			Массив_id.Добавить(XMLСтрока(Ном));
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Массив_id; 
	
КонецФункции

Функция ОтправитьФайлКаталогаТоваров(ТекстJson, НастройкаДоставки, ИнформацияОбОшибке)
	
	СпособОбмена 		= НастройкаДоставки.СпособОбмена;
	ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла();
	ИмяВременногоФайла	= ИмяВременногоФайла + "_exch_" + Формат(ТекущаяДатаСеанса(), "ДФ=ддММггггmmss") + ".json";
	
	Файл 				= Новый Файл(ИмяВременногоФайла);	
	ИмяТестовогоФайла 	= Файл.Имя;
	
	ТекстДок = Новый ТекстовыйДокумент;
	Попытка
		ТекстДок.ДобавитьСтроку(ТекстJson);
		ТекстДок.Записать(ИмяВременногоФайла);
	Исключение
		ИнформацияОбОшибке = "Ошибка при записи json файла:
			|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());		
		Возврат Ложь;
	КонецПопытки;
	
	Если СпособОбмена = Перечисления.ЖБИ_СпособОбмена.FTP Тогда //FTP		
		Попытка
			FTP = Новый FTPСоединение(НастройкаДоставки.FTPСервер, НастройкаДоставки.FTPПорт,
				НастройкаДоставки.FTPЛогин, НастройкаДоставки.Пароль,, НастройкаДоставки.FTPПассивноеСоединение);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Если Найти(ВРег(ТекстОшибки),ВРег("couldn't connect to server")) Тогда
				ТекстОшибки = " на указанном сервере не запущен FTP-сервер";
			ИначеЕсли Найти(ВРег(ТекстОшибки),ВРег("couldn't resolve host name")) Тогда 	
				ТекстОшибки = " указанный сервер не доступен";
			КонецЕсли;
			ИнформацияОбОшибке = "Ошибка подключения к FTP серверу <ftp://" + НастройкаДоставки.FTPСервер + ">: " + ТекстОшибки;
			Возврат Ложь;
		КонецПопытки;
		
		ПолноеИмяТестовогоФайлаПриемник = ?(Прав(НастройкаДоставки.FTPКаталог,1)="/",
		НастройкаДоставки.FTPКаталог,НастройкаДоставки.FTPКаталог + "/") + ИмяВременногоФайла;
		Попытка
			FTP.Записать(ИмяВременногоФайла, ИмяТестовогоФайла);
		Исключение
			ИнформацияОбОшибке = "Ошибка при попытке записи файла json на сервере FTP:
			|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
		
		// Удаляем локальный тестовый файл
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			стрОшибки = стрОшибки + "Ошибка при удалении тестового файла:
			|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
		
	Возврат Истина;
		
КонецФункции

Функция ОтправитьКартинкиТоваров(МассивНоменклатуры, НастройкаДоставки, СтруктураСообщения, ИнформацияОбОшибке)
	
	ТаблицаОшибок 	= Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Номенклатура");
	ТаблицаОшибок.Колонки.Добавить("Артикул");
	
	Запрос 			= Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.Текст 	= "ВЫБРАТЬ
				        |    НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка,
						|	 НоменклатураПрисоединенныеФайлы.ВладелецФайла КАК ВладелецФайла
				        |ИЗ
				        |    Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
						|ГДЕ
						|	НоменклатураПрисоединенныеФайлы.ВладелецФайла В (&МассивНоменклатуры)";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
	
	СпособОбмена 		= НастройкаДоставки.СпособОбмена;	
	Если СпособОбмена = Перечисления.ЖБИ_СпособОбмена.FTP Тогда //FTP		
		Попытка
			FTP = Новый FTPСоединение(НастройкаДоставки.FTPСервер, НастройкаДоставки.FTPПорт,
				НастройкаДоставки.FTPЛогин, НастройкаДоставки.Пароль,, НастройкаДоставки.FTPПассивноеСоединение);
		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Если Найти(ВРег(ТекстОшибки),ВРег("couldn't connect to server")) Тогда
				ТекстОшибки = " на указанном сервере не запущен FTP-сервер";
			ИначеЕсли Найти(ВРег(ТекстОшибки),ВРег("couldn't resolve host name")) Тогда 	
				ТекстОшибки = " указанный сервер не доступен";
			КонецЕсли;
			ИнформацияОбОшибке = "Ошибка подключения к FTP серверу <ftp://" + НастройкаДоставки.FTPСервер + ">: " + ТекстОшибки;
			Возврат Ложь;
		КонецПопытки;
		
		Для Каждого НомСтр Из РезультатЗапроса Цикл
			Попытка
				ДанныеКартинки 		= РаботаСФайлами.ДвоичныеДанныеФайла(НомСтр.Ссылка);
			Исключение
				Продолжить;
			КонецПопытки;			
			ИмяВременногоФайла 	= ПолучитьИмяВременногоФайла("jpg");
			ФайлФТП 			= НомСтр.ВладелецФайла.Артикул + ".jpg";
			ДанныеКартинки.Записать(ИмяВременногоФайла);
			Попытка
				FTP.Записать(ИмяВременногоФайла, ФайлФТП);
			Исключение
				ИнформацияОбОшибке = "Ошибка при попытке записи файла картинки jpg на сервере FTP:
				|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				УдалитьФайлы(ИмяВременногоФайла);
				
				НоваяСтр 				= ТаблицаОшибок.Добавить();
				НоваяСтр.Номенклатура 	= НомСтр.ВладелецФайла;
				НоваяСтр.Артикул 		= НомСтр.ВладелецФайла.Артикул;
				
				Продолжить;
			КонецПопытки;
			Попытка
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение
				стрОшибки = стрОшибки + "Ошибка при удалении временного файла:
				|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;		
	КонецЕсли;
	
	Если ТаблицаОшибок.Количество()>0 Тогда
		МассивПрайслист = СтруктураСообщения.Результат.priceList[0];
		ИндексПоследнего = МассивПрайслист.Количество() - 1;
		Для Индекс = 0 По ИндексПоследнего Цикл
			Артикул = МассивПрайслист[ИндексПоследнего - Индекс].nomercatalog;
			Если ПустаяСтрока(Артикул) Тогда  
				Продолжить;	
			КонецЕсли;
			НайденнаяСтр = ТаблицаОшибок.Найти(Артикул);
			Если НайденнаяСтр <> Неопределено Тогда //удалим из выгрузки артикул
				МассивПрайслист.Удалить(ИндексПоследнего - Индекс);				
				НайденнаяСтрМассив = МассивНоменклатуры.Найти(НайденнаяСтр.Номенклатура);
				Если НайденнаяСтрМассив <> Неопределено Тогда //не будем снимать с регистрации товар
					МассивНоменклатуры.Удалить(НайденнаяСтрМассив);		
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		СтруктураСообщения.Результат.priceList[0] = МассивПрайслист;
	КонецЕсли;
		
	Возврат Истина;
		
КонецФункции

Функция ПолучитьТаблицуДоступныхСвойств(ПолныйСписок = Ложь) Экспорт
	
	ТаблцаСвойств = Новый ТаблицаЗначений;
	ТаблцаСвойств.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	//ТаблцаСвойств.Колонки.Добавить("Свойство", Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(128)));
	ТаблцаСвойств.Колонки.Добавить("Свойство",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("ЗначениеСвойства", Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	
	//ТаблцаСвойств.Колонки.Добавить("СвойствоДиаметр",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоДлина",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоТолщинаСтенки",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоВес",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоОбъём",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоВысотаМм",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоШиринаМм",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//
	//ТаблцаСвойств.Колонки.Добавить("СвойствоПоверхностнаяПлотность",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоПлотностьНаРазрыв",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоРазрывнаяПрочность",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоПлотностьНаРазрывПродПопереч",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоРазрывнаяНагрузкаПоДлине",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоРазрывнаяНагрузкаПоШирине",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоРазмерЯчейки",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоВысотаРебраМодуля",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоШиринаРебраМодуля",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоДлинаРебраМодуля",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоПлощадьМодуляРазвернутомВиде",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоДиаметрВерхний",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоДиаметрНижний",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));	
	//ТаблцаСвойств.Колонки.Добавить("СвойствоДиаметрВходногоОтверcтия",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоДиаметрВыходногоОтверстия",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));	
	//ТаблцаСвойств.Колонки.Добавить("СвойствоОтверстие",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоСечение",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоТолщинаМеталла",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоГофр",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоПокрытие",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоТолщинаМембраны",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоШиринаРулона",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоНамоткаРулона",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоПлощадьРулона",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоДлинаМП",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоВесРулона",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//ТаблцаСвойств.Колонки.Добавить("СвойствоВесМодуля",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	
	//Если ПолныйСписок Тогда		
	//	ТаблцаСвойств.Колонки.Добавить("СвойствоТип",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//	ТаблцаСвойств.Колонки.Добавить("СвойствоТорговаяМарка",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//	ТаблцаСвойств.Колонки.Добавить("СвойствоНормативныйДокумент",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//	ТаблцаСвойств.Колонки.Добавить("СвойствоСпособИзготовления",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//	ТаблцаСвойств.Колонки.Добавить("СвойствоСырье",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	//	
	//	
	//	ТаблцаСвойств.Колонки.Добавить("ЗначениеТип",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//	ТаблцаСвойств.Колонки.Добавить("ЗначениеТорговаяМарка",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//	ТаблцаСвойств.Колонки.Добавить("ЗначениеНормативныйДокумент",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//	ТаблцаСвойств.Колонки.Добавить("ЗначениеСпособИзготовления",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//	ТаблцаСвойств.Колонки.Добавить("ЗначениеСырье",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//КонецЕсли;
	
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеДиаметр",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеДлина",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеТолщинаСтенки",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеВес",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеОбъём",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеВысотаМм",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеШиринаМм",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеПоверхностнаяПлотность",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеПлотностьНаРазрыв",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеРазрывнаяПрочность",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеПлотностьНаРазрывПродПопереч",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеРазрывнаяНагрузкаПоДлине",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеРазрывнаяНагрузкаПоШирине",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));;
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеРазмерЯчейки",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеВысотаРебраМодуля",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеШиринаРебраМодуля",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеДлинаРебраМодуля",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеПлощадьМодуляРазвернутомВиде",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеДиаметрВерхний",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеДиаметрНижний",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));	
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеДиаметрВходногоОтверcтия",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеДиаметрВыходногоОтверстия",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));	
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеОтверстие",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеСечение",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеТолщинаМеталла",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеГофр",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеПокрытие",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеТолщинаМембраны",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеШиринаРулона",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеНамоткаРулона",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеПлощадьРулона",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеДлинаМП",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеВесРулона",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	//ТаблцаСвойств.Колонки.Добавить("ЗначениеВесМодуля",Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	
	Возврат ТаблцаСвойств;
	
КонецФункции

Функция ПолучитьТаблицуДоступныхСвойствБезОписания() Экспорт
	
	ТаблцаСвойств = Новый ТаблицаЗначений;
	ТаблцаСвойств.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблцаСвойств.Колонки.Добавить("СтруктураСвойствНоменклатуры");
	ТаблцаСвойств.Колонки.Добавить("СвойствоДиаметр",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоДлина",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоТолщинаСтенки",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоВес",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоОбъём",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоВысотаМм",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоШиринаМм",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	
	ТаблцаСвойств.Колонки.Добавить("СвойствоПоверхностнаяПлотность",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоПлотностьНаРазрыв",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоРазрывнаяПрочность",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоПлотностьНаРазрывПродПопереч",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоРазрывнаяНагрузкаПоДлине",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоРазрывнаяНагрузкаПоШирине",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоРазмерЯчейки",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоВысотаРебраМодуля",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоШиринаРебраМодуля",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоДлинаРебраМодуля",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоПлощадьМодуляРазвернутомВиде",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоДиаметрВерхний",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоДиаметрНижний",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));	
	ТаблцаСвойств.Колонки.Добавить("СвойствоДиаметрВходногоОтверcтия",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоДиаметрВыходногоОтверстия",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоОтверстие",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоСечение",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоТолщинаМеталла",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоГофр",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоПокрытие",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоТолщинаМембраны",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоШиринаРулона",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоНамоткаРулона",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоПлощадьРулона",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоДлинаМП",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоВесРулона",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоВесМодуля",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		
	ТаблцаСвойств.Колонки.Добавить("СвойствоТип",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоТорговаяМарка",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоНормативныйДокумент",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоСпособИзготовления",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоСырье",Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
		
		
	ТаблцаСвойств.Колонки.Добавить("ЗначениеТип");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеТорговаяМарка");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеНормативныйДокумент");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеСпособИзготовления");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеСырье");
	
	ТаблцаСвойств.Колонки.Добавить("ЗначениеДиаметр");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеДлина");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеТолщинаСтенки");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеВес");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеОбъём");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеВысотаМм");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеШиринаМм");
	
	ТаблцаСвойств.Колонки.Добавить("ЗначениеПоверхностнаяПлотность");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеПлотностьНаРазрыв");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеРазрывнаяПрочность");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеПлотностьНаРазрывПродПопереч");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеРазрывнаяНагрузкаПоДлине");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеРазрывнаяНагрузкаПоШирине");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеРазмерЯчейки");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеВысотаРебраМодуля");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеШиринаРебраМодуля");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеДлинаРебраМодуля");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеПлощадьМодуляРазвернутомВиде");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеДиаметрВерхний");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеДиаметрНижний");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеДиаметрВходногоОтверcтия");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеДиаметрВыходногоОтверстия");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеОтверстие");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеСечение");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеТолщинаМеталла");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеГофр");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеПокрытие");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеТолщинаМембраны");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеШиринаРулона");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеНамоткаРулона");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеПлощадьРулона");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеДлинаМП");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеВесРулона");
	ТаблцаСвойств.Колонки.Добавить("ЗначениеВесМодуля");
	
	Возврат ТаблцаСвойств;
	
КонецФункции

Функция ПолучитьТаблицуХарактеристикНоменклатуры() Экспорт
	
	ТаблцаСвойств = Новый ДеревоЗначений;
	ТаблцаСвойств.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблцаСвойств.Колонки.Добавить("СтруктураСвойствНоменклатуры");
	ТаблцаСвойств.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	ТаблцаСвойств.Колонки.Добавить("СвойствоНаименование", Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(128)));
	ТаблцаСвойств.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	
	Возврат ТаблцаСвойств;
	
КонецФункции

Функция ЗаполнитьНаценкиПоРегионам()
	
	ТаблицаНаценок	 = Новый ТаблицаЗначений;
	ТаблицаНаценок.Колонки.Добавить("КодРегиона");
	ТаблицаНаценок.Колонки.Добавить("Наценка");
	
	Запрос 			= Новый Запрос;
	Запрос.Текст 	= "ВЫБРАТЬ
	             	  |	ЖБИ_НастройкаЦеннобразованияПоРегионам.Регион.КодРегиона КАК КодРегиона,
	             	  |	ЖБИ_НастройкаЦеннобразованияПоРегионам.Наценка КАК Наценка
	             	  |ИЗ
	             	  |	РегистрСведений.ЖБИ_НастройкаЦеннобразованияПоРегионам КАК ЖБИ_НастройкаЦеннобразованияПоРегионам";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл 
		НоваяСтр = ТаблицаНаценок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,РезультатЗапроса);
	КонецЦикла;
	
	Возврат ТаблицаНаценок;
	
КонецФункции

Функция ВернутьТаблицуСвойствДляНоменклатуры(Номенклатура)
	
	НаборСвойств = Номенклатура.ВидНоменклатуры.НаборСвойств;
	
	Запрос 		 = Новый Запрос;
	Запрос.УстановитьПараметр("НаборОбщихСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура_Общие);
	Запрос.УстановитьПараметр("НаборСвойств", НаборСвойств);
	Запрос.Текст = "ВЫБРАТЬ
					|	ДопРеквизитыСведения.Свойство КАК Свойство,
					|	ДопРеквизитыСведения.Свойство.Наименование КАК СвойствоНаименование
					|ИЗ
					|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ДопРеквизитыСведения
					|ГДЕ
					|	ДопРеквизитыСведения.Ссылка = &НаборСвойств
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ОбщиеДопРеквизитыСведения.Свойство,
					|	ОбщиеДопРеквизитыСведения.Свойство.Наименование
					|ИЗ
					|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ОбщиеДопРеквизитыСведения
					|ГДЕ
					|	ОбщиеДопРеквизитыСведения.Ссылка = &НаборОбщихСвойств";
	РезультатТаблицаСвойств = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатТаблицаСвойств;
	
КонецФункции

Процедура GetPriceList(СтруктураСообщения, Узел, УсловияОтбора = Неопределено) Экспорт 	
	
	НастройкаДоставки 	= Узел.НастройкаДоставки;	
	ПроцентНаценки 		= 22;
	
	ТаблцаСвойств 		= ПолучитьТаблицуДоступныхСвойств();
	
	//1 общий запрос по свойствам и номенклатуре
	Запрос = Новый Запрос;	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Узел",Узел);
	Запрос.Текст = "ВЫБРАТЬ
	               |	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	               |	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	               |	НоменклатураДополнительныеРеквизиты.Свойство.Имя КАК ИмяСвойства,
				   |	НоменклатураДополнительныеРеквизиты.Свойство.Наименование КАК НаименованиеСвойство,
	               |	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
	               |ИЗ
	               |	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	               |		ПО НоменклатураИзменения.Ссылка = НоменклатураДополнительныеРеквизиты.Ссылка
	               |ГДЕ
	               |	НЕ НоменклатураДополнительныеРеквизиты.Ссылка.ПометкаУдаления
	               //|	И НоменклатураДополнительныеРеквизиты.Свойство.Имя <> ""НормативныйДокумент""
	               //|	И НоменклатураДополнительныеРеквизиты.Ссылка.ЖБИ_ВыгружатьНаСайт
	               |	И НоменклатураИзменения.Узел = &Узел
	               |ИТОГИ ПО
	               |	Номенклатура";	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВыборкаДетали = Выборка.Выбрать();
		РезультатТаблицаСвойств = ВернутьТаблицуСвойствДляНоменклатуры(Выборка.Номенклатура);
		Для Каждого НомСтр Из РезультатТаблицаСвойств Цикл  
			НоваяСтр = ТаблцаСвойств.Добавить();
			НоваяСтр.Номенклатура 		= Выборка.Номенклатура;
			НоваяСтр.Свойство 	  		= НомСтр.Свойство;
			НоваяСтр.ЗначениеСвойства 	= "";	
		КонецЦикла;
		Пока ВыборкаДетали.Следующий() Цикл
			НайденныеСтроки = ТаблцаСвойств.НайтиСтроки(Новый Структура("Номенклатура,Свойство",Выборка.Номенклатура,ВыборкаДетали.Свойство));
			Для Каждого Ном Из НайденныеСтроки Цикл 
				Ном.ЗначениеСвойства = ВыборкаДетали.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//Удалим пустые строки
	ИндексПоследнего = ТаблцаСвойств.Количество() - 1;
	Для Индекс = 0 По ИндексПоследнего Цикл
		Если НЕ ЗначениеЗаполнено(ТаблцаСвойств[ИндексПоследнего - Индекс].Номенклатура) Тогда  
			ТаблцаСвойств.Удалить(ИндексПоследнего - Индекс);	
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПроцентНаценки",ПроцентНаценки);
	Запрос.УстановитьПараметр("Табл",ТаблцаСвойств);
	Запрос.Текст = "//Таблица с номенклатурой и свойствами
					|ВЫБРАТЬ
					|	Табл.Номенклатура КАК Номенклатура,
					|	Табл.Свойство КАК Свойство,
					|	Табл.ЗначениеСвойства КАК ЗначениеСвойства
					|ПОМЕСТИТЬ ТаблСвойстваТоваров
					|ИЗ
					|	&Табл КАК Табл
					|;
					|ВЫБРАТЬ
					|	ТаблСвойстваТоваров.Номенклатура КАК Номенклатура,
					|	ТаблСвойстваТоваров.Свойство КАК Свойство,
					|	ТаблСвойстваТоваров.ЗначениеСвойства КАК ЗначениеСвойства
					|ИЗ
					|	ТаблСвойстваТоваров КАК ТаблСвойстваТоваров
					|ГДЕ
					|	ТаблСвойстваТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";		
	РезультатЗапроса = Запрос.Выполнить();
	
	//2 запрос по комплектам
	ТаблКомплекты = Новый ТаблицаЗначений;
	ТаблКомплекты.Колонки.Добавить("Номенклатура");
	ТаблКомплекты.Колонки.Добавить("МассивКомплект");
	Запрос.Текст = "//Запрос по комплектациям
					|ВЫБРАТЬ
					|	ТаблСвойстваТоваров.Номенклатура КАК Номенклатура,
					|	ЕСТЬNULL(Комплектующие.Комплект, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Комплект
					|ИЗ
					|	ТаблСвойстваТоваров КАК ТаблСвойстваТоваров
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖБИ_Комплектующие КАК Комплектующие
					|		ПО ТаблСвойстваТоваров.Номенклатура = Комплектующие.Номенклатура
					|ИТОГИ ПО
					|	ТаблСвойстваТоваров.Номенклатура";
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		МассивКомплект 			= Новый Массив;
		НоваяСтр 				= ТаблКомплекты.Добавить();
		НоваяСтр.Номенклатура 	= ВыборкаНоменклатура.Номенклатура;
		ВыборкаДетали 			= ВыборкаНоменклатура.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			МассивКомплект.Добавить(ВыборкаДетали.Комплект);	
		КонецЦикла;
		НоваяСтр.МассивКомплект = МассивКомплект;
	КонецЦикла;
	
	//3 запрос по аналогам
	ТаблАналоги = Новый ТаблицаЗначений;
	ТаблАналоги.Колонки.Добавить("Номенклатура");
	ТаблАналоги.Колонки.Добавить("МассивАналоги");	
	//Запрос.Текст = "//Запрос по аналогам
	//				|ВЫБРАТЬ
	//				|	ТаблСвойстваТоваров.Номенклатура КАК Номенклатура,
	//				|	ЕСТЬNULL(ТаблСвойстваТоваровАналоги.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Аналог	
	//				|ИЗ
	//				|	ТаблСвойстваТоваров КАК ТаблСвойстваТоваров
	//				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблСвойстваТоваров КАК ТаблСвойстваТоваровАналоги
	//				|		ПО ТаблСвойстваТоваров.Свойство = ТаблСвойстваТоваровАналоги.Свойство
	//				|		И  ТаблСвойстваТоваров.ЗначениеСвойства = ТаблСвойстваТоваровАналоги.ЗначениеСвойства
	//				|		И  ТаблСвойстваТоваров.Номенклатура <> ТаблСвойстваТоваровАналоги.Номенклатура			
	//				|ИТОГИ ПО
	//				|	ТаблСвойстваТоваров.Номенклатура";
	//ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока ВыборкаНоменклатура.Следующий() Цикл 
	//	МассивАналоги 			= Новый Массив;
	//	НоваяСтр 				= ТаблАналоги.Добавить();
	//	НоваяСтр.Номенклатура 	= ВыборкаНоменклатура.Номенклатура;
	//	ВыборкаДетали 			= ВыборкаНоменклатура.Выбрать();
	//	Пока ВыборкаДетали.Следующий() Цикл
	//		МассивАналоги.Добавить(ВыборкаДетали.Аналог);	
	//	КонецЦикла;
	//	НоваяСтр.МассивАналоги = МассивАналоги;
	//КонецЦикла;
	
	//4 запрос по номенклатуре и ценам
	Запрос.Текст = "//Удалим пустую номенклатуру
					|ВЫБРАТЬ
					|	ТаблСвойстваТоваров.Номенклатура КАК Номенклатура,
					|	ТаблСвойстваТоваров.Номенклатура.НаименованиеПолное КАК Наименование,
					|	ТаблСвойстваТоваров.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмерения,
					|	ЕСТЬNULL(ТаблСвойстваТоваров.Номенклатура.Производитель.Наименование,"""") КАК Производитель,
					|	ТаблСвойстваТоваров.Номенклатура.ЖБИ_АртикулДляСайта КАК АртикулДляСайта,
					|	ТаблСвойстваТоваров.Номенклатура.ЖБИ_ЕстьСертификатТаможенногоСоюза КАК ЕстьСертификатТаможенногоСоюза,
					|	ТаблСвойстваТоваров.Номенклатура.ЖБИ_ЕстьНаСкладе КАК ЕстьНаСкладе,
					|	ТаблСвойстваТоваров.Номенклатура.Артикул КАК Артикул,
					|	ТаблСвойстваТоваров.Номенклатура.ЖБИ_ДатаИзменения КАК ДатаИзменения,
					|	ТаблСвойстваТоваров.Номенклатура.Описание КАК Описание,
					|
					|	ТаблСвойстваТоваров.Свойство КАК Свойство,	
					|	ТаблСвойстваТоваров.ЗначениеСвойства КАК ЗначениеСвойства
					|ПОМЕСТИТЬ ТаблНоменклатура
					|ИЗ
					|	ТаблСвойстваТоваров КАК ТаблСвойстваТоваров
					|ГДЕ
					|	ТаблСвойстваТоваров.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
					|;
					|	
					|//Общий запрос по товарам
					|ВЫБРАТЬ
					|	ТаблНоменклатура.Номенклатура КАК Номенклатура,
					|	ТаблНоменклатура.Наименование КАК Наименование,
					|	ТаблНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
					|	ТаблНоменклатура.Производитель КАК Производитель,
					|	ТаблНоменклатура.Артикул КАК Артикул,
					|	ТаблНоменклатура.АртикулДляСайта КАК АртикулДляСайта,
					|	ТаблНоменклатура.ЕстьСертификатТаможенногоСоюза КАК ЕстьСертификатТаможенногоСоюза,
					|	ТаблНоменклатура.ЕстьНаСкладе КАК ЕстьНаСкладе,
					|	ТаблНоменклатура.ДатаИзменения КАК ДатаИзменения,
					|	ТаблНоменклатура.Описание КАК Описание,
					|
					|	ТаблНоменклатура.Свойство КАК Свойство,	
					|	ТаблНоменклатура.ЗначениеСвойства КАК ЗначениеСвойства,
					|
					|	ДАТАВРЕМЯ(1,1,1) КАК ДатаПоставки,
					|	ЕСТЬNULL(МИНИМУМ(ЖБИ_СкидкиПоставщика.ПроцентСкидки),0) КАК Скидка,
					|	&ПроцентНаценки КАК ПроцентНаценки,
					|	ЕСТЬNULL(МИНИМУМ(ЖБИ_ПрайслистПоставщикаСрезПоследних.Цена), 0) КАК ЦенаЗакупки,
					|	0 КАК ОстаткоНаСкладе
					|ПОМЕСТИТЬ ТаблИтоги	
					|ИЗ
					|	ТаблНоменклатура КАК ТаблНоменклатура
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖБИ_СкидкиПоставщика КАК ЖБИ_СкидкиПоставщика
					|		ПО ТаблНоменклатура.Номенклатура = ЖБИ_СкидкиПоставщика.НоменклатураПоставщика.Номенклатура
					|		И ЖБИ_СкидкиПоставщика.ПроцентСкидки>0
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖБИ_ПрайслистПоставщика.СрезПоследних(, ) КАК ЖБИ_ПрайслистПоставщикаСрезПоследних
					|		ПО ТаблНоменклатура.Номенклатура = ЖБИ_ПрайслистПоставщикаСрезПоследних.НоменклатураПоставщика.Номенклатура
					|		И ЖБИ_ПрайслистПоставщикаСрезПоследних.Цена>0
					|СГРУППИРОВАТЬ ПО
					|	ТаблНоменклатура.Номенклатура,
					|	ТаблНоменклатура.Наименование,
					|	ТаблНоменклатура.ЕдиницаИзмерения,
					|	ТаблНоменклатура.Производитель,
					|	ТаблНоменклатура.Артикул,
					|	ТаблНоменклатура.АртикулДляСайта,
					|	ТаблНоменклатура.ЕстьСертификатТаможенногоСоюза,
					|	ТаблНоменклатура.ЕстьНаСкладе,
					|	ТаблНоменклатура.ДатаИзменения,
					|	ТаблНоменклатура.Описание,
					|
					|	ТаблНоменклатура.Свойство,	
					|	ТаблНоменклатура.ЗначениеСвойства
					|;
					|
					|ВЫБРАТЬ
					|	ТаблИтоги.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
					|	ТаблИтоги.Номенклатура.ЖБИ_ВыгружатьНаСайт КАК ВыгружатьНаСайт,
					|	ТаблИтоги.Номенклатура КАК Номенклатура,
					|	ТаблИтоги.Наименование КАК Наименование,
					|	ТаблИтоги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
					|	ТаблИтоги.Производитель КАК Производитель,
					|	ТаблИтоги.Артикул КАК Артикул,
					|	ТаблИтоги.АртикулДляСайта КАК АртикулДляСайта,
					|	ТаблИтоги.ЕстьСертификатТаможенногоСоюза КАК ЕстьСертификатТаможенногоСоюза,
					|	ТаблИтоги.ЕстьНаСкладе КАК ЕстьНаСкладе,
					|	ТаблИтоги.ДатаИзменения КАК ДатаИзменения,
					|	ТаблИтоги.Описание КАК Описание,
					|	
					|	ТаблИтоги.Свойство КАК Свойство,	
					|	ТаблИтоги.ЗначениеСвойства.Наименование КАК ЗначениеСвойства,
					|
					|	ТаблИтоги.ДатаПоставки КАК ДатаПоставки,
					|	(ТаблИтоги.ЦенаЗакупки - ТаблИтоги.ЦенаЗакупки * ТаблИтоги.Скидка/100) + ТаблИтоги.ЦенаЗакупки * ТаблИтоги.ПроцентНаценки/100 КАК ЦенаПрайсаСНДС,
					|	ТаблИтоги.ОстаткоНаСкладе
					|ИЗ
					|	ТаблИтоги КАК ТаблИтоги	
					|ИТОГИ ПО
					|	ТаблИтоги.Номенклатура ТОЛЬКО ИЕРАРХИЯ,
					|	ТаблИтоги.Номенклатура";
	
	ДанныеРезультат 		= Новый Структура("priceList", Новый Массив);
	МассивПрайслист 		= Новый Массив;
	//СвойстваКаталога 		= "group,groupid,group_visible,group_sort,group_description,group_description1,subgroup1,subgroup1_id,subgroup1_visible,subgroup1_sort,subgroup1_description,subgroup1_description1,subgroup2,subgroup2_id,subgroup2_visible,subgroup2_sort,subgroup2_description,subgroup2_description2,
	//						  |id,visible,datachange,brand,nomercatalog,nomercatalog_forsite,havecertificate,instock,name,description,unit,
	//						  |trademark,document,preparationMethod,raw,properties,datedelivery,price,total,picture,accessories,analogs";
	
	СвойстваКаталога 		= "group,groupid,group_visible,group_sort,group_description,group_description1,subgroup1,subgroup1_id,subgroup1_visible,subgroup1_sort,subgroup1_description,subgroup1_description1,subgroup2,subgroup2_id,subgroup2_visible,subgroup2_sort,subgroup2_description,subgroup2_description2,
							  |id,visible,datachange,brand,nomercatalog,nomercatalog_forsite,havecertificate,instock,name,description,unit,
							  |properties,datedelivery,price,total,picture,accessories,analogs";

	
	//СвойстваТовары 			= "diameter,length,thickness,weight,size,height,width,
	//						  |surfaceDensity,breakDensity,breakingStrength,breakingDensityProdCross,breakingLoadLength,breakingLoadWidth,cellSize,
	//						  |modulusRibHeight,modulusRibWidth,modulusRibLength,moduleAreaUnfolded,diameterUpper,diameterBottom,inletDiameter,outletDiameter,hole,crossSection,
	//						  |metalThickness,gofr,coating,membraneThickness,rollWidth,rollWinding,rollSquare,lengthMP,rollWeight,moduleWeight";
	СвойстваТовары			= "property,value,type";
	СвойстваКомплекты		= "id";
	СвойстваАналоги			= "id";
	СвойстваЦена 			= "region_id,price";
	МассивЗарегистрированныхОбъектов = Новый Массив;
	
	ТаблицаНаценок 			= ЗаполнитьНаценкиПоРегионам();
	
	ВыборкаИерархия = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИерархия.Следующий() Цикл 
		ВыборкаГруппировкаНоменклатуры 	= ВыборкаИерархия.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГруппировкаНоменклатуры.Следующий() Цикл
			МассивСвойств 	= Новый Массив;
			ВыборкаДетали = ВыборкаГруппировкаНоменклатуры.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл 
				
				Номенклатура = ВыборкаДетали.Номенклатура;	
				
				id 					= XMLСтрока(Номенклатура);
				visible 			= XMLСтрока(ВыборкаДетали.ВыгружатьНаСайт);
				datachange          = XMLСтрока(ВыборкаДетали.ДатаИзменения);
				brand				= XMLСтрока(ВыборкаДетали.Производитель);
				nomercatalog		= XMLСтрока(ВыборкаДетали.Артикул);
				nomercatalog_forsite= XMLСтрока(ВыборкаДетали.АртикулДляСайта);
				havecertificate     = ?(XMLСтрока(ВыборкаДетали.ЕстьСертификатТаможенногоСоюза) = "true",1,0);
				instock             = ?(XMLСтрока(ВыборкаДетали.ЕстьНаСкладе) = "true",1,0);
				name				= XMLСтрока(ВыборкаДетали.Наименование);
				description			= XMLСтрока(ВыборкаДетали.Описание);
				unit				= XMLСтрока(ВыборкаДетали.ЕдиницаИзмерения);
				//trademark			= XMLСтрока(ВыборкаДетали.ТорговаяМарка.Наименование);
				//document			= XMLСтрока(ВыборкаДетали.НормативныйДокумент.Наименование);
				//preparationMethod	= XMLСтрока(ВыборкаДетали.СпособИзготовления.Наименование);
				//raw				= XMLСтрока(ВыборкаДетали.Сырье.Наименование);
				datedelivery		= XMLСтрока(ВыборкаДетали.ДатаПоставки);
				total				= XMLСтрока(ВыборкаДетали.ОстаткоНаСкладе);
				picture				= "";
				
				Если ВыборкаДетали.ЗначениеСвойства = NULL Тогда 
					ЗначениеСвойства = "";
				Иначе 
					ЗначениеСвойства = ВыборкаДетали.ЗначениеСвойства;
				КонецЕсли;
				МассивСвойств.Добавить(Новый Структура(СвойстваТовары,
									XMLСтрока(ВыборкаДетали.Свойство.Заголовок),				
									XMLСтрока(ЗначениеСвойства),
									XMLСтрока(ЗаполнитьТипСтрокиДляСайта(ЗначениеСвойства))));
			КонецЦикла;
			
			Если Номенклатура = Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			МассивЗарегистрированныхОбъектов.Добавить(Номенклатура);
			
			СтруктураГруппы1	= ВернутьГруппуТовара_v1(Номенклатура,1);
			СтруктураГруппы2	= ВернутьГруппуТовара_v1(Номенклатура,2);
			СтруктураГруппы3	= ВернутьГруппуТовара_v1(Номенклатура,3);
			СтруктураИерархии	= ВернутьСтруктуруИерархии(СтруктураГруппы1,СтруктураГруппы2,СтруктураГруппы3);
												
			//price				= XMLСтрока(ВыборкаДетали.ЦенаПрайсаСНДС);
			МассивЦен			= Новый Массив;
			Для Каждого НомСтрНаценка Из ТаблицаНаценок Цикл 
				Если НомСтрНаценка.Наценка > 0 
					И ВыборкаДетали.ЦенаПрайсаСНДС <> Неопределено Тогда 
					Цена = XMLСтрока(ВыборкаДетали.ЦенаПрайсаСНДС + (ВыборкаДетали.ЦенаПрайсаСНДС/100)*НомСтрНаценка.Наценка);
				Иначе 
					Цена = XMLСтрока(ВыборкаДетали.ЦенаПрайсаСНДС);
				КонецЕсли;
				МассивЦен.Добавить(Новый Структура(СвойстваЦена,НомСтрНаценка.КодРегиона,Цена));
			КонецЦикла;
									
			МассивКомплектов	= ВернутьМассивКомплектов(ТаблКомплекты,Номенклатура,"МассивКомплект");
			МассивКомплектов_id = Новый Массив;
			Для Каждого Ном Из МассивКомплектов Цикл
				МассивКомплектов_id.Добавить(Новый Структура(СвойстваКомплекты,Ном));				
			КонецЦикла;
			
			МассивАналогов		= ВернутьМассивКомплектов(ТаблАналоги,Номенклатура,"МассивАналоги");
			МассивАналогов_id 	= Новый Массив;
			Для Каждого Ном Из МассивАналогов Цикл
				МассивАналогов_id.Добавить(Новый Структура(СвойстваАналоги,Ном));				
			КонецЦикла;
							  
			МассивПрайслист.Добавить(Новый Структура(СвойстваКаталога,
									СтруктураИерархии.group,              
									СтруктураИерархии.groupid,
									СтруктураИерархии.group_visible,
									СтруктураИерархии.group_sort,
									СтруктураИерархии.group_description,
									СтруктураИерархии.group_description1,
									СтруктураИерархии.subgroup1,
									СтруктураИерархии.subgroup1_id,
									СтруктураИерархии.subgroup1_visible,
									СтруктураИерархии.subgroup1_sort,
									СтруктураИерархии.subgroup1_description,
									СтруктураИерархии.subgroup1_description1,
									СтруктураИерархии.subgroup2,
									СтруктураИерархии.subgroup2_id,
									СтруктураИерархии.subgroup2_visible,
									СтруктураИерархии.subgroup2_sort,
									СтруктураИерархии.subgroup2_description,
									СтруктураИерархии.subgroup2_description2,
									id,
									visible,
									datachange,
									brand,
									nomercatalog,
									nomercatalog_forsite,
									havecertificate,
									instock,
									name,
									description,
									unit,
									МассивСвойств,
									datedelivery,
									МассивЦен,
									total,
									picture,
									МассивКомплектов_id,
									МассивАналогов_id));			
		КонецЦикла;	
	КонецЦикла; 
	
	Если МассивПрайслист.Количество()>1000 Тогда 
		//Выгрузим только 1000 строк, ограничение сайта
		ИндексПоследнего = МассивПрайслист.Количество() - 1;
		Ном 			 = 0;
		Для Индекс = 0 По ИндексПоследнего Цикл
			Если Ном>1000 Тогда   
				МассивПрайслист.Удалить(ИндексПоследнего - Индекс);	
			КонецЕсли;
			Ном = Ном + 1;
		КонецЦикла;
		
		ИндексПоследнего = МассивЗарегистрированныхОбъектов.Количество() - 1;
		Ном 			 = 0;
		Для Индекс = 0 По ИндексПоследнего Цикл
			Если Ном>1000 Тогда   
				МассивЗарегистрированныхОбъектов.Удалить(ИндексПоследнего - Индекс);	
			КонецЕсли;
			Ном = Ном + 1;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеРезультат.priceList.Добавить(МассивПрайслист);		
	СтруктураСообщения.Результат = ДанныеРезультат;	
	Если ЗначениеЗаполнено(НастройкаДоставки)
		И МассивПрайслист.Количество()>0 Тогда
		ИнформацияОбОшибке 	= "";
		РезультатОтправки 	= ОтправитьКартинкиТоваров(МассивЗарегистрированныхОбъектов, НастройкаДоставки, СтруктураСообщения, ИнформацияОбОшибке);
		ТекстJson 			= ВернутьОтветноеСообщение(СтруктураСообщения);
		РезультатОтправки 	= ОтправитьФайлКаталогаТоваров(ТекстJson, НастройкаДоставки, ИнформацияОбОшибке);
		Если Не РезультатОтправки Тогда 
			ВызватьИсключение ИнформацияОбОшибке;
		КонецЕсли;
	КонецЕсли;
	
	//снимем регистрацию с плана обмена по переданным объектам
	Для Каждого НомСтр Из МассивЗарегистрированныхОбъектов Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел,НомСтр);		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
