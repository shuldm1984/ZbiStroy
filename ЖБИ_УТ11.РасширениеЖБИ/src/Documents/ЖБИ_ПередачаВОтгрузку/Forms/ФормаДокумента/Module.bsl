
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция ПроверитьСпецификацию(ДокументОснование)
	
	Результат = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",ДокументОснование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖБИ_ЗаявкиПокупателейДокументы.ДокументыОтгрузки КАК ДокументыОтгрузки
	               |ИЗ
	               |	Документ.ЖБИ_ЗаявкиПокупателей.Документы КАК ЖБИ_ЗаявкиПокупателейДокументы
	               |ГДЕ
	               |	ЖБИ_ЗаявкиПокупателейДокументы.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл 
		Если ТипЗнч(РезультатЗапроса.ДокументыОтгрузки) <> Тип("ДокументСсылка.ЗаказКлиента") Тогда 
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РезультатЗапроса.ДокументыОтгрузки.ЖБИ_НомерСпецификации) Тогда 
			Результат = Ложь;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РезультатЗапроса.ДокументыОтгрузки.ЖБИ_УсловиеВДоговоре1) Тогда 
			Результат = Ложь;	
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РезультатЗапроса.ДокументыОтгрузки.ЖБИ_УсловиеВДоговоре2) Тогда 
			Результат = Ложь;	
		КонецЕсли;
		//Если НЕ ЗначениеЗаполнено(РезультатЗапроса.ДокументыОтгрузки.ЖБИ_УсловиеВДоговоре3) Тогда 
		//	Результат = Ложь;	
		//КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РезультатЗапроса.ДокументыОтгрузки.Договор) Тогда 
			Результат = Ложь;	
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПроверитьСтатусВРаботе()
	//Если Объект.Статус = Перечисления.ЖБИ_СтатусРасчетаСтавки.Расчет Тогда
	//	Объект.Статус = Перечисления.ЖБИ_СтатусРасчетаСтавки.ВРаботе;
	//	Записать();	
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеУжеРазмещено()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату",КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Запрос.УстановитьПараметр("ЗаявкаПокупателя",Объект.ДокументОснование);
	Запрос.УстановитьПараметр("Статус",Перечисления.ЖБИ_СтатусРасчетаСтавки.НеСогласован);
	Если Объект.Статус = Перечисления.ЖБИ_СтатусРасчетаСтавки.Рассчитан Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЖБИ_ПередачаВОтгрузкуТовары.Поставщик КАК Поставщик,
		               |	ЖБИ_ПередачаВОтгрузкуТовары.Номенклатура КАК Номенклатура,
		               |	ЖБИ_ПередачаВОтгрузкуТовары.КодСтроки КАК КодСтроки,
					   |	ЖБИ_ПередачаВОтгрузкуТовары.Количество КАК Количество,
		               |	ЕСТЬNULL(ЖБИ_ПередачаВОтгрузкуОстатки.ПереданоВОтгрузкуОстаток, 0) КАК УжеРазмещено
		               |ИЗ
		               |	Документ.ЖБИ_ПередачаВОтгрузку.Товары КАК ЖБИ_ПередачаВОтгрузкуТовары
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЖБИ_ПередачаВОтгрузку.Остатки(&НаДату, ЗаявкаПокупателя = &ЗаявкаПокупателя) КАК ЖБИ_ПередачаВОтгрузкуОстатки
		               |		ПО ЖБИ_ПередачаВОтгрузкуТовары.Поставщик = ЖБИ_ПередачаВОтгрузкуОстатки.Поставщик
		               |			И ЖБИ_ПередачаВОтгрузкуТовары.Номенклатура = ЖБИ_ПередачаВОтгрузкуОстатки.Номенклатура
		               |			И ЖБИ_ПередачаВОтгрузкуТовары.КодСтроки = ЖБИ_ПередачаВОтгрузкуОстатки.КодСтроки
		               |ГДЕ
		               |	ЖБИ_ПередачаВОтгрузкуТовары.Ссылка = &Ссылка
		               |	И ЖБИ_ПередачаВОтгрузкуОстатки.ПереданоВОтгрузкуОстаток > 0";	
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
		Для Каждого ОформлениеСтроки Из Объект.Товары Цикл
			НайденныеСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("Поставщик,Номенклатура,КодСтроки",ОформлениеСтроки.Поставщик,ОформлениеСтроки.Номенклатура,ОформлениеСтроки.КодСтроки));	
			Если НайденныеСтроки.Количество()>0 Тогда 
				ОформлениеСтроки.УжеРазмещено = НайденныеСтроки[0].УжеРазмещено;
				ОформлениеСтроки.Остаток	  = НайденныеСтроки[0].Количество - ОформлениеСтроки.УжеРазмещено;
			КонецЕсли;
		КонецЦикла;	
	ИначеЕсли Объект.Статус = Перечисления.ЖБИ_СтатусРасчетаСтавки.ВРаботе
		ИЛИ Объект.Статус = Перечисления.ЖБИ_СтатусРасчетаСтавки.Расчет Тогда 
		 Запрос.Текст = "ВЫБРАТЬ
		                |	ЖБИ_ПередачаВОтгрузкуТовары.Поставщик КАК Поставщик,
		                |	ЖБИ_ПередачаВОтгрузкуТовары.Номенклатура КАК Номенклатура,
		                |	ЖБИ_ПередачаВОтгрузкуТовары.КодСтроки КАК КодСтроки,
						|	ЖБИ_ПередачаВОтгрузкуТовары.Количество КАК Количество,
		                |	СУММА(ЖБИ_ПередачаВОтгрузкуТовары.РазместитьВПлан) КАК УжеРазмещено
		                |ИЗ
		                |	Документ.ЖБИ_ПередачаВОтгрузку.Товары КАК ЖБИ_ПередачаВОтгрузкуТовары
		                |ГДЕ
		                |	ЖБИ_ПередачаВОтгрузкуТовары.Ссылка.ДокументОснование = &ЗаявкаПокупателя
		                |	И ЖБИ_ПередачаВОтгрузкуТовары.Ссылка <> &Ссылка
						|	И ЖБИ_ПередачаВОтгрузкуТовары.Ссылка.Статус <> &Статус
		                |	И НЕ ЖБИ_ПередачаВОтгрузкуТовары.Ссылка.ПометкаУдаления
		                |
		                |СГРУППИРОВАТЬ ПО
		                |	ЖБИ_ПередачаВОтгрузкуТовары.Поставщик,
		                |	ЖБИ_ПередачаВОтгрузкуТовары.Номенклатура,
		                |	ЖБИ_ПередачаВОтгрузкуТовары.КодСтроки,
						|	ЖБИ_ПередачаВОтгрузкуТовары.Количество";
		 РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
		 Для Каждого ОформлениеСтроки Из Объект.Товары Цикл
			 НайденныеСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("Поставщик,Номенклатура,КодСтроки",ОформлениеСтроки.Поставщик,ОформлениеСтроки.Номенклатура,ОформлениеСтроки.КодСтроки));	
			 Если НайденныеСтроки.Количество()>0 Тогда
				 Стр = НайденныеСтроки[0];
				 ОформлениеСтроки.УжеРазмещено 	= Стр.УжеРазмещено;
				 ОформлениеСтроки.Остаток 		= Стр.Количество - Стр.УжеРазмещено; 
				 Если ОформлениеСтроки.РазместитьВПлан = 0 Тогда
					 ОформлениеСтроки.РазместитьВПлан = 0;
				 ИначеЕсли ОформлениеСтроки.Количество - Стр.УжеРазмещено = 0 Тогда 
					 ОформлениеСтроки.РазместитьВПлан = 0;
				 ИначеЕсли ОформлениеСтроки.РазместитьВПлан >0
					 И  ОформлениеСтроки.УжеРазмещено <> 0 Тогда 
					 //ОформлениеСтроки.РазместитьВПлан = ОформлениеСтроки.Количество - НайденныеСтроки[0].УжеРазмещено;
				 Иначе 
					 //ОформлениеСтроки.УжеРазмещено = ОформлениеСтроки.Количество - ОформлениеСтроки.РазместитьВПлан;	 
				 КонецЕсли;
			 КонецЕсли;
		 КонецЦикла;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТЧ(ИмяТаблицы,Свойство,ЗначениеСвойства,СписокКолонокИсключение,ИмяПоляТаблицы)
  
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДоступностьСтраницыПоСтатусу()

	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусРасчетаСтавки.Рассчитан") Тогда 
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДоступностьКомандПоСтатусу()
	
	//ДоступностьРоли = ЖБИ_ОбщийМодульДокументыСервер.ОпределитьДоступностьРоли("ЖБИ_ОсновнаяРоль");
							
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусРасчетаСтавки.Рассчитан")Тогда 		
		Элементы.ФормаКомандаПровестиИЗакрыть.Доступность		= Ложь;
		Элементы.ФормаКомандаУтвердитьПланОтгрузки.Доступность 	= Ложь;
		Элементы.ФормаКомандаОтклонить.Доступность				= Истина;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусРасчетаСтавки.Расчет") Тогда
		Элементы.ФормаКомандаПровестиИЗакрыть.Доступность 		= Истина;
		Элементы.ФормаКомандаУтвердитьПланОтгрузки.Доступность 	= Ложь;
		Элементы.ФормаКомандаОтклонить.Доступность				= Истина;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусРасчетаСтавки.ВРаботе") Тогда
		Элементы.ФормаКомандаПровестиИЗакрыть.Доступность 		= Ложь;
		Элементы.ФормаКомандаУтвердитьПланОтгрузки.Доступность 	= Истина;
		Элементы.ФормаКомандаОтклонить.Доступность				= Истина;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусРасчетаСтавки.НеСогласован") Тогда
		Элементы.ФормаКомандаПровестиИЗакрыть.Доступность 		= Истина;
		Элементы.ФормаКомандаУтвердитьПланОтгрузки.Доступность 	= Ложь;
		Элементы.ФормаКомандаОтклонить.Доступность				= Ложь;
	КонецЕсли;
	
	//Элементы.ФормаКомандаОтклонить.Доступность = ДоступностьРоли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУсловноеОформление()
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормыИнформацию()
	
	//Доступность страницы
	ОпределитьДоступностьСтраницыПоСтатусу();
		
	//Доступность команд
	ОпределитьДоступностьКомандПоСтатусу();
	
	//Доступность элементов формы
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти
	

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_ЭЛЕМЕНТОВ_УПРАВЛЕНИЯ_ФОРМЫ

#Область Команды

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	СообщениеОбОшибки = "";
	Сообщение = Новый СообщениеПользователю;
	Отказ = ПроверитьИзменениеСтатуса(СообщениеОбОшибки);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);
		Возврат;
	КонецЕсли;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусРасчетаСтавки.ВРаботе");
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьИзменениеСтатуса(СообщениеОбОшибки)
	
	Отказ = Ложь;	
	Если Не ЗначениеЗаполнено(Объект.ДатаПередачиВОтгрузку) Тогда 
		Отказ = Истина;
		СообщениеОбОшибки = "Не заполнено поле <Дата окончания отгрузки по договору>";
		Возврат Отказ;
	КонецЕсли;
	
	Если Не ПроверитьСпецификацию(Объект.ДокументОснование) Тогда 
		Отказ = Истина;
		СообщениеОбОшибки = "Не заполнены №/условия спецификации или договор, для Заказа клиента";
		Возврат Отказ;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьСтатусПланОтгрузкиСервер(ЗаявкаСсылка,СсылкаПередачаВОтгрузку,СообщениеОбОшибки)
	
	Отказ = Документы.ЖБИ_ПередачаВОтгрузку.ИзменитьСтатусПередачаВОтгрузку(ЗаявкаСсылка,СсылкаПередачаВОтгрузку,СообщениеОбОшибки);
	Возврат Отказ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменитьСтатусПланОтгрузки(ЗаявкаСсылка,СсылкаПередачаВОтгрузку,Согласование,СообщениеОбОшибки)
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	Отказ = Документы.ЖБИ_ПередачаВОтгрузку.ИзменитьСтатусЗаявки(ЗаявкаСсылка,СсылкаПередачаВОтгрузку,Согласование,СообщениеОбОшибки);
	Если Отказ Тогда 
		Возврат Отказ;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура УтвердитьПланОтгрузки()
	
	СообщениеОбОшибки = "";
	Сообщение 		  = Новый СообщениеПользователю;
	Отказ 	  		  = ПроверитьИзменениеСтатуса(СообщениеОбОшибки);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);
		Возврат;
	КонецЕсли;
	
	Отказ = ИзменитьСтатусПланОтгрузки(Объект.ДокументОснование,Объект.Ссылка,Истина,СообщениеОбОшибки);
	Если Не Отказ Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ утвержден");
		Объект.Статус 				 = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусРасчетаСтавки.Рассчитан");
		Объект.ДатаОдобренияОтгрузки = ТекущаяДата();
	Иначе 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);
	КонецЕсли;

	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Ложь);
	//ОбновитьЭлементыФормыИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросУтвердитьПланОтгрузки()	
	
	Текст = "Утвердить план отгрузки?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросУтвердитьПланОтгрузки");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУтвердитьПланОтгрузки(Команда)	
	ПоказатьВопросУтвердитьПланОтгрузки();	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПланОтгрузки()
	
	СообщениеОбОшибки = "";	
	Отказ = ИзменитьСтатусПланОтгрузки(Объект.ДокументОснование,Объект.Ссылка,Ложь,СообщениеОбОшибки);
	Если Не Отказ Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Документ отклонен");
		Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусРасчетаСтавки.НеСогласован");
	КонецЕсли;
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	Закрыть();
	//ОбновитьЭлементыФормыИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОтклонить()	
	
	Текст = "Отклонить план отгрузки?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросОтклонить");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтклонить(Команда)	
	ПоказатьВопросОтклонить();	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЧат(Команда)	
	ЖБИ_ОбщийМодульДокументы.ПоказатьДиалогДобавленияКомментарияВЧат(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЧат(Команда)		
	ЖБИ_ОбщийМодульДокументы.ОбновитьЧат(ЭтаФорма);	
КонецПроцедуры

#КонецОбласти

#Область Товары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазместитьВПланПриИзменении(Элемент)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Товары");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.РазместитьВПлан > ТекДанные.Количество - ТекДанные.УжеРазмещено Тогда
		ТекДанные.РазместитьВПлан = 0;
		ОбщегоНазначенияКлиент.СообщитьПользователю("Нельзя указать кол-во больше, чем в поле Исходное кол-во");
		Возврат;
	КонецЕсли;
	
	ТекДанные.ЕдТранспорта 	= ?(ТекДанные.НормаАвто = 0,0,ТекДанные.РазместитьВПлан/ТекДанные.НормаАвто);
	ТекДанные.Сумма			= ТекДанные.РазместитьВПлан * ТекДанные.Цена;
	ОбновитьПолеУжеРазмещено();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаСервере
Процедура УстановитьПараметрыДинамическогоСписка()
	
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ЭтаФорма.Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты() Цикл
			Если ЭтаФорма.Параметры.Свойство(Реквизит.Имя) Тогда
				ЭтаФорма[Реквизит.Имя] = ЭтаФорма.Параметры[Реквизит.Имя];
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		Возврат;
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ПрофильПользователя = ЖБИ_ОбщийМодульСервер.ПолучитьПрофильПользователя(ТекущийПользователь);
	//УстановитьПараметрыДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЭлементыФормыИнформацию();
	ПроверитьСтатусВРаботе();
	ОбновитьПолеУжеРазмещено();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатВыполнения = Новый Структура("СообщениеОбОшибке","");	
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		Если ДополнительныеПараметры.Свойство("ИмяСобытия")
			И ЗначениеЗаполнено(ДополнительныеПараметры.ИмяСобытия) Тогда
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		Если ДополнительныеПараметры.Свойство("ИмяСобытия")
			И ЗначениеЗаполнено(ДополнительныеПараметры.ИмяСобытия) Тогда
			Если ДополнительныеПараметры.ИмяСобытия = "ВопросУтвердитьПланОтгрузки" Тогда
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;				
				УтвердитьПланОтгрузки();
				//ОбновитьПолеУжеРазмещено();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросОтклонить" Тогда
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				ОтклонитьПланОтгрузки();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ДобавитьКомментарийВЧат" Тогда
				Если Результат = Неопределено Тогда
					Возврат;
				КонецЕсли;
				ЖБИ_ОбщийМодульДокументы.ДобавитьКомментарийВЧат(ЭтаФорма, Результат);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
