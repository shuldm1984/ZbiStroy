
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

&НаСервере
Процедура ПометитьНаУдалениеДокумент()
	
	ТекОбъект 					= Объект.Ссылка.ПолучитьОбъект();
	ТекОбъект.ПометкаУдаления 	= Истина;
	ТекОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьМаксиСтавкуФрахта()
	
	МаксСтавка = 5000;
	ТаблСтавок = Новый ТаблицаЗначений;
	ТаблСтавок.Колонки.Добавить("ЗаявкаПокупателя",Новый ОписаниеТипов("ДокументСсылка.ЖБИ_ЗаявкиПокупателей"));
	ТаблСтавок.Колонки.Добавить("КодСтроки",Новый ОписаниеТипов("Число"));
	ТаблСтавок.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблСтавок.Колонки.Добавить("НоменклатураПоставщика",Новый ОписаниеТипов("СправочникСсылка.НоменклатураПоставщиков"));
	ТаблСтавок.Колонки.Добавить("Поставщик",Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Для Каждого НомСтр Из Объект.Товары Цикл 
		НоваяСтр = ТаблСтавок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,НомСтр);
	КонецЦикла;	
	
	Запрос 			= Новый Запрос;
	Запрос.УстановитьПараметр("ТаблСтавок",ТаблСтавок);
	Запрос.Текст 	= "ВЫБРАТЬ
					   | 	ТаблСтавок.ЗаявкаПокупателя,
					   |	ТаблСтавок.КодСтроки,
					   |	ТаблСтавок.Номенклатура,
					   |	ТаблСтавок.НоменклатураПоставщика,
					   |	ТаблСтавок.Поставщик
					   |ПОМЕСТИТЬ Табл
					   |ИЗ
					   |	&ТаблСтавок КАК ТаблСтавок
					   | ;
					   | ВЫБРАТЬ
					   | 	Табл.ЗаявкаПокупателя КАК ЗаявкаПокупателя,
					   | 	ЗаявкиПокупателейОкончательныйРасчет.УкрупненнаяСтавка КАК Ставка
					   | ИЗ
					   | 	Табл КАК Табл 
					   | 	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЖБИ_ЗаявкиПокупателей.ОкончательныйРасчет КАК ЗаявкиПокупателейОкончательныйРасчет 
					   | 		ПО Табл.ЗаявкаПокупателя = ЗаявкиПокупателейОкончательныйРасчет.Ссылка
					   | 		И  Табл.КодСтроки = ЗаявкиПокупателейОкончательныйРасчет.КодСтроки
					   | 		И  Табл.Номенклатура = ЗаявкиПокупателейОкончательныйРасчет.Номенклатура
					   | 		И  Табл.НоменклатураПоставщика = ЗаявкиПокупателейОкончательныйРасчет.НоменклатураПоставщика
					   | 		И  Табл.Поставщик = ЗаявкиПокупателейОкончательныйРасчет.Поставщик";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл 
		МаксСтавка = Макс(МаксСтавка,РезультатЗапроса.Ставка);	
	КонецЦикла;
	
	Возврат МаксСтавка;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДоступностьПолейФормы(ДоступноРедактирование)

	Для Каждого НомЭлемента Из Элементы Цикл 
		Если ТипЗнч(НомЭлемента) = Тип("ГруппаФормы") Тогда
			Если НомЭлемента.Имя = "ФормаКоманднаяПанель" Тогда
				Для Каждого Ном Из НомЭлемента.ПодчиненныеЭлементы Цикл 
					Если Ном.Имя = "ФормаКомандаПровестиИЗакрыть"
						ИЛИ Ном.Имя = "ФормаКомандаПровести"
						ИЛИ Ном.Имя = "ФормаКомандаЗаписатьДокумент"
						ИЛИ Ном.Имя = "ФормаОтменаПроведения"
						ИЛИ Ном.Имя = "ПодменюПечати" Тогда 
						Продолжить;
					КонецЕсли;
					Ном.Доступность = НЕ ДоступноРедактирование;
				КонецЦикла;
			ИначеЕсли НомЭлемента.Имя = "ДокументыОтгрузкиКоманднаяПанель" Тогда
				Для Каждого Ном Из НомЭлемента.ПодчиненныеЭлементы Цикл 
					Ном.Доступность = НЕ ДоступноРедактирование;
				КонецЦикла;
			Иначе 
				НомЭлемента.ТолькоПросмотр = ДоступноРедактирование;
			КонецЕсли;			
		ИначеЕсли ТипЗнч(НомЭлемента) = Тип("ПолеФормы") Тогда
			НомЭлемента.ТолькоПросмотр = ДоступноРедактирование;
		ИначеЕсли ТипЗнч(НомЭлемента) = Тип("ТаблицаФормы") Тогда 
			НомЭлемента.ТолькоПросмотр = ДоступноРедактирование;
		ИначеЕсли ТипЗнч(НомЭлемента) = Тип("КнопкаФормы") Тогда
			//НомЭлемента.Доступность = НЕ ДоступноРедактирование;	
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДоступностьФормы()	
	ДоступноРедактирование = Объект.Отгружено;		
	Возврат ДоступноРедактирование;	
КонецФункции

&НаКлиенте
Функция ПроверитьИзменениеСтатуса(СообщениеОбОшибки)
	
	Отказ 				= Ложь;
	СтруктураПроверки 	= Новый Структура("ДоговорЗаявка,ТранспортнаяНакладная,ДоверенностьВыданная",Ложь,Ложь,Ложь);
	Для Каждого НомСтр Из Объект.ДокументыОтгрузки Цикл 
		Если ТипЗнч(НомСтр.ДокументОтгрузки) = Тип("ДокументСсылка.ЖБИ_ДоговорЗаявка") Тогда
			СтруктураПроверки.ДоговорЗаявка = Истина;
		ИначеЕсли ТипЗнч(НомСтр.ДокументОтгрузки) = Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда
			СтруктураПроверки.ТранспортнаяНакладная = Истина;
		ИначеЕсли ТипЗнч(НомСтр.ДокументОтгрузки) = Тип("ДокументСсылка.ДоверенностьВыданная") Тогда
			СтруктураПроверки.ДоверенностьВыданная = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ СтруктураПроверки.ДоговорЗаявка Тогда 
		СообщениеОбОшибки	= "Не заполнен Договор-заявка";
		Отказ 				= Истина;
		Возврат Отказ
	КонецЕсли;
	Если НЕ СтруктураПроверки.ТранспортнаяНакладная Тогда 
		СообщениеОбОшибки	= "Не заполнена Транспортная накладная";
		Отказ 				= Истина;
		Возврат Отказ;
	КонецЕсли;
	Если НЕ СтруктураПроверки.ДоверенностьВыданная Тогда 
		СообщениеОбОшибки	= "Не заполнена Доверенность";
		Отказ 				= Истина;
		Возврат Отказ;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОтгрузку()
	
	СообщениеОбОшибки = "";
	Отказ = ПроверитьИзменениеСтатуса(СообщениеОбОшибки);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);
		Возврат;
	КонецЕсли;	
	
	Объект.Отгружено = Истина;	
	Для Каждого НомСтр Из Объект.Товары Цикл 
		НомСтр.КоличествоОтгружено = НомСтр.КоличествоКОтгрузке;	
	КонецЦикла;	
	Записать();	
	Элементы.Товары.Обновить();
	
	ОбновитьЭлементыФормыИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОтгрузку()
	
	Для Каждого НомСтр Из Объект.Товары Цикл 
		НомСтр.КоличествоОтгружено = 0;	
	КонецЦикла;
	
	Если НЕ Объект.Отгружено Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
		ПометитьНаУдалениеДокумент();
		Закрыть();
	Иначе 
		Объект.Отгружено = Ложь;
		Записать();	
		Элементы.Товары.Обновить();
		ОбновитьЭлементыФормыИнформацию();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СкорректироватьОтгрузку()	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	ОбновитьЭлементыФормыИнформацию();
	ОбновитьПолеФакт();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОтгрузить()		
	Текст = "Отгрузить?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросОтгрузить");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОтклонить()		
	Текст = "Отменить отгрузку?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросОтклонить");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросКорректировка()	
	Текст = "Скорректировкать отгрузку?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросКорректировка");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);	
КонецПроцедуры

// Сворачивает в массиве повторяющиеся значения.
//
// Параметры:
//	пМассив - <Массив> - Исходный массив.
//
// Возвращаемое значение:
//	<Массив> - Свёрнутый массив.
//
&НаСервереБезКонтекста
Функция СвернутьМассив(пМассив,Имя)
 
	Если пМассив.Количество() > 1 Тогда
		ТЗ = Новый ТаблицаЗначений;
		ИмяКолонки = Имя;
		ТЗ.Колонки.Добавить(ИмяКолонки);
		Для Индекс = 0 По пМассив.Количество()-1 Цикл
			ТЗ.Добавить();
		КонецЦикла;
		ТЗ.ЗагрузитьКолонку(пМассив, ИмяКолонки);
		ТЗ.Свернуть(ИмяКолонки, "");
		Возврат ТЗ.ВыгрузитьКолонку(ИмяКолонки);
	Иначе
		Результат = Новый Массив;
		Для Каждого Элемент Из пМассив Цикл
			Результат.Добавить(Элемент);
		КонецЦикла;
		Возврат Результат;
	КонецЕсли;
 
КонецФункции

&НаКлиенте
Процедура ОбновитьТаблицуСДокументами()
	
	Если Объект.ДокументыОтгрузки.Количество()=0 Тогда
		Возврат
	КонецЕсли;
	
	//Перевозчик 		= "";
	НомерЗаявки 	= "";
	ДатаЗаявки		= "";
	НомерДоговора 	= "";
	Для Каждого НомСтр Из Объект.ДокументыОтгрузки Цикл 
		Если ТипЗнч(НомСтр.ДокументОтгрузки) = Тип("ДокументСсылка.ЖБИ_ДоговорЗаявка") Тогда 
			//Перевозчик		= ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Перевозчик,"НаименованиеПолное");
			НомерЗаявки 	= ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(НомСтр.ДокументОтгрузки,"НомерЗаявки");
			ДатаЗаявки 		= ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(НомСтр.ДокументОтгрузки,"Дата");
			НомерДоговора 	= ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(НомСтр.ДокументОтгрузки,"Договор.Номер");		
		КонецЕсли;
	КонецЦикла;
	
	ДокументПредставдение = "";
	Для Каждого ОформлениеСтроки Из Объект.ДокументыОтгрузки Цикл
		Если ТипЗнч(ОформлениеСтроки.ДокументОтгрузки) = Тип("ДокументСсылка.ЖБИ_ДоговорЗаявка") Тогда
			ДокументПредставдение = "Договор заявка";
		ИначеЕсли ТипЗнч(ОформлениеСтроки.ДокументОтгрузки) = Тип("ДокументСсылка.ДоверенностьВыданная") Тогда
			ДокументПредставдение = "Выданная доверенность";
		ИначеЕсли ТипЗнч(ОформлениеСтроки.ДокументОтгрузки) = Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда
			ДокументПредставдение = "Транспортная накладная";
		КонецЕсли;
		ОформлениеСтроки.ДокументПредставление 		= ДокументПредставдение + " " + НомерДоговора + " - " + НомерЗаявки + "-" + ОформлениеСтроки.НомерДокумента + " " + ОформлениеСтроки.Поставщик + " " + ДатаЗаявки; 
		ОформлениеСтроки.Статус 					= ?(ТипЗнч(ОформлениеСтроки.ДокументОтгрузки) = Тип("ДокументСсылка.ТранспортнаяНакладная"),"",ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ОформлениеСтроки.ДокументОтгрузки,"Статус"));
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокумент(ДопПараметры)
	
	НачатьТранзакцию();
	
	ДокументОтгрузки 	= ДопПараметры.ДокументОтгрузки;
	//ИмяПоиска			= "";
	//Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ЖБИ_ДоговорЗаявка") Тогда 
	//	ИмяПоиска = "ДоговорЗаявка";
	//КонецЕсли;
	//
	//НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура(ИмяПоиска,ДокументОтгрузки));
	//Для Каждого НомСтр Из НайденныеСтроки Цикл 
	//	НомСтр[ИмяПоиска] = "";			
	//КонецЦикла;
	
	НайденныеСтроки = Объект.ДокументыОтгрузки.НайтиСтроки(Новый Структура("ДокументОтгрузки",ДокументОтгрузки));
	ЕстьОшибки 		= Ложь;
	Для Каждого НомСтр Из НайденныеСтроки Цикл 
		ДокОтгрузкиОбъект = НомСтр.ДокументОтгрузки.ПолучитьОбъект();
		Если ТипЗнч(НомСтр.ДокументОтгрузки) = Тип("ДокументСсылка.ЖБИ_ДоговорЗаявка") Тогда 
			ДокОтгрузкиОбъект.Статус = Перечисления.ЖБИ_СтатусРасчетаСтавки.НеСогласован;
		ИначеЕсли ТипЗнч(НомСтр.ДокументОтгрузки) = Тип("ДокументСсылка.ДоверенностьВыданная") Тогда
			ДокОтгрузкиОбъект.Статус = Перечисления.СтатусыДоверенностей.Аннулирована;
		ИначеЕсли ТипЗнч(НомСтр.ДокументОтгрузки) = Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда 
		Иначе 
			Продолжить;
		КонецЕсли; 
		ДокОтгрузкиОбъект.УстановитьПометкуУдаления(Истина);
		Попытка 
			ДокОтгрузкиОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЕстьОшибки = Истина;
		КонецПопытки
	КонецЦикла;
	
	Если Не ЕстьОшибки Тогда 
		НайденныеСтроки = Объект.ДокументыОтгрузки.НайтиСтроки(Новый Структура("ДокументОтгрузки",ДокументОтгрузки));
		Для Каждого НомСтр Из НайденныеСтроки Цикл 
			Объект.ДокументыОтгрузки.Удалить(НомСтр);	
		КонецЦикла;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументОтгрузки(ДопПараметры)
	
	НачатьТранзакцию();
	
	ДокументОтгрузки 	= ДопПараметры.ДокументОтгрузки;
	ДокОтгрузкиОбъект 	= ДокументОтгрузки.ПолучитьОбъект();
	ДокОтгрузкиОбъект.УстановитьПометкуУдаления(Истина);
 	Попытка 
		ДокОтгрузкиОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда
		ДокРеализацияТоваровСсылка 	= ДокументОтгрузки.ДокументыОснования[0].ДокументОснование;
		ДокРеализацияТоваров		= ДокРеализацияТоваровСсылка.ПолучитьОбъект();
		ДокРеализацияТоваров.УстановитьПометкуУдаления(Истина);
		Попытка 
			ДокРеализацияТоваров.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	НайденныеСтроки = Объект.ДокументыОтгрузки.НайтиСтроки(Новый Структура("ДокументОтгрузки",ДокументОтгрузки));
	Для Каждого НомСтр Из НайденныеСтроки Цикл 
		Объект.ДокументыОтгрузки.Удалить(НомСтр);	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#Область ДоговорЗаявка

&НаСервереБезКонтекста
Функция СоздатьДокументДоговорЗаявкиСервер(ФактическиеОтгрузкиСсылка,СообщениеОбОшибки)
	
	ДокДоговорЗаявкаПустаяСсылка 	= Документы.ЖБИ_ДоговорЗаявка.ПустаяСсылка();
	Отказ 							= Документы.ЖБИ_ФактическиеОтгрузки.ПроверитьЗаполнениеДокумента(ФактическиеОтгрузкиСсылка,СообщениеОбОшибки);
	Если Отказ Тогда 
		Возврат ДокДоговорЗаявкаПустаяСсылка;	
	КонецЕсли;
	
	//НайденныеСтроки 							= ФактическиеОтгрузкиСсылка.Товары.НайтиСтроки(Новый Структура("Поставщик,ЗаявкаПокупателя",Поставщик,ЗаявкаПокупателя));
	//НайденныеСтроки 							= ФактическиеОтгрузкиСсылка.Товары.НайтиСтроки(Новый Структура("Покупатель",ЗаявкаПокупателя.Партнер));
	НайденныеСтроки 							= ФактическиеОтгрузкиСсылка.Товары;
	Если НайденныеСтроки.Количество()=0  Тогда 
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки("Не найдены товары поставщика");
		Возврат ДокДоговорЗаявкаПустаяСсылка;
	КонецЕсли;
	
	ДокДоговорЗаявка 							= Документы.ЖБИ_ДоговорЗаявка.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокДоговорЗаявка,ФактическиеОтгрузкиСсылка);
	ДокДоговорЗаявка.Дата 						= ТекущаяДатаСеанса();
	ДокДоговорЗаявка.УстановитьНовыйНомер();
	ДокДоговорЗаявка.ДокументОснование 			= ФактическиеОтгрузкиСсылка;
	//ДокДоговорЗаявка.Поставщик					= Поставщик;
	НомерЗаявки									= Документы.ЖБИ_ФактическиеОтгрузки.ЗаполнитьНомерПоПорядку(ФактическиеОтгрузкиСсылка.Перевозчик,ФактическиеОтгрузкиСсылка.Договор);
	ДокДоговорЗаявка.НомерЗаявки				= ?(НомерЗаявки = 0,1, НомерЗаявки + 1);
	ДокДоговорЗаявка.Менеджер      				= ФактическиеОтгрузкиСсылка.Менеджер;
	ДокДоговорЗаявка.Автор						= Пользователи.ТекущийПользователь();
	Для Каждого НомСтр Из НайденныеСтроки Цикл
		НоваяСтр 									= ДокДоговорЗаявка.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,НомСтр);
		НоваяСтр.Количество 						= НомСтр.КоличествоКОтгрузке;
		//ДокДоговорЗаявка.КонтактныеЛицаПоставщика 	= НомСтр.КонтактныеЛицаПоставщика;
		НоваяСтр.Покупатель							= НомСтр.Покупатель;
		НоваяСтр.КонтактныеЛицаПокупателя 			= НомСтр.КонтактныеЛицаПокупателя;
		//ДокДоговорЗаявка.ПунктНазначения            = НомСтр.ПунктНазначения;
		//ДокДоговорЗаявка.ПунктОтгрузки				= НомСтр.ПунктОтгрузки;		
	КонецЦикла;
	
	ДокДоговорЗаявка.Статус							= Перечисления.ЖБИ_СтатусРасчетаСтавки.ВРаботе;
	//ЗаполнитьВесТовара(ДокДоговорЗаявка.Товары,Поставщик);
	
	Попытка 
		ДокДоговорЗаявка.Записать();
	Исключение
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ДокДоговорЗаявкаПустаяСсылка;
	КонецПопытки;
	
	//сохраним счетчик договоров по перевозке
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Период",ТекущаяДатаСеанса());
	СтруктураПараметров.Вставить("Партнер",ФактическиеОтгрузкиСсылка.Перевозчик);
	СтруктураПараметров.Вставить("ДоговорПеревозки",ФактическиеОтгрузкиСсылка.Договор);
	СтруктураПараметров.Вставить("НомерПоПорядку",ДокДоговорЗаявка.НомерЗаявки);
	СтруктураПараметров.Вставить("ДокументПеревозчика",ДокДоговорЗаявка.Ссылка);
	СтруктураПараметров.Вставить("Автор",Пользователи.ТекущийПользователь());
	ТаблицаНабораЗаписей = РегистрыСведений.ЖБИ_НумераторПоПеревозчикам.ЗаполнитьТаблицуНабораЗаписей(СтруктураПараметров);	
	Результат 			 = РегистрыСведений.ЖБИ_НумераторПоПеревозчикам.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,, СообщениеОбОшибки);
	Если Не Результат Тогда
	    Возврат ДокДоговорЗаявкаПустаяСсылка;
	КонецЕсли;
	
	Возврат ДокДоговорЗаявка.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьДокументДоговорЗаявкиСервер(ДоговорЗаявкаСсылка,ФактическиеОтгрузкиСсылка,СообщениеОбОшибки)
	
	ДокДоговорЗаявка 	= Документы.ЖБИ_ДоговорЗаявка.ПустаяСсылка();	
	//НайденныеСтроки 	= ФактическиеОтгрузкиСсылка.Товары.НайтиСтроки(Новый Структура("Поставщик,ЗаявкаПокупателя",Поставщик,ЗаявкаПокупателя));
	//НайденныеСтроки 	= ФактическиеОтгрузкиСсылка.Товары.НайтиСтроки(Новый Структура("Покупатель",ЗаявкаПокупателя.Партнер));
	НайденныеСтроки 	= ФактическиеОтгрузкиСсылка.Товары;
	Если НайденныеСтроки.Количество()=0  Тогда 
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки("Не найдены товары поставщика");
		Возврат ДокДоговорЗаявка.Ссылка;
	КонецЕсли;
	
	ДокДоговорЗаявка 								= ДоговорЗаявкаСсылка.ПолучитьОбъект();
	ДокДоговорЗаявка.Товары.Очистить();
	Для Каждого НомСтр Из НайденныеСтроки Цикл
		НоваяСтр 									= ДокДоговорЗаявка.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,НомСтр);
		НоваяСтр.Количество 						= НомСтр.КоличествоКОтгрузке;
		//ДокДоговорЗаявка.КонтактныеЛицаПоставщика 	= НомСтр.КонтактныеЛицаПоставщика;
		НоваяСтр.Покупатель							= НомСтр.Покупатель;
		НоваяСтр.КонтактныеЛицаПокупателя 			= НомСтр.КонтактныеЛицаПокупателя;
		//ДокДоговорЗаявка.ПунктНазначения           	= НомСтр.ПунктНазначения;
		//ДокДоговорЗаявка.ПунктОтгрузки				= НомСтр.ПунктОтгрузки;	
	КонецЦикла;
	
	//ЗаполнитьВесТовара(ДокДоговорЗаявка.Товары,Поставщик);
	
	Попытка 
		ДокДоговорЗаявка.Записать();
	Исключение
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ДокДоговорЗаявка.Ссылка;
	КонецПопытки;
	
	Возврат ДокДоговорЗаявка.Ссылка;
	
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьСозданияДоговораЗаявки(СообщениеОбОшибки)
	
	Отказ = Ложь;	
	//Для Каждого НомСтр Из Объект.ДокументыОтгрузки Цикл 
	//	Если ЗначениеЗаполнено(НомСтр.ДокументОтгрузки)
	//		И ТипЗнч(НомСтр.ДокументОтгрузки) = Тип("ДокументСсылка.ЖБИ_ДоговорЗаявка") Тогда
	//		Отказ = Истина;
	//		СообщениеОбОшибки = "Нельзя создавать несколько Договоров-заявок по одному поставщику";
	//		Возврат Отказ;		
	//	КонецЕсли
	//КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДоговорЗаявка()	
	
	СообщениеОбОшибки 	= "";
	Отказ 				= ПроверитьВозможностьСозданияДоговораЗаявки(СообщениеОбОшибки);
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);
		Возврат;
	КонецЕсли;
	
	МассивДокументов = Новый Массив;
	ЗаполнитьДокументыОтгрузки(МассивДокументов,"ДоговорЗаявка");
	ОбновитьТаблицуСДокументами();
	
КонецПроцедуры

#КонецОбласти

#Область Доверенность

&НаСервереБезКонтекста
Функция НайтиНомерДоверенностиПоДоговоруЗаявки(Поставщик, ФактическиеОтгрузкиСсылка)
	
	НомерДоверенности = "";
	НайденныеСтроки = ФактическиеОтгрузкиСсылка.ДокументыОтгрузки.НайтиСтроки(Новый Структура("Поставщик",Поставщик));
	Для Каждого НомСтр Из НайденныеСтроки Цикл 
		Если НомСтр.ДокументОтгрузки.Статус <> Перечисления.ЖБИ_СтатусРасчетаСтавки.ВРаботе Тогда 
			Продолжить;
		КонецЕсли;
		НомерДоверенности = НомСтр.ДокументОтгрузки.Номер;	
	КонецЦикла;
		
	Возврат НомерДоверенности;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьДокументДоверенностьСервер(Поставщик,ЗаявкаПокупателя,ФактическиеОтгрузкиСсылка, СообщениеОбОшибки)
	
	ДокДоверенность 		= Документы.ДоверенностьВыданная.ПустаяСсылка();
	Отказ 					= Документы.ЖБИ_ФактическиеОтгрузки.ПроверитьЗаполнениеДокумента(ФактическиеОтгрузкиСсылка,СообщениеОбОшибки);
	Если Отказ Тогда 
		Возврат ДокДоверенность.Ссылка;	
	КонецЕсли;
	
	НайденныеСтроки 		= ФактическиеОтгрузкиСсылка.Товары.НайтиСтроки(Новый Структура("Поставщик,ЗаявкаПокупателя",Поставщик,ЗаявкаПокупателя));
	Если НайденныеСтроки.Количество()=0  Тогда 
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки("Не найдены товары поставщика");
		Возврат ДокДоверенность.Ссылка;
	КонецЕсли;
	
	//ОбновитьНумерациюОбъектов(Метаданные.Документы.ДоверенностьВыданная);
	ДокДоверенность 						= Документы.ДоверенностьВыданная.СоздатьДокумент();
	//ДокДоверенность.УстановитьНовыйНомер();
	ДокДоверенность.Организация 			= ФактическиеОтгрузкиСсылка.Организация;
	ДокДоверенность.БанковскийСчет			= ФактическиеОтгрузкиСсылка.БанковскийСчетПлательщика;
	ДокДоверенность.Статус 					= Перечисления.СтатусыДоверенностей.НеВыдана;
	
	//ДоверенностьНомер 						= НайтиНомерДоверенностиПоДоговоруЗаявки(Поставщик, ФактическиеОтгрузкиСсылка);
	//Если ПустаяСтрока(ДоверенностьНомер) Тогда
	//	СообщениеОбОшибки = ПодробноеПредставлениеОшибки("Необходимо сначала сформировать Договор-заявку");
	//	Возврат ДокДоверенность.Ссылка;
	//КонецЕсли;
	
	ДокДоверенность.Дата					= ФактическиеОтгрузкиСсылка.ДатаЗагрузки;	
	//ДокДоверенность.Номер 					= ДоверенностьНомер;
	ДокДоверенность.СрокДействия 			= 1;
	ДокДоверенность.ДатаОкончанияДействия	= ФактическиеОтгрузкиСсылка.ДатаЗагрузки + 60 * 60 * 24;
	ДокДоверенность.Партнер 				= Поставщик;
	ДокДоверенность.Контрагент 				= ЖБИ_ОбщийМодульДокументы.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Поставщик);
	ДокДоверенность.ФизЛицо 				= ФактическиеОтгрузкиСсылка.Водитель.Водитель;
	ДокДоверенность.ТипДоверенности 		= Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров;
	ДокДоверенность.Валюта 					= ФактическиеОтгрузкиСсылка.Валюта;
	ДокДоверенность.Руководитель       		= ФактическиеОтгрузкиСсылка.ПодписантЗаказчик;
	
	СтруктураГлБухгалтер 					= ЖБИ_ОбщийМодульПечать.ПолучитьОтветственноеЛицо(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер, ФактическиеОтгрузкиСсылка.Организация);
	ДокДоверенность.ГлавныйБухгалтер   		= СтруктураГлБухгалтер.ОтветственноеЛицо;
	ДокДоверенность.СуммаДокумента 			= 0;
	
	ДанныеФизЛица = Новый Структура();
	ДанныеФизЛица.Вставить("ВидДокументаФизЛица","");
	ДанныеФизЛица.Вставить("СерияДокументаФизЛица","");
	ДанныеФизЛица.Вставить("НомерДокументаФизЛица","");
	ДанныеФизЛица.Вставить("КемВыданДокументФизлица","");
	ДанныеФизЛица.Вставить("ДатаВыдачиДокументаФизЛица","");
	ДокументУдостоверяющийЛичностьФизлица 	= ЖБИ_ОбщийМодульПечать.ДокументУдостоверяющийЛичностьФизлица(ДокДоверенность.ФизЛицо, ТекущаяДатаСеанса());
	Если ДокументУдостоверяющийЛичностьФизлица.Количество()>0 Тогда 
		ЗаполнитьЗначенияСвойств(ДанныеФизЛица,ДокументУдостоверяющийЛичностьФизлица[0]);
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(ДокДоверенность,ДанныеФизЛица);
	Для Каждого НомСтр Из НайденныеСтроки Цикл
		НоваяСтр = ДокДоверенность.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,НомСтр);
		НоваяСтр.Упаковка 				= НомСтр.Номенклатура.ЕдиницаИзмерения;;
		НоваяСтр.КоличествоУпаковок 	= НомСтр.КоличествоКОтгрузке;
	КонецЦикла;	
	
	ДокДоверенность.Должность			= ФактическиеОтгрузкиСсылка.ДолжностьВодителя;
	
	
	Попытка 
		ДокДоверенность.Записать();
	Исключение
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ДокДоверенность.Ссылка;
	КонецПопытки;
	
	Возврат ДокДоверенность.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьДокументДоверенностьСервер(ДоверенностьСсылка,Поставщик,ЗаявкаПокупателя,ФактическиеОтгрузкиСсылка,СообщениеОбОшибки)
	
	ДокДоверенность 	= Документы.ДоверенностьВыданная.ПустаяСсылка();
	
	НайденныеСтроки 	= ФактическиеОтгрузкиСсылка.Товары.НайтиСтроки(Новый Структура("Поставщик,ЗаявкаПокупателя",Поставщик,ЗаявкаПокупателя));
	Если НайденныеСтроки.Количество()=0  Тогда 
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки("Не найдены товары поставщика");
		Возврат ДокДоверенность.Ссылка;
	КонецЕсли;
	
	ДокДоверенность 		= ДоверенностьСсылка.ПолучитьОбъект();  
	
	ДокДоверенность.ФизЛицо = ФактическиеОтгрузкиСсылка.Водитель.Водитель; 
	ДанныеФизЛица 			= Новый Структура();
	ДанныеФизЛица.Вставить("ВидДокументаФизЛица","");
	ДанныеФизЛица.Вставить("СерияДокументаФизЛица","");
	ДанныеФизЛица.Вставить("НомерДокументаФизЛица","");
	ДанныеФизЛица.Вставить("КемВыданДокументФизлица","");
	ДанныеФизЛица.Вставить("ДатаВыдачиДокументаФизЛица","");
	ДокументУдостоверяющийЛичностьФизлица 	= ЖБИ_ОбщийМодульПечать.ДокументУдостоверяющийЛичностьФизлица(ДокДоверенность.ФизЛицо, ТекущаяДатаСеанса());
	Если ДокументУдостоверяющийЛичностьФизлица.Количество()>0 Тогда 
		ЗаполнитьЗначенияСвойств(ДанныеФизЛица,ДокументУдостоверяющийЛичностьФизлица[0]);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокДоверенность,ДанныеФизЛица);
	
	ДокДоверенность.Товары.Очистить();
	Для Каждого НомСтр Из НайденныеСтроки Цикл
		НоваяСтр = ДокДоверенность.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,НомСтр);
		НоваяСтр.Упаковка 				= НомСтр.Номенклатура.ЕдиницаИзмерения;;
		НоваяСтр.КоличествоУпаковок 	= НомСтр.КоличествоКОтгрузке;
	КонецЦикла;
	
	Попытка 
		ДокДоверенность.Записать();
	Исключение
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ДокДоверенность.Ссылка;
	КонецПопытки;
	
	Возврат ДокДоверенность.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДоверенность()
	
	МассивДокументов = Новый Массив;
	ЗаполнитьДокументыОтгрузки(МассивДокументов,"Доверенность");
	ОбновитьТаблицуСДокументами();
	
КонецПроцедуры

#КонецОбласти

#Область РеализацияТТН

&НаКлиенте
Процедура СоздатьТТН()
	
	МассивДокументов = Новый Массив;
	ЗаполнитьДокументыОтгрузки(МассивДокументов,"ТТН");
	ОбновитьТаблицуСДокументами();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьКомплектДокументовРеализацияТТНСервер(ЗаявкаПокупателя,ФактическиеОтгрузкиСсылка,НомСтр,СообщениеОбОшибки)
	
	ДокТТНПустая 									= Документы.ТранспортнаяНакладная.ПустаяСсылка();
	Отказ 					  						= Документы.ЖБИ_ФактическиеОтгрузки.ПроверитьЗаполнениеДокумента(ФактическиеОтгрузкиСсылка,СообщениеОбОшибки);
	Если Отказ Тогда 
		Возврат ДокТТНПустая.Ссылка;	
	КонецЕсли;
	
	НайденныеСтроки 									= ФактическиеОтгрузкиСсылка.Товары.НайтиСтроки(Новый Структура("ЗаявкаПокупателя",ЗаявкаПокупателя));
	Если НайденныеСтроки.Количество()=0  Тогда 
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки("Не найдены товары поставщика");
		Возврат ДокТТНПустая.Ссылка;
	КонецЕсли;
	
	ДокРеализацияТоваровУслуг 							= Документы.РеализацияТоваровУслуг.СоздатьДокумент();	
	ДокРеализацияТоваровУслуг.Дата 						= ТекущаяДатаСеанса();
	ДокРеализацияТоваровУслуг.УстановитьНовыйНомер();
	ДокРеализацияТоваровУслуг.Заполнить(Неопределено);
	
	//1 Шапка	
	ДокРеализацияТоваровУслуг.Менеджер 					= ФактическиеОтгрузкиСсылка.Менеджер;
	ДокРеализацияТоваровУслуг.Валюта 					= ФактическиеОтгрузкиСсылка.Валюта;
	ДокРеализацияТоваровУслуг.Организация 				= ФактическиеОтгрузкиСсылка.Организация;
	ДокРеализацияТоваровУслуг.БанковскийСчетОрганизации = ФактическиеОтгрузкиСсылка.БанковскийСчетПлательщика;
	ДокРеализацияТоваровУслуг.Подразделение 			= ФактическиеОтгрузкиСсылка.Подразделение;
	ДокРеализацияТоваровУслуг.Склад 					= ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(
	ДокРеализацияТоваровУслуг.Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
	ДокРеализацияТоваровУслуг.Статус 					= Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ДокРеализацияТоваровУслуг);
	
	ДокРеализацияТоваровУслуг.Партнер 					= ЗаявкаПокупателя.Партнер;
	ДокРеализацияТоваровУслуг.Контрагент 				= ЗаявкаПокупателя.Контрагент;
	ДокРеализацияТоваровУслуг.БанковскийСчетКонтрагента	= ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(ДокРеализацияТоваровУслуг.Контрагент);
	ДокРеализацияТоваровУслуг.Договор 					= ЗаявкаПокупателя.Договор;
	ДокРеализацияТоваровУслуг.ХозяйственнаяОперация 	= ЗаявкаПокупателя.Договор.ХозяйственнаяОперация;	
	Если НЕ ЗначениеЗаполнено(ДокРеализацияТоваровУслуг.ХозяйственнаяОперация) Тогда
		ДокРеализацияТоваровУслуг.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	КонецЕсли;	
	ДокРеализацияТоваровУслуг.ПорядокРасчетов 			= Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;	
	ДокРеализацияТоваровУслуг.ИдентификаторПлатежа 		= ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ДокРеализацияТоваровУслуг);
	
	ПараметрыЗаполнения 								= Документы.РеализацияТоваровУслуг.ПараметрыЗаполненияНалогообложенияНДСПродажи(ДокРеализацияТоваровУслуг);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ДокРеализацияТоваровУслуг.НалогообложениеНДС,	ПараметрыЗаполнения);
	
	ДокРеализацияТоваровУслуг.Комментарий = "Создан на основании фактической отгрузки № "+ФактическиеОтгрузкиСсылка.Номер;
	
	//2 Адрес доставки	
	АдресДоставки = ЗаявкаПокупателя.ПунктНазначения.Адрес;
	Если НЕ ЗначениеЗаполнено(АдресДоставки) И ЗначениеЗаполнено(ДокРеализацияТоваровУслуг.Партнер) Тогда
		АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(ДокРеализацияТоваровУслуг.Партнер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДоставки) Тогда
		ДокРеализацияТоваровУслуг.АдресДоставки = АдресДоставки;
		ОбщегоНазначенияУТВызовСервера.ЗаполнитьЗначенияПолейКИПоПредставлению(АдресДоставки,
		ЗаявкаПокупателя.ПунктНазначения.АдресЗначенияПолей);
	Иначе
		ДокРеализацияТоваровУслуг.АдресДоставки = НСтр("ru = '<адрес не указан/>'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;	
	ДокРеализацияТоваровУслуг.СпособДоставки 			= Перечисления.СпособыДоставки.СиламиПеревозчика;
	ДокРеализацияТоваровУслуг.ПеревозчикПартнер        	= ФактическиеОтгрузкиСсылка.Перевозчик;
	ДокРеализацияТоваровУслуг.ПорядокОплаты  			= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	ДокРеализацияТоваровУслуг.ЦенаВключаетНДС 			= Истина;
	
	//3 Табличная часть
	ТабличнаяЧастьТовары = ДокРеализацияТоваровУслуг.Товары;
	ТабличнаяЧастьТовары.Очистить();
	
	// Выполняем необходимые операции для дозаполнения/проверки для строки ТЧ.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
	Новый Структура("НалогообложениеНДС, Дата", ДокРеализацияТоваровУслуг.НалогообложениеНДС, ДокРеализацияТоваровУслуг.Дата));			
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокРеализацияТоваровУслуг);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	КэшированныеЗначения 							= ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	НайденныеСтроки 								= ФактическиеОтгрузкиСсылка.Товары.НайтиСтроки(Новый Структура("Покупатель,Поставщик,ПунктНазначения",ЗаявкаПокупателя.Партнер,НомСтр.Поставщик,НомСтр.ПунктНазначения));
	Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
		СтрокаДокумента 							= ТабличнаяЧастьТовары.Добавить();
		//ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТовара);
		СтрокаДокумента.КодСтроки					= СтрокаТовара.КодСтроки;
		СтрокаДокумента.Номенклатура				= СтрокаТовара.Номенклатура;
		СтрокаДокумента.ЖБИ_НоменклатураПоставщика	= СтрокаТовара.НоменклатураПоставщика;
		СтрокаДокумента.Количество					= СтрокаТовара.КоличествоКОтгрузке;
		СтрокаДокумента.КоличествоУпаковок			= СтрокаТовара.КоличествоКОтгрузке;
		СтрокаДокумента.Цена						= СтрокаТовара.Цена;	
		СтрокаДокумента.Склад 						= Справочники.Склады.СкладПоУмолчанию();	
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаДокумента, СтруктураДействий, КэшированныеЗначения);
		
		ПунктОтгрузки 								=  СтрокаТовара.ПунктОтгрузки;
		ПунктНазначения 							=  СтрокаТовара.ПунктНазначения;
		
	КонецЦикла;
	
	ДокРеализацияТоваровУслуг.ЗаполнитьЭтапыГрафикаОплаты();	
	Попытка 
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		ДокРеализацияТоваровУслуг.Записать(РежимЗаписи);
	Исключение
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ДокТТНПустая.Ссылка;
	КонецПопытки;
	
	//ТТН
	МассивОбъектов 	= Новый Массив;
	МассивОбъектов.Добавить(ДокРеализацияТоваровУслуг.Ссылка);
	СозданныеТТН 	= Документы.ТранспортнаяНакладная.СоздатьТранспортныеНакладные(МассивОбъектов);
	Если СозданныеТТН.Количество() = 0 Тогда
		Возврат ДокТТНПустая.Ссылка;			
	КонецЕсли;
	
	ДокТТН = СозданныеТТН[0].ПолучитьОбъект();
	ДокТТН.АдресДоставки 				= ПунктНазначения.Адрес;
	ДокТТН.АдресДоставкиЗначенияПолей 	= ПунктНазначения.АдресЗначенияПолей;
	ДокТТН.АдресПогрузки 				= ПунктОтгрузки.Адрес;
	ДокТТН.АдресПогрузкиЗначенияПолей 	= ПунктОтгрузки.АдресЗначенияПолей;	
	
	ДокТТН.Водитель						= ФактическиеОтгрузкиСсылка.Водитель.Наименование;
	
	Попытка 
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		ДокТТН.Записать(РежимЗаписи);
	Исключение
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ДокТТНПустая.Ссылка;
	КонецПопытки;
	
	Возврат СозданныеТТН[0];
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьКомплектДокументовРеализацияТТНСервер(ДокТТН,ЗаявкаПокупателя,ФактическиеОтгрузкиСсылка,НомСтр,СообщениеОбОшибки)
	
	ДокРеализацияТоваровУслугСсылка					= ДокТТН.ДокументыОснования[0].ДокументОснование;
	
	ДокРеализацияТоваровУслуг 						= Документы.РеализацияТоваровУслуг.ПустаяСсылка();	
	НайденныеСтроки 								= ФактическиеОтгрузкиСсылка.Товары.НайтиСтроки(Новый Структура("ЗаявкаПокупателя",ЗаявкаПокупателя));
	Если НайденныеСтроки.Количество()=0  Тогда 
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки("Не найдены товары поставщика");
		Возврат ДокТТН;
	КонецЕсли;
	
	ДокРеализацияТоваровУслуг 						= ДокРеализацияТоваровУслугСсылка.ПолучитьОбъект();
	ТабличнаяЧастьТовары 							= ДокРеализацияТоваровУслуг.Товары;
	ТабличнаяЧастьТовары.Очистить();
	
	// Выполняем необходимые операции для дозаполнения/проверки для строки ТЧ.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
	Новый Структура("НалогообложениеНДС, Дата", ДокРеализацияТоваровУслуг.НалогообложениеНДС, ДокРеализацияТоваровУслуг.Дата));			
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокРеализацияТоваровУслуг);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	КэшированныеЗначения 							= ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	НайденныеСтроки 								= ФактическиеОтгрузкиСсылка.Товары.НайтиСтроки(Новый Структура("Покупатель,Поставщик,ПунктНазначения",ЗаявкаПокупателя.Партнер,НомСтр.Поставщик,НомСтр.ПунктНазначения));
	Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
		СтрокаДокумента 							= ТабличнаяЧастьТовары.Добавить();
		//ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТовара);
		СтрокаДокумента.КодСтроки					= СтрокаТовара.КодСтроки;
		СтрокаДокумента.Номенклатура				= СтрокаТовара.Номенклатура;
		СтрокаДокумента.ЖБИ_НоменклатураПоставщика	= СтрокаТовара.НоменклатураПоставщика;
		СтрокаДокумента.Количество					= СтрокаТовара.КоличествоКОтгрузке;
		СтрокаДокумента.КоличествоУпаковок			= СтрокаТовара.КоличествоКОтгрузке;
		СтрокаДокумента.Цена						= СтрокаТовара.Цена;	
		СтрокаДокумента.Склад 						= Справочники.Склады.СкладПоУмолчанию();	
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаДокумента, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	Попытка 
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
		ДокРеализацияТоваровУслуг.Записать(РежимЗаписи);
	Исключение
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат ДокТТН;
	КонецПопытки;
	
	//ТТН
	
	Возврат ДокТТН;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ИзменитьДокумент()
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ДокументыОтгрузки");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные.ДокументОтгрузки) = Тип("ДокументСсылка.ЖБИ_ДоговорЗаявка") 
		И ЗначениеЗаполнено(ТекДанные.ДокументОтгрузки) Тогда
		КомандаИзменитьДоговорЗаявка("");
	ИначеЕсли ТипЗнч(ТекДанные.ДокументОтгрузки) = Тип("ДокументСсылка.ДоверенностьВыданная")   
		И ЗначениеЗаполнено(ТекДанные.ДокументОтгрузки) Тогда
		КомандаИзменитьДоверенность("");
	ИначеЕсли ТипЗнч(ТекДанные.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг")   
		И ЗначениеЗаполнено(ТекДанные.ДокументОтгрузки) Тогда
		Возврат;
		КомандаИзменитьРеализацияТоваровУслуг("");
	ИначеЕсли ТипЗнч(ТекДанные.ДокументОтгрузки) = Тип("ДокументСсылка.ТранспортнаяНакладная")   
		И ЗначениеЗаполнено(ТекДанные.ДокументОтгрузки) Тогда
		КомандаИзменитьТранспортнаяНакладная("");
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьВесТовара(ТЧТовары,Поставщик)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЧТовары",ТЧТовары);
	Запрос.УстановитьПараметр("Поставщик",Поставщик);
	Запрос.Текст = "ВЫБРАТЬ
					|	*
					|ПОМЕСТИТЬ ТаблИтог
					|ИЗ
					|	&ТЧТовары КАК ТЧТовары
					|;
					|ВЫБРАТЬ
					|	ТаблИтог.КодСтроки КАК КодСтроки,
					|	ТаблИтог.Номенклатура КАК Номенклатура,
					|	ТаблИтог.НоменклатураПоставщика КАК НоменклатураПоставщика,
					|	ТаблИтог.Количество КАК Количество,
					|	ТаблИтог.НормаАвто КАК НормаАвто,
					|	ЕСТЬNULL(ЖБИ_НоменклатураПоставщиков.Вес,0) КАК Вес,
					|	ЕСТЬNULL(ЖБИ_НоменклатураПоставщиков.Вес,0) * ТаблИтог.Количество КАК ОбщийВес 
					|ИЗ
					|	ТаблИтог КАК ТаблИтог
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖБИ_НоменклатураПоставщиков КАК ЖБИ_НоменклатураПоставщиков
					|		ПО ТаблИтог.НоменклатураПоставщика = ЖБИ_НоменклатураПоставщиков.НоменклатураПоставщика
					|		И &Поставщик = ЖБИ_НоменклатураПоставщиков.Партнер";
						
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	ТЧТовары.Загрузить(РезультатЗапроса);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыОтгрузки(МассивДокументов, ИмяОбъекта)	
	
	СообщениеОбОшибки = "";
	ТаблПоставщики = Объект.Товары.Выгрузить(,"Поставщик,Покупатель,ЗаявкаПокупателя,ПунктНазначения");
	ТаблПоставщики.Свернуть("Поставщик,Покупатель,ЗаявкаПокупателя,ПунктНазначения");
	
	//ТаблЗаявок = Объект.Товары.Выгрузить(,"ЗаявкаПокупателя");
	//ТаблЗаявок.Свернуть("ЗаявкаПокупателя");
	//КолЗаявок  = ТаблЗаявок.Количество();
	
	МассивДок 		= Новый Массив;
	НовыйДокумент 	= Ложь;
	ПрерватьЗагрузку= Ложь;
	НачатьТранзакцию();
	//НомЗаявки = 1;
	НомерДокумента  = 1;
	Для Каждого НомСтр Из ТаблПоставщики Цикл		
		Если ИмяОбъекта = "ДоговорЗаявка" Тогда
			//НайденныеСтроки = Объект.ДокументыОтгрузки.НайтиСтроки(Новый Структура("Поставщик,ЗаявкаПокупателя,Статус",НомСтр.Поставщик,НомСтр.ЗаявкаПокупателя,"В работе"));
			//КолЗаявок 		= 1;
			НайденныеСтроки = Объект.ДокументыОтгрузки.НайтиСтроки(Новый Структура("Статус","В работе"));
			Если НайденныеСтроки.Количество() = 0 Тогда
				ДокументОтгрузки 	= СоздатьДокументДоговорЗаявкиСервер(Объект.Ссылка,СообщениеОбОшибки);
				НовыйДокумент 		= Истина;
				//ПрерватьЗагрузку	= ?(НомЗаявки = КолЗаявок, Истина, Ложь);
				ПрерватьЗагрузку    = Истина;
			Иначе 
				Для Каждого Ном Из НайденныеСтроки Цикл 
					Если ТипЗнч(Ном.ДокументОтгрузки) <> Тип("ДокументСсылка.ЖБИ_ДоговорЗаявка") Тогда
						Продолжить;
					КонецЕсли;
					ДокументОтгрузки = ОбновитьДокументДоговорЗаявкиСервер(Ном.ДокументОтгрузки,Объект.Ссылка,СообщениеОбОшибки);
					//ПрерватьЗагрузку	= ?(НомЗаявки = КолЗаявок, Истина, Ложь);
					ПрерватьЗагрузку	= Истина;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ИмяОбъекта = "Доверенность" Тогда
			НайденныеСтроки = Объект.ДокументыОтгрузки.НайтиСтроки(Новый Структура("Поставщик,ЗаявкаПокупателя,Статус",НомСтр.Поставщик,НомСтр.ЗаявкаПокупателя,"Не выдана"));
			Если НайденныеСтроки.Количество() = 0 Тогда
				ДокументОтгрузки 	= СоздатьДокументДоверенностьСервер(НомСтр.Поставщик,НомСтр.ЗаявкаПокупателя,Объект.Ссылка,СообщениеОбОшибки);
				НовыйДокумент 		= Истина;
			Иначе 
				Для Каждого Ном Из НайденныеСтроки Цикл 
					Если ТипЗнч(Ном.ДокументОтгрузки) <> Тип("ДокументСсылка.ДоверенностьВыданная") Тогда
						Продолжить;
					КонецЕсли;
					ДокументОтгрузки = ОбновитьДокументДоверенностьСервер(Ном.ДокументОтгрузки,НомСтр.Поставщик,НомСтр.ЗаявкаПокупателя,Объект.Ссылка,СообщениеОбОшибки);
				КонецЦикла;		
			КонецЕсли;
		ИначеЕсли ИмяОбъекта = "ТТН" Тогда 
			//НайденныеСтроки = Объект.ДокументыОтгрузки.НайтиСтроки(Новый Структура("ЗаявкаПокупателя,Статус",НомСтр.ЗаявкаПокупателя,"К предоплате"));
			НайденныеСтроки = Объект.ДокументыОтгрузки.НайтиСтроки(Новый Структура("ЗаявкаПокупателя,Поставщик,Статус",НомСтр.ЗаявкаПокупателя,НомСтр.Поставщик,""));
			Если НайденныеСтроки.Количество() = 0 Тогда
				ДокументОтгрузки 	= СоздатьКомплектДокументовРеализацияТТНСервер(НомСтр.ЗаявкаПокупателя,Объект.Ссылка,НомСтр,СообщениеОбОшибки);
				НовыйДокумент 		= Истина;
				//ПрерватьЗагрузку	= ?(НомЗаявки = КолЗаявок, Истина, Ложь);
			Иначе 
				Для Каждого Ном Из НайденныеСтроки Цикл 
					Если ТипЗнч(Ном.ДокументОтгрузки) <> Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда
						Продолжить;
					КонецЕсли;
					ДокументОтгрузки = ОбновитьКомплектДокументовРеализацияТТНСервер(Ном.ДокументОтгрузки,НомСтр.ЗаявкаПокупателя,Объект.Ссылка,НомСтр,СообщениеОбОшибки);
					//ПрерватьЗагрузку	= ?(НомЗаявки = КолЗаявок, Истина, Ложь);
				КонецЦикла;		
			КонецЕсли;
		Иначе 
			Возврат;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СообщениеОбОшибки) Тогда 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);
			МассивДок.Очистить();
			Возврат;
			Прервать;
		КонецЕсли;
		
		МассивДок.Добавить(ДокументОтгрузки);		
		Если НовыйДокумент Тогда 
			Если ДокументОтгрузки.Пустая() Тогда 
				Продолжить;
			КонецЕсли;
			НоваяСтр 					= Объект.ДокументыОтгрузки.Добавить();
			НоваяСтр.Дата 				= ТекущаяДатаСеанса();
			НоваяСтр.ДокументОтгрузки 	= ДокументОтгрузки;
			НоваяСтр.Поставщик 			= НомСтр.Поставщик;
			НоваяСтр.ЗаявкаПокупателя 	= НомСтр.ЗаявкаПокупателя;
			НоваяСтр.Статус				= ?(ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ТранспортнаяНакладная"),"",ДокументОтгрузки.Статус);
			НоваяСтр.НомерДокумента		= НомерДокумента;
			НомерДокумента 				= НомерДокумента + 1;
		Иначе 
			НайденныеСтроки = Объект.ДокументыОтгрузки.НайтиСтроки(Новый Структура("ДокументОтгрузки",ДокументОтгрузки));
			Если НайденныеСтроки.Количество()>0 Тогда 
				НайденныеСтроки[0].НомерДокумента = НомерДокумента;	
			КонецЕсли;
			НомерДокумента = НомерДокумента + 1;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сформирован/обновлен документ: "+ДокументОтгрузки);
		НовыйДокумент = Ложь;
		
		Если ПрерватьЗагрузку Тогда 
			Прервать;
		КонецЕсли;
		
		
		//НомЗаявки = НомЗаявки + 1;
	
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Записать();
	
	МассивДокументов = СвернутьМассив(МассивДок,"Ссылка");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПечатныеФормыДоговорЗаявка(МассивПечатныхФорм,ПараметрыПечати,КоллекцияПечатныхФорм, Отгружен)
	
	МассивДокументов = Новый Массив;			
	Если Отгружен Тогда 
		Для Каждого НомСтр Из Объект.ДокументыОтгрузки Цикл
			Если ТипЗнч(НомСтр.ДокументОтгрузки) <> Тип("ДокументСсылка.ЖБИ_ДоговорЗаявка") Тогда 
				Продолжить;
			КонецЕсли;
			Если НомСтр.ДокументОтгрузки.Статус <> Перечисления.ЖБИ_СтатусРасчетаСтавки.ВРаботе Тогда 
				Продолжить;
			КонецЕсли;
			Если НомСтр.ДокументОтгрузки.ПометкаУдаления Тогда 
				Продолжить;
			КонецЕсли;
			МассивОбъектов 	= Новый Массив;
			МассивОбъектов.Добавить(НомСтр.ДокументОтгрузки);
			Документы.ЖБИ_ДоговорЗаявка.ЖБИ_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, Новый СписокЗначений, Новый Структура, МассивПечатныхФорм);	
		КонецЦикла;
	Иначе 
		ЗаполнитьДокументыОтгрузки(МассивДокументов,"ДоговорЗаявка");
		Для Каждого НомСтр Из МассивДокументов Цикл
			МассивОбъектов 	= Новый Массив;
			МассивОбъектов.Добавить(НомСтр);
			Документы.ЖБИ_ДоговорЗаявка.ЖБИ_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, Новый СписокЗначений, Новый Структура, МассивПечатныхФорм);	
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьПечатныеФормыДоверенность(МассивПечатныхФорм,ПараметрыПечати,КоллекцияПечатныхФорм, Отгружен)
	
	МассивДокументов = Новый Массив;
	Если Отгружен Тогда 
		Для Каждого НомСтр Из Объект.ДокументыОтгрузки Цикл
			Если ТипЗнч(НомСтр.ДокументОтгрузки) <> Тип("ДокументСсылка.ДоверенностьВыданная") Тогда 
				Продолжить;
			КонецЕсли;
			Если НомСтр.ДокументОтгрузки.Статус <> Перечисления.СтатусыДоверенностей.НеВыдана Тогда 
				Продолжить;
			КонецЕсли;
			Если НомСтр.ДокументОтгрузки.ПометкаУдаления Тогда 
				Продолжить;
			КонецЕсли;
			МассивОбъектов 	= Новый Массив;
			МассивОбъектов.Добавить(НомСтр.ДокументОтгрузки);
			Документы.ДоверенностьВыданная.ЖБИ_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, Новый СписокЗначений, Новый Структура);
			МассивПечатныхФорм.Добавить(КоллекцияПечатныхФорм[0].ТабличныйДокумент);
		КонецЦикла;
	Иначе
		ЗаполнитьДокументыОтгрузки(МассивДокументов,"Доверенность");
		Для Каждого НомСтр Из МассивДокументов Цикл
			МассивОбъектов 	= Новый Массив;
			МассивОбъектов.Добавить(НомСтр);
			Документы.ДоверенностьВыданная.ЖБИ_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, Новый СписокЗначений, Новый Структура);
			МассивПечатныхФорм.Добавить(КоллекцияПечатныхФорм[0].ТабличныйДокумент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПечатныеФормыТТН(МассивПечатныхФорм,ПараметрыПечати,КоллекцияПечатныхФорм, Отгружен)
	
	МассивДокументов = Новый Массив;
	Если Отгружен Тогда 
		ПараметрыВывода 	= Новый Структура("ПараметрыОтправки",Новый Структура("Получатель,Тема",Неопределено,""));
		Для Каждого НомСтр Из Объект.ДокументыОтгрузки Цикл
			Если ТипЗнч(НомСтр.ДокументОтгрузки) <> Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда 
				Продолжить;
			КонецЕсли;
			Если НомСтр.ДокументОтгрузки.ПометкаУдаления Тогда 
				Продолжить;
			КонецЕсли;
			МассивОбъектов 	= Новый Массив;
			МассивОбъектов.Добавить(НомСтр.ДокументОтгрузки);
			Документы.ТранспортнаяНакладная.ЖБИ_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, Новый СписокЗначений, Новый Структура, МассивПечатныхФорм);
		КонецЦикла;
	Иначе
		ЗаполнитьДокументыОтгрузки(МассивДокументов,"ТТН");
		ПараметрыВывода 	= Новый Структура("ПараметрыОтправки",Новый Структура("Получатель,Тема",Неопределено,""));
		Для Каждого НомСтр Из МассивДокументов Цикл
			МассивОбъектов 	= Новый Массив;
			МассивОбъектов.Добавить(НомСтр);
			Документы.ТранспортнаяНакладная.ЖБИ_Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, Новый СписокЗначений, Новый Структура, МассивПечатныхФорм);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	 
	Если Объект.Ссылка.Пустая() Тогда 
		ОбщегоНазначенияКлиент.СообщитьПользователю("Необходимо записать документ");
		Возврат;
	КонецЕсли;
 
	ИмяФормыПечати 		= СтрЗаменить(Команда.Имя, "Печать_", "");	
	МассивПечатныхФорм 	= ПечатьСерверный(ИмяФормыПечати,Объект.Ссылка);
	Если ЗначениеЗаполнено(МассивПечатныхФорм) Тогда
		ЖБИ_ОбщийМодульКлиентСервер.СформироватьПечатнуюФорму(ЭтаФорма,МассивПечатныхФорм);
	КонецЕсли;
	
	ОбновитьТаблицуСДокументами();
	
КонецПроцедуры

&НаСервере
Функция ПечатьСерверный(ИмяФормыПечати, ФактическиеОтгрузки)
	
	МассивПечатныхФорм = Новый Массив;
	
	КоллекцияПечатныхФорм 	= Новый ТаблицаЗначений;
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("ТабличныйДокумент");
	КоллекцияПечатныхФорм.Колонки.Добавить("СинонимМакета");
	КоллекцияПечатныхФорм.Колонки.Добавить("Картинка");	
	КоллекцияПечатныхФорм.Колонки.Добавить("ПолныйПутьКМакету");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяФайлаПечатнойФормы");
	КоллекцияПечатныхФорм.Колонки.Добавить("ИмяВРЕГ");
	
	ПараметрыПечати 		= Новый Структура("ДополнитьКомплектВнешнимиПечатнымиФормами",Ложь);
	МассивОбъектов			= Новый Массив;	
	Если ИмяФормыПечати = "ЖБИ_ДоговорЗаявка" Тогда
		НоваяСтр 				= КоллекцияПечатныхФорм.Добавить();
		НоваяСтр.ИмяВРЕГ		= ВРЕГ(ИмяФормыПечати);
		НоваяСтр.ИмяМакета      = ИмяФормыПечати;
		СформироватьПечатныеФормыДоговорЗаявка(МассивПечатныхФорм,ПараметрыПечати,КоллекцияПечатныхФорм, Объект.Отгружено);
	ИначеЕсли ИмяФормыПечати = "ЖБИ_Доверенность" Тогда
		НоваяСтр 				= КоллекцияПечатныхФорм.Добавить();
		НоваяСтр.ИмяВРЕГ		= ВРЕГ("ЖБИ_Доверенность");
		НоваяСтр.ИмяМакета      = ИмяФормыПечати;		
		ПараметрыПечати.Вставить("Тип","ДоверенностьМ2");		
		СформироватьПечатныеФормыДоверенность(МассивПечатныхФорм,ПараметрыПечати,КоллекцияПечатныхФорм, Объект.Отгружено);
	ИначеЕсли ИмяФормыПечати = "ЖБИ_ТТН" Тогда
		НоваяСтр 				= КоллекцияПечатныхФорм.Добавить();
		НоваяСтр.ИмяВРЕГ		= ВРЕГ("ЖБИ_ТТН");
		НоваяСтр.ИмяМакета      = "ЖБИ_ТТН";				
		СформироватьПечатныеФормыТТН(МассивПечатныхФорм,ПараметрыПечати,КоллекцияПечатныхФорм, Объект.Отгружено);
	Иначе
		НоваяСтр 				= КоллекцияПечатныхФорм.Добавить();
		НоваяСтр.ИмяВРЕГ		= ВРЕГ(ИмяФормыПечати);
		НоваяСтр.ИмяМакета      = ИмяФормыПечати;
		МассивОбъектов.Добавить(ФактическиеОтгрузки);
		Документы.ЖБИ_ФактическиеОтгрузки.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, Новый СписокЗначений, Новый Структура, МассивПечатныхФорм);
	КонецЕсли;
		
	Возврат МассивПечатныхФорм;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварФактическиеОтгрузкиСервер(ТоварыТЗ)
	
	Для Каждого НомСтр Из ТоварыТЗ Цикл
		//проверим, есть ли одинаовые строки в таблице, если да, то свернем
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("КодСтроки,Номенклатура,ЗаявкаПокупателя,ПередачаВОтгрузку",НомСтр.КодСтроки,НомСтр.Номенклатура,НомСтр.ЗаявкаПокупателя,НомСтр.ПередачаВОтгрузку));
		Если НайденныеСтроки.Количество()>0 Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтр 						= Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,НомСтр);
		НоваяСтр.Количество 			= НомСтр.План;
		НоваяСтр.Контрагент 			= ЖБИ_ОбщийМодульДокументы.ЗаполнитьКонтрагентаПартнераПоУмолчанию(НоваяСтр.Поставщик);
		НоваяСтр.МенеджерОС 			= НомСтр.Менеджер;
		НоваяСтр.ДатаОтгрузки	 		= ТекущаяДатаСеанса();
		НоваяСтр.КоличествоКОтгрузке 	= 0;
		Вес 							= ЖБИ_ОбщегоНазначенияСервер.ЗаполнитьВесТовара(НомСтр.Поставщик,НомСтр.НоменклатураПоставщика);
		НоваяСтр.Вес 					= Вес;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПолеФакт()	
	ОбновитьПолеФакт();		
КонецПроцедуры

// Выполняет поиск действующего договора с контрагентом по заданным реквизитам.
// Если найден один действующий договор, возвращает ссылку на него, в противном случае - пустую ссылку.
//
// Параметры:
//   ТекущийДоговор        - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на текущий договор/
//   Партнер               - СправочникСсылка.Партнеры - Деловой партнер предприятия, которому осуществляются продажи.
//   Контрагент            - СправочникСсылка.Контрагенты - Контрагент, с которым заключен договор.
//   Организация           - СправочникСсылка.Организации - Организация предприятия, от имени которой заключен договор.
//   ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации, Массив - Одна или несколько хозяйственных
//                                                                              операций (тип договора).
//   ВалютаВзаиморасчетов  - СправочникСсылка.Валюты - Валюта взаиморасчетов с партнером по договору.
//   Соглашение            - СправочникСсылка.СоглашенияСКлиентами - Если не задан порядок, он будет получен из
//                                                                   соглашения с клиентом.
// 
// Возвращаемое значение:
//   СправочникСсылка.ДоговорыКонтрагентов  - договор контрагента по умолчанию.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(
	Объект,
	ХозяйственныеОперации,
	ВалютаВзаиморасчетов = Неопределено,
	НаправлениеДеятельности = Неопределено
	)
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Объект.Перевозчик, СписокПартнеров);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И ДоговорыКонтрагентов.Ссылка = &ТекущийДоговор
	|	И ((НЕ &ОтборНаправлениеДеятельности)
	|			ИЛИ ДоговорыКонтрагентов.НаправлениеДеятельности = &НаправлениеДеятельности);
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И ((НЕ &ОтборНаправлениеДеятельности)
	|			ИЛИ ДоговорыКонтрагентов.НаправлениеДеятельности = &НаправлениеДеятельности)
	|");
	Запрос.УстановитьПараметр("ТекущийДоговор", Объект.Договор);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ЗначениеЗаполнено(ХозяйственныеОперации));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ОтборВалютаВзаиморасчетов", ЗначениеЗаполнено(ВалютаВзаиморасчетов));
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОтборНаправлениеДеятельности", НаправлениеДеятельности <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности"));
	Запрос.УстановитьПараметр("НаправлениеДеятельности",НаправлениеДеятельности);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Если Не МассивРезультатов[0].Пустой() Тогда
		
		Выборка = МассивРезультатов[0].Выбрать();
		Выборка.Следующий();
		
		ДоговорПоУмолчанию = Выборка.Ссылка;
		
	Иначе
		Выборка = МассивРезультатов[1].Выбрать();
	
		Если Не Выборка.Следующий() Тогда
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИначеЕсли Выборка.Количество() = 1 Тогда
			ДоговорПоУмолчанию = Выборка.Ссылка;
		Иначе
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервере
Процедура ОбновитьПолеФакт()
	
	ТаблТовары 	= Объект.Товары.Выгрузить();	
	Запрос 		= Новый Запрос;
	Запрос.УстановитьПараметр("ТаблТовары",ТаблТовары);
	Запрос.УстановитьПараметр("НаДату",КонецДня(Объект.Дата));
	Запрос.Текст = "ВЫБРАТЬ
				   |	ТаблТовары.Поставщик КАК Поставщик,
	               |	ТаблТовары.ЗаявкаПокупателя КАК ЗаявкаПокупателя,
	               |	ТаблТовары.ПередачаВОтгрузку КАК ПередачаВОтгрузку,
	               |	ТаблТовары.Номенклатура КАК Номенклатура,
	               |	ТаблТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	               |	ТаблТовары.КодСтроки КАК КодСтроки
				   |ПОМЕСТИТЬ ТаблФактическиеОтгрузки
				   |ИЗ
				   |	&ТаблТовары КАК ТаблТовары
				   |;
				   |ВЫБРАТЬ
	               |	ЕСТЬNULL(ЖБИ_ПередачаВОтгрузкуОстатки.ГрузитсяОстаток, 0) КАК Грузится,
				   |	ЕСТЬNULL(ЖБИ_ПередачаВОтгрузкуОстатки.ОтгруженоОстаток,0) КАК Отгружено,
	               |	ЖБИ_ФактическиеОтгрузки.Поставщик КАК Поставщик,
	               |	ЖБИ_ФактическиеОтгрузки.ЗаявкаПокупателя КАК ЗаявкаПокупателя,
	               |	ЖБИ_ФактическиеОтгрузки.ПередачаВОтгрузку КАК ПередачаВОтгрузку,
	               |	ЖБИ_ФактическиеОтгрузки.Номенклатура КАК Номенклатура,
	               |	ЖБИ_ФактическиеОтгрузки.НоменклатураПоставщика КАК НоменклатураПоставщика,
	               |	ЖБИ_ФактическиеОтгрузки.КодСтроки КАК КодСтроки
	               |ИЗ
	               |	ТаблФактическиеОтгрузки КАК ЖБИ_ФактическиеОтгрузки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЖБИ_ПередачаВОтгрузку.Остатки(&НаДату, ) КАК ЖБИ_ПередачаВОтгрузкуОстатки
	               |		ПО ЖБИ_ФактическиеОтгрузки.ЗаявкаПокупателя = ЖБИ_ПередачаВОтгрузкуОстатки.ЗаявкаПокупателя
	               |			И ЖБИ_ФактическиеОтгрузки.ПередачаВОтгрузку = ЖБИ_ПередачаВОтгрузкуОстатки.ПередачаВОтгрузку
	               |			И ЖБИ_ФактическиеОтгрузки.Поставщик = ЖБИ_ПередачаВОтгрузкуОстатки.Поставщик
	               |			И ЖБИ_ФактическиеОтгрузки.Номенклатура = ЖБИ_ПередачаВОтгрузкуОстатки.Номенклатура
	               |			И ЖБИ_ФактическиеОтгрузки.НоменклатураПоставщика = ЖБИ_ПередачаВОтгрузкуОстатки.НоменклатураПоставщика
	               |			И ЖБИ_ФактическиеОтгрузки.КодСтроки = ЖБИ_ПередачаВОтгрузкуОстатки.КодСтроки
	               |ГДЕ
	               |	ЖБИ_ПередачаВОтгрузкуОстатки.ГрузитсяОстаток > 0
				   |	 ИЛИ ЖБИ_ПередачаВОтгрузкуОстатки.ОтгруженоОстаток > 0";
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();	
	Для Каждого ОформлениеСтроки Из Объект.Товары Цикл
		НайденныеСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("ЗаявкаПокупателя,ПередачаВОтгрузку,Поставщик,Номенклатура,НоменклатураПоставщика,КодСтроки",ОформлениеСтроки.ЗаявкаПокупателя,ОформлениеСтроки.ПередачаВОтгрузку,ОформлениеСтроки.Поставщик,ОформлениеСтроки.Номенклатура,ОформлениеСтроки.НоменклатураПоставщика,ОформлениеСтроки.КодСтроки));	
		Если НайденныеСтроки.Количество()>0 Тогда
			//ОформлениеСтроки.Факт 		= НайденныеСтроки[0].Грузится;
			Грузится = НайденныеСтроки[0].Грузится;
			Отгружено= НайденныеСтроки[0].Отгружено;
			Если Объект.Проведен
				И Объект.Отгружено Тогда
				ОформлениеСтроки.Остаток = ОформлениеСтроки.Количество - Грузится - Отгружено;
			Иначе 
				ОформлениеСтроки.Остаток = ОформлениеСтроки.Количество - Грузится - Отгружено;
			КонецЕсли;
		Иначе 
			ОформлениеСтроки.Остаток = ОформлениеСтроки.Количество - ОформлениеСтроки.КоличествоКОтгрузке;
		КонецЕсли;		
		ОформлениеСтроки.АМ = ?(ОформлениеСтроки.НормаАвто = 0,0,ОформлениеСтроки.КоличествоКОтгрузке/ОформлениеСтроки.НормаАвто);		
	КонецЦикла;	
	
	СуммаАМ = Объект.Товары.Итог("АМ");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБанковскийСчетПлательщика()
	Объект.БанковскийСчетПеревозка = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(Объект.Контрагент);	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодписанта()
	
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Перевозчик", Объект.Перевозчик);
	//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//               |	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
	//               |ИЗ
	//               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	//               |ГДЕ	
	//               |	КонтактныеЛицаПартнеров.Владелец = &Перевозчик
	//			   |	И КонтактныеЛицаПартнеров.ЖБИ_Главный";
	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//Если РезультатЗапроса.Следующий() Тогда
	//	Объект.ПодписантПеревозчик = РезультатЗапроса.Ссылка;
	//Иначе 
	//	Объект.ПодписантПеревозчик = "";
	//КонецЕсли;
	
	Объект.ПодписантПеревозчик 						= Объект.Договор.ЖБИ_ПодписантКонтрагент;
	Объект.ПодписантДолжностьПеревозчик				= Объект.ПодписантПеревозчик.ЖБИ_Должность;
	Объект.ПодписантОснованиеСоСтороныПеревозчика	= Объект.Договор.ЖБИ_ОснованиеСоСтороныКонтрагента;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговор()	
	
	ХозяйственнаяОперация 	= Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Объект.Договор 			= ПолучитьДоговорПоУмолчанию(Объект, 
															Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика, 
															Объект.Валюта);	
КонецПроцедуры

&НаСервере
Процедура ПеревозчикПриИзмененииСервер()
	
	Объект.Контрагент = ЖБИ_ОбщийМодульДокументы.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Перевозчик);	
	ЗаполнитьДоговор();
	УстановитьПодписанта();
	УстановитьБанковскийСчетПлательщика();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДолжностьПодписантПеревозчик()
	Объект.ПодписантДолжностьПеревозчик = Объект.ПодписантПеревозчик.ЖБИ_Должность;		
КонецПроцедуры

&НаСервере
Процедура УстановитьРабочийТелефонВодителя()
	
	ДатаАктуальности 		= ТекущаяДатаСеанса();
	ВодительФизЛицо			= Объект.Водитель.Водитель;
	ВидТелефона				= Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица;
	Объект.ТелефонВодителя	= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(ВодительФизЛицо, ВидТелефона, ДатаАктуальности);
	Объект.ДолжностьВодителя= Объект.Водитель.Должность;
	
КонецПроцедуры

&НаСервере
Процедура ТранспортноеСредствоПриИзмененииНаСервере()
	
	ПараметрыТТН = Новый Структура;
	ПараметрыТТН.Вставить("АвтомобильГосударственныйНомер");
	ПараметрыТТН.Вставить("АвтомобильМарка");	
	ПараметрыТТН.Вставить("НомерПрицепа");
	ПараметрыТТН.Вставить("МаркаПрицепа");
	
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТранспортныеСредства.Код КАК АвтомобильГосударственныйНомер,
		|	ТранспортныеСредства.Марка КАК АвтомобильМарка,
		|	ТранспортныеСредства.ГосударственныйНомерПрицепа КАК НомерПрицепа,
		|	ТранспортныеСредства.ЖБИ_МаркаПрицепа КАК МаркаПрицепа
		|ИЗ
		|	Справочник.ТранспортныеСредства КАК ТранспортныеСредства
		|ГДЕ
		|	ТранспортныеСредства.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Объект.ТранспортноеСредство);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыТТН, Выборка);
		КонецЕсли;			
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, ПараметрыТТН);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТЧ(ИмяТаблицы,Свойство,ЗначениеСвойства,СписокКолонокИсключение,УдалитьУФИндекс = Неопределено, Очистить = Ложь)
	
	Если УдалитьУФИндекс <> Неопределено Тогда 
		УсловноеОформление.Элементы.Удалить(УдалитьУФИндекс);	
	КонецЕсли;
	
	Если Очистить Тогда 
		УсловноеОформление.Элементы.Очистить();	
	КонецЕсли;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ОформлениеУО        = ЭлементУсловногоОформления.Оформление;
	ОтборУО             = ЭлементУсловногоОформления.Отбор;
	ОформляемыеПоляУО   = ЭлементУсловногоОформления.Поля;
	Если ИмяТаблицы = "Товары" Тогда 		
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы+".Номенклатура");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
		ЭлементОтбора.Использование  = Истина;
		Для Каждого НомСтр Из Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
			ИмяКолонки = НомСтр.Имя;
			СокрИмя = Сред(ИмяКолонки,СтрДлина(ИмяТаблицы)+1,50);
			Если СписокКолонокИсключение.НайтиПоЗначению(СокрИмя)<>Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			ОформляемоеПоле      = ОформляемыеПоляУО.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		КонецЦикла;	
	ИначеЕсли ИмяТаблицы = "СтавкаФрахта" Тогда 		
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
		ЭлементОтбора.ПравоеЗначение = МаксСтавкаФрахта;
		ЭлементОтбора.Использование  = Истина;
		
		ОформляемоеПоле      		 = ОформляемыеПоляУО.Элементы.Добавить();
		ОформляемоеПоле.Поле 		 = Новый ПолеКомпоновкиДанных("СтавкаФрахта");
	ИначеЕсли ИмяТаблицы = "СтавкаНДС" Тогда 
		СтавкаНДСПоУмолчанию 		 = УчетНДСУП.СтавкаНДСПоУмолчанию(ТекущаяДатаСеанса(), Ложь);
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = СтавкаНДСПоУмолчанию;
		ЭлементОтбора.Использование  = Истина;
		
		ОформляемоеПоле      		 = ОформляемыеПоляУО.Элементы.Добавить();
		ОформляемоеПоле.Поле 		 = Новый ПолеКомпоновкиДанных("СтавкаНДС");
	КонецЕсли;
	
	ОформляемоеПоле.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьТаблицыФормы()
	
	СписокКолонокИсключение = Новый СписокЗначений;
	СписокКолонокИсключение.Добавить("ПунктОтгрузки","ПунктОтгрузки");
	СписокКолонокИсключение.Добавить("КоличествоКОтгрузке","КоличествоКОтгрузке");
	УстановитьУсловноеОформлениеТЧ("Товары","ТолькоПросмотр",Истина,СписокКолонокИсключение);		
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовФормы()
	
	Элементы.ПодписантЗаказчик.Доступность = ЖБИ_ОбщийМодульДокументыСервер.ОпределитьДоступностьРоли("ЖБИ_ОсновнаяРоль");
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДоступностьКомандПоСтатусу()
	
	НовыйДок = Объект.Ссылка.Пустая();
	Если НовыйДок Тогда
		Элементы.ФормаКомандаОтгружено.Доступность 			= НЕ НовыйДок;
		ПроверитьПроведенность 								= Ложь;
		Элементы.ФормаКомандаПровести.Доступность 			= Ложь;
		Элементы.ФормаКомандаПровестиИЗакрыть.Доступность 	= Ложь;
	Иначе 
		Элементы.ФормаКомандаПровестиИЗакрыть.Доступность 	= Истина;
		Элементы.ФормаКомандаПровести.Доступность 			= Истина;
		ПроверитьПроведенность	= ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Ссылка,"Проведен");
	КонецЕсли;
		
	Если Объект.Отгружено Тогда 
		Элементы.ФормаКомандаОтгружено.Доступность 		= Ложь;
		//Элементы.ФормаКомандаОтклонить.Доступность 		= Истина;
		Элементы.ФормаКомандаКорректировка.Доступность 	= Ложь;
	Иначе 
		Элементы.ФормаКомандаОтгружено.Доступность 		= ?(ПроверитьПроведенность,Истина,Ложь);
		//Элементы.ФормаКомандаОтклонить.Доступность 		= Ложь;
		Элементы.ФормаКомандаКорректировка.Доступность 	= ПроверитьПроведенность;
	КонецЕсли;
		
	Если ПроверитьПроведенность Тогда 
		ЭтаФорма.ТолькоПросмотр 					= Истина;
		Элементы.ФормаОтменаПроведения.Доступность 	= Истина;
		Возврат;
	Иначе 
		ЭтаФорма.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	ДоступноРедактирование = ПроверитьДоступностьФормы();
	Если ДоступноРедактирование Тогда 
		ЗаполнитьДоступностьПолейФормы(ДоступноРедактирование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУсловноеОформление()
	
	СписокКолонокИсключение = Новый СписокЗначений;
	ЦветФона 				= WebЦвета.Красный;
	УстановитьУсловноеОформлениеТЧ("СтавкаФрахта","ЦветФона",ЦветФона,СписокКолонокИсключение);
	УстановитьУсловноеОформлениеТЧ("СтавкаНДС","ЦветФона",ЦветФона,СписокКолонокИсключение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормыИнформацию()
	
	//Доступность команд
	ОпределитьДоступностьКомандПоСтатусу();
	
	////Доступность ТЧ
	УстановитьДоступностьТаблицыФормы();
	//
	//УстановитьДоступностьЭлементовФормы();
	//
	//ОбновитьПолеФакт();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

#КонецОбласти
	

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_ЭЛЕМЕНТОВ_УПРАВЛЕНИЯ_ФОРМЫ

#Область Команды

&НаКлиенте
Процедура КомандаСоздатьДоговорЗаявка(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Создать документ Договор-заявка?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","КомандаСоздатьДоговорЗаявка");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьДоверенность(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Создать Доверенность?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","КомандаСоздатьДоверенность");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьТТН(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Создать ТТН?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","КомандаСоздатьТТН");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);

КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьДокумент(Команда)
	
	//Объект.ДокументыОтгрузки.Очистить();
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ДокументыОтгрузки");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//Если ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.ДокументОтгрузки,"Статус") = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусРасчетаСтавки.НеСогласован") Тогда 
	//	Возврат;
	//КонецЕсли;
	
	Текст = "Удалить документ: "+ТекДанные.ДокументОтгрузки+"?";
	СтруктураПраметров = Новый Структура("ДокументОтгрузки",ТекДанные.ДокументОтгрузки);
	СтруктураСобытия = Новый Структура("ИмяСобытия, ДопПараметры","КомандаУдалитьДокумент",СтруктураПраметров);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьДоговорЗаявка(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ДокументыОтгрузки");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Документ.ЖБИ_ДоговорЗаявка.Форма.ФормаДокумента",
	Новый Структура("Ключ",ТекДанные.ДокументОтгрузки),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеДокумента"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьДоверенность(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ДокументыОтгрузки");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Документ.ДоверенностьВыданная.Форма.ФормаДокумента",
	Новый Структура("Ключ",ТекДанные.ДокументОтгрузки),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеДокумента"));

КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьРеализацияТоваровУслуг(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ДокументыОтгрузки");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента",
	Новый Структура("Ключ",ТекДанные.ДокументОтгрузки),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеДокумента"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьТранспортнаяНакладная(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ДокументыОтгрузки");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Документ.ТранспортнаяНакладная.Форма.ФормаДокумента",
	Новый Структура("Ключ",ТекДанные.ДокументОтгрузки),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеДокумента"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат;
	КонецЕсли;
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Ложь);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат;
	КонецЕсли;
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Ложь);
	ОбновитьЭлементыФормыИнформацию();
	ОбновитьТаблицуСДокументами();
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьДокумент(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	ОбновитьТаблицуСДокументами();
	ОбновитьЭлементыФормыИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЧат(Команда)	
	ЖБИ_ОбщийМодульДокументы.ПоказатьДиалогДобавленияКомментарияВЧат(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЧат(Команда)		
	ЖБИ_ОбщийМодульДокументы.ОбновитьЧат(ЭтаФорма);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтгружено(Команда)	
	ПоказатьВопросОтгрузить();		
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтклонить(Команда)
	//Если НЕ ЖБИ_ОбщийМодульДокументыСервер.ОпределитьДоступностьРоли("ЖБИ_ОсновнаяРоль") Тогда
	//	ОбщегоНазначенияКлиент.СообщитьПользователю("Нет доступа к команде");
	//	Возврат;
	//КонецЕсли;	
	ПоказатьВопросОтклонить();
КонецПроцедуры

&НаКлиенте
Процедура КомандаКорректировка(Команда)
	//Если НЕ ЖБИ_ОбщийМодульДокументыСервер.ОпределитьДоступностьРоли("ЖБИ_ОсновнаяРоль") Тогда
	//	ОбщегоНазначенияКлиент.СообщитьПользователю("Нет доступа к команде");
	//	Возврат;
	//КонецЕсли;
	ПоказатьВопросКорректировка();	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПакетнаяРассылкаПисем(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ЖБИ_ПакетнаяРассылкаПечатныхФорм.Форма",
	Новый Структура("ДокументРассылки",Объект.Ссылка),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "КомандаПакетнаяРассылкаПисем"));
	
КонецПроцедуры

#КонецОбласти

#Область Товары

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;	
	
	ОткрытьФорму("Документ.ЖБИ_ФактическиеОтгрузки.Форма.ФормаПодбора",
	Новый Структура(),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаПодбора"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПунктОтгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Товары");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("РегистрСведений.ЖБИ_ПунктыНазначенияОтгрузки.Форма.ФормаВыбора",
	Новый Структура("Партнер",ТекДанные.Поставщик),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаВыбораПунктОтгрузки"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоКОтгрузкеПриИзменении(Элемент)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Товары");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//Если ТекДанные.Количество < ТекДанные.КоличествоКОтгрузке + ТекДанные.Факт Тогда
	Если ТекДанные.КоличествоКОтгрузке > ТекДанные.Остаток Тогда
		ТекДанные.КоличествоКОтгрузке = 0;
		//ОбщегоНазначенияКлиент.СообщитьПользователю("Нельзя указать кол-во больше, чем в поле План");
		ОбщегоНазначенияКлиент.СообщитьПользователю("Нельзя указать кол-во к отгрузке больше остатка");
		ОбновитьПолеФакт();
		Возврат;
	КонецЕсли;
	
	ТекДанные.ОбщийВес =  ТекДанные.КоличествоКОтгрузке * ТекДанные.Вес;	
	ОбновитьПолеФакт();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Товары");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	//Если ЗначениеЗаполнено(ТекДанные.ДоговорЗаявка) Тогда 
	//	ОбщегоНазначенияКлиент.СообщитьПользователю("Нельзя удалить товар, по которому сформирован Договор-заявка. Отклоните Договор-заявку!");
	//	Отказ = Истина;	
	//КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область Документ

&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ИзменитьДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если НЕ ЖБИ_ОбщийМодульДокументыСервер.ОпределитьДоступностьРоли("ЖБИ_ОсновнаяРоль") Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ДокументыОтгрузки");
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Текст = "Вы уверены, что хотите удалить документ "+ТекДанные.ДокументОтгрузки+"?";
	СтруктураСобытия = Новый Структура("ИмяСобытия,ДокументОтгрузки","ВопросДокументыПередУдалением",ТекДанные.ДокументОтгрузки);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДатаЗагрузкиПриИзменении(Элемент)	
	Объект.ДатаВыгрузки = Объект.ДатаЗагрузки + 60 * 60 * 24;	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаФрахтаПриИзменении(Элемент)	
	МаксСтавкаФрахта = ЗаполнитьМаксиСтавкуФрахта();
	Если Объект.СтавкаФрахта >МаксСтавкаФрахта Тогда
		Текст = "Вы уверены, что вы поставили правильную ставку фрахта "+Объект.СтавкаФрахта+" Максимальная ставка по заявке: " + МаксСтавкаФрахта + "?";
		СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросПроверкиСтавкиФрахта");
		ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
		ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	СписокКолонокИсключение = Новый СписокЗначений;
	ЦветФона 				= WebЦвета.Красный;
	УстановитьУсловноеОформлениеТЧ("СтавкаНДС","ЦветФона",ЦветФона,СписокКолонокИсключение);
КонецПроцедуры

&НаКлиенте
Процедура ПодписантПеревозчикПриИзменении(Элемент)	
	УстановитьДолжностьПодписантПеревозчик();		
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПеревозкаПриИзменении(Элемент)	
	УстановитьБанковскийСчетПлательщика();	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	ПеревозчикПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	УстановитьПодписанта();		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	УстановитьПодписанта();
	ЗаполнитьДоговор();
	УстановитьБанковскийСчетПлательщика();
КонецПроцедуры

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	
	УстановитьРабочийТелефонВодителя();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВодительОткрытие(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//
	//ВодительФизЛицо = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Объект.Водитель,"Водитель");	
	//СтандартнаяОбработка = Ложь;
	//ОткрытьФорму("Справочник.ФизическиеЛица.Форма.ФормаЭлемента",
	//Новый Структура("Ключ",ВодительФизЛицо),
	//Элемент,,,,
	//Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеВодителя"));
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоПриИзменении(Элемент)
	ТранспортноеСредствоПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаСервере
Процедура УстановитьПараметрыДинамическогоСписка()
	
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ЭтаФорма.Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты() Цикл
			Если ЭтаФорма.Параметры.Свойство(Реквизит.Имя) Тогда
				ЭтаФорма[Реквизит.Имя] = ЭтаФорма.Параметры[Реквизит.Имя];
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		Возврат;
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	УстановитьПараметрыДинамическогоСписка();
	
	ЖБИ_ОбщийМодульКлиентСервер.УстановитьКнопкиПечатиСервер(Документы.ЖБИ_ФактическиеОтгрузки.ПолучитьСписокПечатныхФорм(),ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЖБИ_ОбщийМодульДокументыСервер.ОпределитьДоступностьРоли("ЖБИ_ОтделСбыта") Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ОбновитьЭлементыФормыИнформацию();
	ОбновитьТаблицуСДокументами();
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПолеФакт",2,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)	
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатВыполнения = Новый Структура("СообщениеОбОшибке","");	
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		Если ДополнительныеПараметры.Свойство("ИмяСобытия")
			И ЗначениеЗаполнено(ДополнительныеПараметры.ИмяСобытия) Тогда
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		Если ДополнительныеПараметры.Свойство("ИмяСобытия")
			И ЗначениеЗаполнено(ДополнительныеПараметры.ИмяСобытия) Тогда;
			Если ДополнительныеПараметры.ИмяСобытия = "ДобавитьКомментарийВЧат" Тогда
				Если Результат = Неопределено Тогда
					Возврат;
				КонецЕсли;
				ЖБИ_ОбщийМодульДокументы.ДобавитьКомментарийВЧат(ЭтаФорма, Результат);
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаСоздатьДоговорЗаявка" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				СоздатьДоговорЗаявка();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаСоздатьДоверенность" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				СоздатьДоверенность();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаСоздатьТТН" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				СоздатьТТН();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "КомандаУдалитьДокумент" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				ДопПараметры = ДополнительныеПараметры.ДопПараметры;
				УдалитьДокумент(ДопПараметры);
				ОбновитьТаблицуСДокументами();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросПроверкиСтавкиФрахта" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Объект.СтавкаФрахта = 0;
					Возврат;
				КонецЕсли;			
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросДокументыПередУдалением" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				УдалитьДокументОтгрузки(ДополнительныеПараметры);
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросОтгрузить" Тогда
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				ВыполнитьОтгрузку();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросОтклонить" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				ОтклонитьОтгрузку();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросКорректировка" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				СкорректироватьОтгрузку();		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ФормаПодбора" Тогда
		Если Результат = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		Если Результат.Свойство("Товары")
			И Результат.Товары.Количество()>0 Тогда 
			ЗаполнитьТоварФактическиеОтгрузкиСервер(Результат.Товары);
			ОбновитьПолеФакт();
		КонецЕсли;
	ИначеЕсли ДополнительныеПараметры = "ФормаРедактированиеДокумента" Тогда
		ОбновитьТаблицуСДокументами();
	ИначеЕсли ДополнительныеПараметры = "ФормаВыбораПунктОтгрузки" Тогда 
		Элементы.Товары.ТекущиеДанные.ПунктОтгрузки = Результат;	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
