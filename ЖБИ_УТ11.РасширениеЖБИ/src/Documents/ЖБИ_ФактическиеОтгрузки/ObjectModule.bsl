
Процедура РассчитатьСуммуВсего()
	
	//СуммаДокумента = 0;
	//Для Каждого НомСтр Из Товары Цикл 
	//	СуммаДокумента = СуммаДокумента + НомСтр.Сумма;	
	//КонецЦикла;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	//Если РежимЗаписи=РежимЗаписиДокумента.Запись И НЕ ПометкаУдаления Тогда	
	//	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	//КонецЕсли;
	
	РассчитатьСуммуВсего();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	//Нумератор продаж по договору +
	СообщениеОбОшибки 	= "";
	Если Товары.Количество() > 0 Тогда 
		НомерПоПорядку 		= Документы.ЖБИ_ФактическиеОтгрузки.ЗаполнитьНомерПоПорядку(Ссылка,Договор);
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Период",ТекущаяДатаСеанса());
		СтруктураПараметров.Вставить("ДоговорПродажи",Договор);
		СтруктураПараметров.Вставить("НомерПоПорядку",НомерПоПорядку);
		СтруктураПараметров.Вставить("Автор",Пользователи.ТекущийПользователь());
		ТаблицаНабораЗаписей = РегистрыСведений.ЖБИ_НумераторПродажПоДоговорам.ЗаполнитьТаблицуНабораЗаписей(СтруктураПараметров);
		
		Результат = РегистрыСведений.ЖБИ_НумераторПродажПоДоговорам.СоздатьОбновитьЗаписиРегистраСведений(ТаблицаНабораЗаписей,,, СообщениеОбОшибки);
		Если Не Результат Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
	//Нумератор продаж по договору -
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Дата				  		= ТекущаяДатаСеанса();
	Валюта                		= ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	Менеджер              		= Пользователи.ТекущийПользователь();
	Автор                		= Пользователи.ТекущийПользователь();
	Организация           		= ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Подразделение		  		= Автор.Подразделение;
	ДатаЗагрузки		  		= ТекущаяДатаСеанса();
	ДатаВыгрузки		  		= ДатаЗагрузки + 60 * 60 * 24;
	
	БанковскийСчетПлательщика 	= Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Организация, Валюта);	
	НалогообложениеНДС 	  		= Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;	
			
	//Подписанты
	ДатаАктуальности 			= ТекущаяДатаСеанса();
	СтруктураОтветственных 		= ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация, ДатаАктуальности);
	ПодписантЗаказчик			= СтруктураОтветственных.РуководительСсылка;
	
	МаркаПрицепа				= Справочники.ЖБИ_МаркаПрицепа.НайтиПоРеквизиту("СлужебнаяКод","Полуприцеп");
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда 
		Если ДанныеЗаполнения.Свойство("Основание")
			И ТипЗнч(ДанныеЗаполнения.Основание) = Тип("ДокументСсылка.ЖБИ_ЗаявкиПокупателей") Тогда		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СообщениеОбОшибки 	= "";
	Отказ 				= Документы.ЖБИ_ФактическиеОтгрузки.ПроверитьЗаполнениеДокумента(Ссылка, СообщениеОбОшибки);
	Если Отказ Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);
		Возврат;
	КонецЕсли;
	
	Если ДокументыОтгрузки.Количество() = 0 Тогда 
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены документы отгрузки");
		Возврат;
	КонецЕсли;
	 
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	Документы.ЖБИ_ФактическиеОтгрузки.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	ОтразитьПередачаВОтгрузку(ДополнительныеСвойства, Движения, Отказ);
	Если Отгружено Тогда 
		ИзменитьСтатусЗаявкиПокупателяВОтгрузке(Отказ);
	КонецЕсли;
		
КонецПроцедуры

// Процедура формирования движений по регистру "ПередачаВОтгрузку".
//
// Параметры:
//  ДополнительныеСвойства - Структура - Структура дополнительных свойств для проведения.
//  Движения - Структура - Структура наборов движений документа.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ОтразитьПередачаВОтгрузку(ДополнительныеСвойства, Движения, Отказ) Экспорт

	ТаблицаПередачаВОтгрузку = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЖБИ_ПередачаВОтгрузку;
	
	Если Отказ ИЛИ ТаблицаПередачаВОтгрузку.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияЗаказыПоставщикам = Движения.ЖБИ_ПередачаВОтгрузку;
	ДвиженияЗаказыПоставщикам.Записывать = Истина;
	ДвиженияЗаказыПоставщикам.Загрузить(ТаблицаПередачаВОтгрузку); 
	ДвиженияЗаказыПоставщикам.Записать();
	
КонецПроцедуры

Процедура ИзменитьСтатусЗаявкиПокупателяВОтгрузке(Отказ) 
	
	МассивЗаявок 	= Товары.Выгрузить(,"ЗаявкаПокупателя").ВыгрузитьКолонку("ЗаявкаПокупателя");
	Запрос 			= Новый Запрос;
	Запрос.УстановитьПараметр("Дата",Новый Граница(МоментВремени(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивЗаявок",МассивЗаявок);
	Запрос.Текст 	= "ВЫБРАТЬ
					  |	ЖБИ_ПередачаВОтгрузкуОстатки.ЗаявкаПокупателя КАК ЗаявкаПокупателя,
	             	  |	ЕСТЬNULL(ЖБИ_ПередачаВОтгрузкуОстатки.ОтгруженоОстаток,0) КАК ОтгруженоОстаток	             	  
	             	  |ИЗ
	             	  |	РегистрНакопления.ЖБИ_ПередачаВОтгрузку.Остатки(&Дата, ЗаявкаПокупателя В (&МассивЗаявок)) КАК ЖБИ_ПередачаВОтгрузкуОстатки";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		ТЧСчет 				 = РезультатЗапроса.ЗаявкаПокупателя.СчетНаОплату;
		КолВсегоПоСчету 	 = ТЧСчет.Итог("Количество");
		КоличествоОтгружено  = 0;
		Если КолВсегоПоСчету <> РезультатЗапроса.ОтгруженоОстаток Тогда 
			Продолжить;	
		КонецЕсли;
		ДокОбъект 			= РезультатЗапроса.ЗаявкаПокупателя.ПолучитьОбъект();
		ДокОбъект.Статус 	= Перечисления.ЖБИ_СтатусЗаявкиПокупателя.Отгружен;
		Попытка
			ДокОбъект.Записать();
		Исключение
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;	
	
	////МоментСразуПослеДокумента = МоментВремени().Дата + 1; 
	//МассивЗаявок 	= Товары.Выгрузить(,"ЗаявкаПокупателя").ВыгрузитьКолонку("ЗаявкаПокупателя");
	//Запрос 			= Новый Запрос;
	////Запрос.УстановитьПараметр("Дата", МоментСразуПослеДокумента);
	//Запрос.УстановитьПараметр("МассивЗаявок",МассивЗаявок);
	//Запрос.Текст 	= "ВЫБРАТЬ
	//					|	ЖБИ_ПередачаВОтгрузкуОстатки.ЗаявкаПокупателя КАК ЗаявкаПокупателя,
	//					|	ЕСТЬNULL(ЖБИ_ПередачаВОтгрузкуОстатки.Отгружено, 0) КАК ОтгруженоОстаток
	//					|ИЗ
	//					|	РегистрНакопления.ЖБИ_ПередачаВОтгрузку КАК ЖБИ_ПередачаВОтгрузкуОстатки
	//					|ГДЕ
	//					|	ЖБИ_ПередачаВОтгрузкуОстатки.ЗаявкаПокупателя В(&МассивЗаявок)
	//					|ИТОГИ ПО
	//					|	ЗаявкаПокупателя";
	//
	//ВыборкаЗаявкаПокупателя = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	//Пока ВыборкаЗаявкаПокупателя.Следующий() Цикл   
	//	РезультатЗапроса = ВыборкаЗаявкаПокупателя.Выбрать(); 
	//	ИзменитьСтатус   = Ложь;
	//	Пока РезультатЗапроса.Следующий() Цикл  
	//		
	//		Если РезультатЗапроса.ОтгруженоОстаток = 0 Тогда 
	//			Продолжить;
	//		КонецЕсли; 
	//		
	//		ТЧСчет 				 = РезультатЗапроса.ЗаявкаПокупателя.СчетНаОплату;
	//		КолВсегоПоСчету 	 = ТЧСчет.Итог("Количество");
	//		КоличествоОтгружено  = 0;
	//		НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("ЗаявкаПокупателя",РезультатЗапроса.ЗаявкаПокупателя));
	//		Для Каждого Ном Из НайденныеСтроки Цикл 
	//			КоличествоОтгружено = КоличествоОтгружено + Ном.КоличествоОтгружено;	
	//		КонецЦикла;
	//		Если КолВсегоПоСчету <> РезультатЗапроса.ОтгруженоОстаток + КоличествоОтгружено Тогда 
	//			Продолжить;	
	//		КонецЕсли;
	//		ИзменитьСтатус = Истина;	
	//	КонецЦикла;
	//	
	//	Если ИзменитьСтатус Тогда
	//		ДокОбъект 			= ВыборкаЗаявкаПокупателя.ЗаявкаПокупателя.ПолучитьОбъект();
	//		ДокОбъект.Статус 	= Перечисления.ЖБИ_СтатусЗаявкиПокупателя.Отгружен;
	//		Попытка
	//			ДокОбъект.Записать();
	//		Исключение
	//			Отказ = Истина;
	//			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//		КонецПопытки;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры


