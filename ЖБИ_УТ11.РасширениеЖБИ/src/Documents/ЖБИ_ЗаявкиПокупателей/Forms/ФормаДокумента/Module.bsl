
#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ 

&НаСервере
Процедура ВыделитьДоставку()
		
	ТаблРасчет 		= Объект.ОкончательныйРасчет.Выгрузить();
	ТаблицаКонтроль = Объект.КонтрольТранспорта.Выгрузить();
	Если ТаблРасчет.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;
	
	ВыделитьДоставку = Объект.ВыделитьДоставку = 2 ИЛИ Объект.ВыделитьДоставку = 3;
	ЖБИ_ОбщийМодульДокументы.РасчитатьСтоимость(Объект.Ссылка,ТаблРасчет,ТаблицаКонтроль,,ВыделитьДоставку);
	СообщениеОбОшибки = "";
	Отказ 			  = ЗаполнитьТЧСчетНаОплату(СообщениеОбОшибки, ТаблРасчет, ТаблицаКонтроль, Объект.ВыделитьДоставку, Объект.УсреднитьЦены);
	Если Отказ Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);
		Возврат;
	КонецЕсли;				
	
КонецПроцедуры

&НаСервере
Процедура УсреднитьЦены()
		
	ТаблРасчет 		= Объект.ОкончательныйРасчет.Выгрузить();
	ТаблицаКонтроль = Объект.КонтрольТранспорта.Выгрузить();
	Если ТаблРасчет.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;
	
	ВыделитьДоставку = Объект.ВыделитьДоставку = 2 ИЛИ Объект.ВыделитьДоставку = 3;
	ЖБИ_ОбщийМодульДокументы.РасчитатьСтоимость(Объект.Ссылка,ТаблРасчет,ТаблицаКонтроль,,ВыделитьДоставку);
	СообщениеОбОшибки = "";
	Отказ 			  = ЗаполнитьТЧСчетНаОплату(СообщениеОбОшибки, ТаблРасчет, ТаблицаКонтроль, Объект.ВыделитьДоставку, Объект.УсреднитьЦены);
	Если Отказ Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);
		Возврат;
	КонецЕсли;				
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьКарточуНоменклатуры(КарточкаНоменклатуры, НоменклатураСсылка)
	
	Если НЕ ЗначениеЗаполнено(НоменклатураСсылка) Тогда
		Возврат КарточкаНоменклатуры;
	КонецЕсли;
		
	КарточкаНоменклатуры.Очистить();
	НастройкиВидимостиИЗаголовков 	= Справочники.Номенклатура.НастройкиВидимостиИЗаголовков(НоменклатураСсылка, Ложь);
	Для Каждого ВидимостьЗаголовка Из НастройкиВидимостиИЗаголовков.ВидимостьЭлементов Цикл 
		Если СтрНайти(ВидимостьЗаголовка.Ключ, "ДополнительныйРеквизитЗначение")=0 Тогда
			НастройкиВидимостиИЗаголовков.ВидимостьЭлементов[ВидимостьЗаголовка.Ключ] = Ложь;	
		КонецЕсли;
	КонецЦикла;
	
	КарточкаНоменклатуры = Справочники.Номенклатура.ТабличныйДокументКарточкиНоменклатуры(НоменклатураСсылка, НастройкиВидимостиИЗаголовков);	
	
	Возврат КарточкаНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьАктивизациюПредварительныйРасчет()
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ПредварительныйРасчет");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Номенклатура = ТекДанные.Номенклатура Тогда 
		Возврат;
	КонецЕсли;
 
	КарточкаНоменклатуры = ЗаполнитьКарточуНоменклатуры(КарточкаНоменклатуры, ТекДанные.Номенклатура);
	Номенклатура		 = ТекДанные.Номенклатура;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюОкончательныйРасчет()
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ОкончательныйРасчет");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Номенклатура = ТекДанные.Номенклатура Тогда 
		Возврат;
	КонецЕсли;
 
	КарточкаНоменклатуры = ЗаполнитьКарточуНоменклатуры(КарточкаНоменклатуры, ТекДанные.Номенклатура);
	Номенклатура		 = ТекДанные.Номенклатура;
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМаксимумНомерПакета(Пакет, ИмяТаблицы)
	
	Максимум = 0;
	Для Каждого НомСтр Из Объект[ИмяТаблицы] Цикл 
		Максимум = Макс(Максимум,НомСтр.Пакет);
	КонецЦикла;
	
	Пакет = Максимум + 1;		
	Возврат Пакет
	
КонецФункции

&НаСервере
Функция ПолучитьМаксимумКодСтроки(ИмяТаблицы)
	
	Максимум = 0;
	Для Каждого НомСтр Из Объект[ИмяТаблицы] Цикл 
		Максимум = Макс(Максимум,НомСтр.КодСтроки);
	КонецЦикла;
	КодСтроки = Максимум + 1;	
		
	Возврат КодСтроки
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПредварительныйРасчет()
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Новый") Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТоварыПредвРасчет");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ТекДанныеСтруктура = ЗаполнитьТекСтрокуКакСтруктура(ТекДанные,"ТоварыПредвРасчет");
	ЗаполнитьНоменклатуруПоПоставщикамКлиент(ТекДанныеСтруктура,"ПредварительныйРасчет");
	РасчитатьЦенуПоставщика(ТекДанные.Пакет, ТекДанные.Номенклатура);
	
	//заполнение ставки	
	РасчитатьСтавкиТЧЗаявкиСервер(ТекДанные.Пакет, ТекДанные.Номенклатура);
	
	//расчет стоимости
	РасчитатьСтоимостьСервер("ПредварительныйРасчет");
	
	УстановитьОтборСтрокТаблицыРасчета(ТекДанные.Пакет, ТекДанные.Номенклатура,"ПредварительныйРасчет");
	УстановитьСортировкуПоУмолчанию("ПредварительныйРасчет");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОстатокПереданныхВОтгрузку(ЗаявкаСсылка)
	
	ПереданоВОтгрузку = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаявкаПокупателя", ЗаявкаСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(ЖБИ_ПередачаВОтгрузкуТовары.РазместитьВПлан) КАК ПереданоВОтгрузкуОстаток
	               |ИЗ
	               |	Документ.ЖБИ_ПередачаВОтгрузку.Товары КАК ЖБИ_ПередачаВОтгрузкуТовары
	               |ГДЕ
	               |	ЖБИ_ПередачаВОтгрузкуТовары.Ссылка.ДокументОснование = &ЗаявкаПокупателя
	               |	И НЕ ЖБИ_ПередачаВОтгрузкуТовары.Ссылка.ПометкаУдаления
	               |	И ЖБИ_ПередачаВОтгрузкуТовары.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.ЖБИ_СтатусРасчетаСтавки.НеСогласован)";			
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ПереданоВОтгрузку = РезультатЗапроса.ПереданоВОтгрузкуОстаток;
	КонецЕсли;
	
	Возврат ПереданоВОтгрузку;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьДокументВыписки()
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Документы");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные.ДокументыОтгрузки) = Тип("ДокументСсылка.ЗаказКлиента") 
		И ЗначениеЗаполнено(ТекДанные.ДокументыОтгрузки) Тогда
		КомандаИзменитьЗаказКлиента("");
	ИначеЕсли ТипЗнч(ТекДанные.ДокументыОтгрузки) = Тип("ДокументСсылка.ЖБИ_ПередачаВОтгрузку") 
		И ЗначениеЗаполнено(ТекДанные.ДокументыОтгрузки) Тогда
		КомандаИзменитьПередачаВОтгрузку("");
	ИначеЕсли ЗначениеЗаполнено(ТекДанные.СправочникиОтгрузки) 
		И ТипЗнч(ТекДанные.СправочникиОтгрузки) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СоздатьИзменитьДоговор(ТекДанные.СправочникиОтгрузки);
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЧатЗаявкиПокупателейСервер()
	УправлениеСвойствами.ЗаполнитьЧатЗаявкиПокупателей(ЭтаФорма);		
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическогоСписка()		
	ЖурналСостоянийСтатусов.Параметры.УстановитьЗначениеПараметра("Объект",Объект.Ссылка);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьЖурналСостоянийОбъектовСервер(Ссылка,Статус)
	Результат = РегистрыСведений.ЖБИ_ЖурналСостоянийДокументов.ЗаполнитьЖурналСостоянийОбъектов(Ссылка,Статус);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОбновитьТаблицуСДокументами()
	
	Если Объект.Документы.Количество()=0 Тогда
		Возврат
	КонецЕсли;
	Для Каждого ОформлениеСтроки Из Объект.Документы Цикл
		Название = ?(ЗначениеЗаполнено(ОформлениеСтроки.ДокументыОтгрузки), ОформлениеСтроки.ДокументыОтгрузки, ОформлениеСтроки.СправочникиОтгрузки);
		ОформлениеСтроки.Название = Строка(Название);
		Если ТипЗнч(ОформлениеСтроки.ДокументыОтгрузки) = Тип("ДокументСсылка.ЗаказКлиента") Тогда 
			Продолжить;
		КонецЕсли;
		ОформлениеСтроки.Статус = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ОформлениеСтроки.ДокументыОтгрузки,"Статус");
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Функция НайтиСтрокиТЧПоНоменклатуре(Пакет, Номенклатура, ИмяТаблицы)	
	НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("Пакет,Номенклатура",Пакет, Номенклатура));
	Возврат НайденныеСтроки;	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиСтрокиТЗПоНоменклатуре(Пакет, Номенклатура, ТЗ)	
	НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура("Пакет, Номенклатура",Пакет, Номенклатура));
	Возврат НайденныеСтроки;	
КонецФункции

&НаКлиенте
Функция ПоверитьДоступностьПоляПоСтатусу()
	
	Отказ = Ложь;
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВыпискаДокументов") Тогда 
		Отказ = Истина;
	КонецЕсли; 
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьДоступностьФормыПоСтатусу()
	
	ДоступностьФормы = Ложь;
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ОтправленНаРасчетПлановыхСтавок")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ПодтверждениеЛогистами")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Отгружен")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Завершен")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВАрхиве") Тогда 
		ДоступностьФормы = Истина;
	КонецЕсли;
	ЭтаФорма.ТолькоПросмотр = ДоступностьФормы;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДоступностьПоПрофилю()
	
	Профиль 			= ЖБИ_ОбщийМодульСервер.ПолучитьПрофильПользователяГруппа(ТекущийПользователь);
	ВидимостьЦенСумм 	= Профиль = ПредопределенноеЗначение("Справочник.ПрофилиГруппДоступа.ЗакупкиИЗапасы");	
	Если Не ВидимостьЦенСумм Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.ОкончательныйРасчет.ПодчиненныеЭлементы.ОкончательныйРасчетЦенаПриПолнойЗагрузки.Видимость = Не ВидимостьЦенСумм;
	Элементы.ОкончательныйРасчет.ПодчиненныеЭлементы.ОкончательныйРасчетЦена.Видимость 					= Не ВидимостьЦенСумм;
	Элементы.КонтрольТранспорта.ПодчиненныеЭлементы.КонтрольТранспортаСумма.Видимость 					= Не ВидимостьЦенСумм;
	Элементы.ДекорацияСуммаДокумента.Видимость															= Не ВидимостьЦенСумм;
	Элементы.ГруппаСтраницыЛево.ПодчиненныеЭлементы.ГруппаПредварительныйРасчет.Доступность				= Не ВидимостьЦенСумм;
	Элементы.ГруппаСтраницыЛево.ПодчиненныеЭлементы.ГруппаСчетНаОплату.Доступность						= Не ВидимостьЦенСумм;
	Элементы.ГруппаСтраницыЛево.ПодчиненныеЭлементы.ГруппаДокументы.Доступность							= Не ВидимостьЦенСумм;
	Элементы.ГруппаСтраницыЛево.ПодчиненныеЭлементы.ГруппаДополнительно.Доступность						= Не ВидимостьЦенСумм;
	
	Элементы.ГруппаСтраницыЛево.ТекущаяСтраница = Элементы.ГруппаОкончательныйРасчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьСтраницыПоСтатусу()

	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Новый") Тогда
		Элементы.ГруппаСтраницыЛево.ТекущаяСтраница = Элементы.ГруппаПредварительныйРасчет;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ОкончательныйРасчет")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ПодтверждениеЛогистами") Тогда 
		Элементы.ГруппаСтраницыЛево.ТекущаяСтраница = Элементы.ГруппаОкончательныйРасчет;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ПодготовкаСчета") Тогда 
		Элементы.ГруппаСтраницыЛево.ТекущаяСтраница = Элементы.ГруппаСчетНаОплату;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВыпискаДокументов") Тогда 
		Элементы.ГруппаСтраницыЛево.ТекущаяСтраница = Элементы.ГруппаДокументы;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВОтгрузке") Тогда 
		Элементы.ГруппаСтраницыЛево.ТекущаяСтраница = Элементы.ГруппаДокументы;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Отгружен") Тогда 
		Элементы.ГруппаСтраницыЛево.ТекущаяСтраница = Элементы.ГруппаДокументы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ОчиститьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТЧ(ИмяТаблицы,Свойство,ЗначениеСвойства,СписокКолонокИсключение,УдалитьУФИндекс = Неопределено, Очистить = Ложь)

	Если УдалитьУФИндекс <> Неопределено Тогда 
		УсловноеОформление.Элементы.Удалить(УдалитьУФИндекс);	
	КонецЕсли;
	
	Если Очистить Тогда 
		УсловноеОформление.Элементы.Очистить();	
	КонецЕсли;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.Использование = Истина;
	ОформлениеУО        = ЭлементУсловногоОформления.Оформление;
	ОтборУО             = ЭлементУсловногоОформления.Отбор;
	ОформляемыеПоляУО   = ЭлементУсловногоОформления.Поля;
	Если ИмяТаблицы = "ТоварыПредвРасчет" Тогда 		
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы+".Номенклатура");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
		ЭлементОтбора.Использование  = Истина;
		Для Каждого НомСтр Из Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
			ИмяКолонки = НомСтр.Имя;
			СокрИмя = Сред(ИмяКолонки,СтрДлина(ИмяТаблицы)+1,50);
			Если СписокКолонокИсключение.НайтиПоЗначению(СокрИмя)<>Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			ОформляемоеПоле      = ОформляемыеПоляУО.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		КонецЦикла;
	ИначеЕсли ИмяТаблицы = "ТоварыОкончРасчет" Тогда 		
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы+".Номенклатура");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
		ЭлементОтбора.Использование  = Истина;
		Для Каждого НомСтр Из Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
			ИмяКолонки = НомСтр.Имя;
			СокрИмя = Сред(ИмяКолонки,СтрДлина(ИмяТаблицы)+1,50);
			Если СписокКолонокИсключение.НайтиПоЗначению(СокрИмя)<>Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			ОформляемоеПоле      = ОформляемыеПоляУО.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		КонецЦикла;	
	ИначеЕсли ИмяТаблицы = "ПредварительныйРасчет" 
		И Свойство = "Шрифт" Тогда 		
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы+".Пометка");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.Использование  = Истина;
		
		ОформляемоеПоле      = ОформляемыеПоляУО.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	ИначеЕсли ИмяТаблицы = "ПредварительныйРасчет"
		И Свойство = "ТолькоПросмотр" Тогда 		
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы+".Поставщик");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = Справочники.Партнеры.ПустаяСсылка();
		ЭлементОтбора.Использование  = Истина;
		Для Каждого НомСтр Из Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
			ИмяКолонки = НомСтр.Имя;
			СокрИмя = Сред(ИмяКолонки,СтрДлина(ИмяТаблицы)+1,50);
			Если СписокКолонокИсключение.НайтиПоЗначению(СокрИмя)<>Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			ОформляемоеПоле      = ОформляемыеПоляУО.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		КонецЦикла;
	ИначеЕсли ИмяТаблицы = "ПредварительныйРасчет"
		И Свойство = "ЦветТекста" Тогда 
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы+".ИндивидуальнаяЦена");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.Использование  = Истина;
		Для Каждого НомСтр Из Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
			ИмяКолонки = НомСтр.Имя;
			СокрИмя = Сред(ИмяКолонки,СтрДлина(ИмяТаблицы)+1,50);
			Если СписокКолонокИсключение.НайтиПоЗначению(СокрИмя)<>Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			ОформляемоеПоле      = ОформляемыеПоляУО.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		КонецЦикла;
	ИначеЕсли ИмяТаблицы = "ОкончательныйРасчет" 
		И Свойство = "Шрифт" Тогда 		
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы+".Пометка");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.Использование  = Истина;
		
		ОформляемоеПоле      = ОформляемыеПоляУО.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	ИначеЕсли ИмяТаблицы = "ОкончательныйРасчет"
		И Свойство = "ТолькоПросмотр" Тогда 
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы+".Поставщик");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = Справочники.Партнеры.ПустаяСсылка();
		ЭлементОтбора.Использование  = Истина;
		Для Каждого НомСтр Из Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
			ИмяКолонки = НомСтр.Имя;
			СокрИмя = Сред(ИмяКолонки,СтрДлина(ИмяТаблицы)+1,50);
			Если СписокКолонокИсключение.НайтиПоЗначению(СокрИмя)<>Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			ОформляемоеПоле      = ОформляемыеПоляУО.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		КонецЦикла;
	ИначеЕсли ИмяТаблицы = "КонтрольТранспорта" 
		И Свойство = "ТолькоПросмотр" Тогда 
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы+".Поставщик");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = Справочники.Партнеры.ПустаяСсылка();
		ЭлементОтбора.Использование  = Истина;
		Для Каждого НомСтр Из Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
			ИмяКолонки = НомСтр.Имя;
			СокрИмя = Сред(ИмяКолонки,СтрДлина(ИмяТаблицы)+1,50);
			Если СписокКолонокИсключение.НайтиПоЗначению(СокрИмя)<>Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			ОформляемоеПоле      = ОформляемыеПоляУО.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		КонецЦикла;
	ИначеЕсли ИмяТаблицы = "КонтрольТранспорта"
		И Свойство = "ЦветТекста" Тогда 
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы+".СогласованоОЛиЗ");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		//ЭлементОтбора.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы+".БазовоеКоличество");
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.Использование  = Истина;
				
		ОформляемоеПоле      = ОформляемыеПоляУО.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
	ИначеЕсли ИмяТаблицы = "СчетНаОплату" Тогда 
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы+".Поставщик");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = Справочники.Партнеры.ПустаяСсылка();
		ЭлементОтбора.Использование  = Истина;
		Для Каждого НомСтр Из Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
			ИмяКолонки = НомСтр.Имя;
			СокрИмя = Сред(ИмяКолонки,СтрДлина(ИмяТаблицы)+1,50);
			Если СписокКолонокИсключение.НайтиПоЗначению(СокрИмя)<>Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			ОформляемоеПоле      = ОформляемыеПоляУО.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		КонецЦикла;
	ИначеЕсли ИмяТаблицы = "Документы" 
		И Свойство = "ТолькоПросмотр" Тогда 
		ОформлениеУО.УстановитьЗначениеПараметра(Свойство, ЗначениеСвойства);
		ЭлементОтбора                = ОтборУО.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект."+ИмяТаблицы+".Поставщик");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение = Справочники.Партнеры.ПустаяСсылка();
		ЭлементОтбора.Использование  = Истина;
		Для Каждого НомСтр Из Элементы[ИмяТаблицы].ПодчиненныеЭлементы Цикл
			ИмяКолонки = НомСтр.Имя;
			СокрИмя = Сред(ИмяКолонки,СтрДлина(ИмяТаблицы)+1,50);
			Если СписокКолонокИсключение.НайтиПоЗначению(СокрИмя)<>Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			ОформляемоеПоле      = ОформляемыеПоляУО.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		КонецЦикла;	
	КонецЕсли;
	
	ОформляемоеПоле.Использование = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьДоступностьТаблицыПоСтатусу()
	
	//ОчиститьУсловноеОформление();
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Новый") Тогда
		
		//
		УстановитьУсловноеОформлениеТЧ("ТоварыПредвРасчет","ТолькоПросмотр",Ложь,Новый СписокЗначений,,Истина);
		//
		УстановитьУсловноеОформлениеТЧ("ТоварыОкончРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		
		СписокКолонокИсключение = Новый СписокЗначений;
		СписокКолонокИсключение.Добавить("Пометка","Пометка");
		СписокКолонокИсключение.Добавить("ИндивидуальнаяЦена","ИндивидуальнаяЦена");
		СписокКолонокИсключение.Добавить("ИндивидуальнаяПлановаяСтавка","ИндивидуальнаяПлановаяСтавка");
		СписокКолонокИсключение.Добавить("ПунктОтгрузки","ПунктОтгрузки");
		УстановитьУсловноеОформлениеТЧ("ПредварительныйРасчет","ТолькоПросмотр",Истина,СписокКолонокИсключение);
		
		ЦветТекста = WebЦвета.Серый;
		УстановитьУсловноеОформлениеТЧ("ПредварительныйРасчет","ЦветТекста",ЦветТекста,Новый СписокЗначений);
		
		Шрифт = Новый Шрифт("MS Shell Dlg", 8, Истина);
		УстановитьУсловноеОформлениеТЧ("ПредварительныйРасчет","Шрифт",Шрифт,Новый СписокЗначений);
		
		//
		УстановитьУсловноеОформлениеТЧ("ОкончательныйРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("КонтрольТранспорта","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("СчетНаОплату","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//		
		УстановитьУсловноеОформлениеТЧ("Документы","ТолькоПросмотр",Истина,Новый СписокЗначений);
		
		Элементы.ГруппаПредварительныйРасчет.ТолькоПросмотр = Ложь;
		Элементы.ГруппаОкончательныйРасчет.ТолькоПросмотр = Истина;
		Элементы.ГруппаСчетНаОплату.ТолькоПросмотр = Истина;
		Элементы.ГруппаДокументы.ТолькоПросмотр = Истина;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ОтправленНаРасчетПлановыхСтавок") Тогда
		
		//
		УстановитьУсловноеОформлениеТЧ("ТоварыПредвРасчет","ТолькоПросмотр",Ложь,Новый СписокЗначений,,Истина);
		//
		УстановитьУсловноеОформлениеТЧ("ТоварыОкончРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("ПредварительныйРасчет","ТолькоПросмотр",Ложь,Новый СписокЗначений);		
		//
		УстановитьУсловноеОформлениеТЧ("ОкончательныйРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("КонтрольТранспорта","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//	
		УстановитьУсловноеОформлениеТЧ("СчетНаОплату","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("Документы","ТолькоПросмотр",Истина,Новый СписокЗначений);
		
		Элементы.ГруппаПредварительныйРасчет.ТолькоПросмотр = Истина;
		Элементы.ГруппаОкончательныйРасчет.ТолькоПросмотр = Истина;
		Элементы.ГруппаСчетНаОплату.ТолькоПросмотр = Истина;
		Элементы.ГруппаДокументы.ТолькоПросмотр = Истина;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ОкончательныйРасчет") Тогда
		
		//
		УстановитьУсловноеОформлениеТЧ("ТоварыПредвРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений,,Истина);
		//
		УстановитьУсловноеОформлениеТЧ("ТоварыОкончРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("ПредварительныйРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);
		
		//
		СписокКолонокИсключение = Новый СписокЗначений;
		СписокКолонокИсключение.Добавить("Пометка","Пометка");
		СписокКолонокИсключение.Добавить("ИндивидуальнаяЦена","ИндивидуальнаяЦена");
		СписокКолонокИсключение.Добавить("Количество","Количество");
		УстановитьУсловноеОформлениеТЧ("ОкончательныйРасчет","ТолькоПросмотр",Истина,СписокКолонокИсключение);
		
		Шрифт = Новый Шрифт("MS Shell Dlg", 8, Истина);
		УстановитьУсловноеОформлениеТЧ("ОкончательныйРасчет","Шрифт",Шрифт,Новый СписокЗначений);
		//
		
		СписокКолонокИсключение = Новый СписокЗначений;
		СписокКолонокИсключение.Добавить("КоличествоТранспорта","КоличествоТранспорта");
		УстановитьУсловноеОформлениеТЧ("КонтрольТранспорта","ТолькоПросмотр",Истина,СписокКолонокИсключение);
		
		ЦветТекста = WebЦвета.Красный;
		УстановитьУсловноеОформлениеТЧ("КонтрольТранспорта","ЦветТекста",ЦветТекста,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("СчетНаОплату","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("Документы","ТолькоПросмотр",Истина,Новый СписокЗначений);
		
		Элементы.ГруппаПредварительныйРасчет.ТолькоПросмотр = Истина;
		Элементы.ГруппаОкончательныйРасчет.ТолькоПросмотр = Ложь;
		Элементы.ГруппаСчетНаОплату.ТолькоПросмотр = Истина;
		Элементы.ГруппаДокументы.ТолькоПросмотр = Истина;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ПодтверждениеЛогистами") Тогда
		
		//
		УстановитьУсловноеОформлениеТЧ("ТоварыПредвРасчет","ТолькоПросмотр",Ложь,Новый СписокЗначений,,Истина);
		//
		УстановитьУсловноеОформлениеТЧ("ТоварыОкончРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("ПредварительныйРасчет","ТолькоПросмотр",Ложь,Новый СписокЗначений);
		
		//
		УстановитьУсловноеОформлениеТЧ("ОкончательныйРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("КонтрольТранспорта","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//		
		УстановитьУсловноеОформлениеТЧ("СчетНаОплату","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//		
		УстановитьУсловноеОформлениеТЧ("Документы","ТолькоПросмотр",Истина,Новый СписокЗначений);
		
		Элементы.ГруппаПредварительныйРасчет.ТолькоПросмотр = Ложь;
		Элементы.ГруппаОкончательныйРасчет.ТолькоПросмотр = Ложь;
		Элементы.ГруппаСчетНаОплату.ТолькоПросмотр = Истина;
		Элементы.ГруппаДокументы.ТолькоПросмотр = Ложь;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ПодготовкаСчета") Тогда
		
		//
		УстановитьУсловноеОформлениеТЧ("ТоварыПредвРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений,,Истина);
		//
		УстановитьУсловноеОформлениеТЧ("ТоварыОкончРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("ПредварительныйРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("ОкончательныйРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);	
		//
		УстановитьУсловноеОформлениеТЧ("КонтрольТранспорта","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		СписокКолонокИсключение = Новый СписокЗначений;
		СписокКолонокИсключение.Добавить("Пометка","Пометка");
		СписокКолонокИсключение.Добавить("ЦенаСоСкидкой","ЦенаСоСкидкой");
		СписокКолонокИсключение.Добавить("ПроцентРучнойСкидки","ПроцентРучнойСкидки");
		УстановитьУсловноеОформлениеТЧ("СчетНаОплату","ТолькоПросмотр",Истина,СписокКолонокИсключение,8);
		//
		УстановитьУсловноеОформлениеТЧ("Документы","ТолькоПросмотр",Истина,Новый СписокЗначений);
		
		Элементы.ГруппаПредварительныйРасчет.ТолькоПросмотр = Истина;
		Элементы.ГруппаОкончательныйРасчет.ТолькоПросмотр = Ложь;
		Элементы.ГруппаСчетНаОплату.ТолькоПросмотр = Ложь;
		Элементы.ГруппаДокументы.ТолькоПросмотр = Ложь;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВыпискаДокументов")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВОтгрузке")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Отгружен") Тогда
		
		//
		УстановитьУсловноеОформлениеТЧ("ТоварыПредвРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений,,Истина);
		//
		УстановитьУсловноеОформлениеТЧ("ТоварыОкончРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("ПредварительныйРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("ОкончательныйРасчет","ТолькоПросмотр",Истина,Новый СписокЗначений);	
		//
		УстановитьУсловноеОформлениеТЧ("КонтрольТранспорта","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("СчетНаОплату","ТолькоПросмотр",Истина,Новый СписокЗначений);
		//
		УстановитьУсловноеОформлениеТЧ("Документы","ТолькоПросмотр",Ложь,Новый СписокЗначений);
		
		Элементы.ГруппаПредварительныйРасчет.ТолькоПросмотр = Истина;
		Элементы.ГруппаОкончательныйРасчет.ТолькоПросмотр = Ложь;
		Элементы.ГруппаСчетНаОплату.ТолькоПросмотр = Истина;
		Элементы.ГруппаДокументы.ТолькоПросмотр = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДоступностьКнопкиПодтвержденеиЛогистам()
	
	ДоступностьКнопки = Ложь;
	НайденныеСтроки = Объект.КонтрольТранспорта.НайтиСтроки(Новый Структура("СогласованоОЛиЗ",Истина));
	Если НайденныеСтроки.Количество()>0 Тогда
		ДоступностьКнопки = Истина;	
	КонецЕсли;
	
	Возврат ДоступностьКнопки;	
	
КонецФункции

&НаКлиенте
Процедура ОпределитьДоступностьКомандПоСтатусу()
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Новый") Тогда 
		Элементы.ФормаКомандаОтправитьНаРасчетПлановыхСтавок.Доступность 	= Истина;
		Элементы.ФормаКомандаОтправитьНаПодтвержденеиЛогистам.Доступность 	= Ложь;
		Элементы.ФормаКомандаСчетНаОплату.Доступность 						= Ложь;
		Элементы.ФормаКомандаВыпискаДокументов.Доступность 					= Ложь;
		Элементы.ФормаКомандаВернутьНаОкончательныйРасчет.Доступность 		= Ложь;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ОтправленНаРасчетПлановыхСтавок") Тогда 
		Элементы.ФормаКомандаОтправитьНаРасчетПлановыхСтавок.Доступность 	= Ложь;
		Элементы.ФормаКомандаОтправитьНаПодтвержденеиЛогистам.Доступность 	= Ложь;
		Элементы.ФормаКомандаСчетНаОплату.Доступность 						= Ложь;
		Элементы.ФормаКомандаВыпискаДокументов.Доступность 					= Ложь;
		Элементы.ФормаКомандаВернутьНаОкончательныйРасчет.Доступность 		= Ложь;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ОкончательныйРасчет") Тогда
		Элементы.ФормаКомандаОтправитьНаРасчетПлановыхСтавок.Доступность 	= Ложь;
		Элементы.ФормаКомандаОтправитьНаПодтвержденеиЛогистам.Доступность 	= ПроверитьДоступностьКнопкиПодтвержденеиЛогистам();
		Элементы.ФормаКомандаСчетНаОплату.Доступность 						= Истина;
		Элементы.ФормаКомандаВыпискаДокументов.Доступность 					= Ложь;
		Элементы.ФормаКомандаВернутьНаОкончательныйРасчет.Доступность 		= Ложь;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ПодготовкаСчета") Тогда
		Элементы.ФормаКомандаОтправитьНаРасчетПлановыхСтавок.Доступность 	= Ложь;
		Элементы.ФормаКомандаОтправитьНаПодтвержденеиЛогистам.Доступность 	= Ложь;
		Элементы.ФормаКомандаСчетНаОплату.Доступность 						= Ложь;
		Элементы.ФормаКомандаВыпискаДокументов.Доступность 					= Истина;
		Элементы.ФормаКомандаВернутьНаОкончательныйРасчет.Доступность 		= Истина;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВыпискаДокументов") Тогда 
		Элементы.ФормаКомандаОтправитьНаРасчетПлановыхСтавок.Доступность 	= Ложь;
		Элементы.ФормаКомандаОтправитьНаПодтвержденеиЛогистам.Доступность 	= Ложь;
		Элементы.ФормаКомандаСчетНаОплату.Доступность 						= Ложь;
		Элементы.ФормаКомандаВыпискаДокументов.Доступность 					= Ложь;
		Элементы.ФормаКомандаВернутьНаОкончательныйРасчет.Доступность 		= Истина;
		Элементы.ФормаОбщаяКомандаЖБИ_ВвестиНаОсновании.Доступность			= Ложь;
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВОтгрузке") 
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Отгружен") Тогда
		Элементы.ФормаКомандаОтправитьНаРасчетПлановыхСтавок.Доступность 	= Ложь;
		Элементы.ФормаКомандаОтправитьНаПодтвержденеиЛогистам.Доступность 	= Ложь;
		Элементы.ФормаКомандаСчетНаОплату.Доступность 						= Ложь;
		Элементы.ФормаКомандаВыпискаДокументов.Доступность 					= Ложь;
		Элементы.ФормаКомандаВернутьНаОкончательныйРасчет.Доступность 		= Ложь;
		Элементы.ФормаОбщаяКомандаЖБИ_ВвестиНаОсновании.Доступность			= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнфоПоВыбранномуТовару()
	
	//Информация
	Если Элементы.ГруппаСтраницыЛево.ТекущаяСтраница = Элементы.ГруппаПредварительныйРасчет Тогда 
		ИмяТЧФормы = "ТоварыПредвРасчет";
		ИмяТЧ      = "ПредварительныйРасчет";
	Иначе 
		ИмяТЧФормы = "ТоварыОкончРасчет";
		ИмяТЧ      = "ОкончательныйРасчет";
	КонецЕсли;
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,ИмяТЧФормы);
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	НайденныеСтрокиТовары = НайтиСтрокиТЧПоНоменклатуре(ТекДанные.Пакет,ТекДанные.Номенклатура,"Товары");
	Если НайденныеСтрокиТовары.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;
	
	ТЧТовары = НайденныеСтрокиТовары[0];
	
	ВыбраноПоставщиков = 0;
	НайденныеСтрокиПредварительныйРасчет = НайтиСтрокиТЧПоНоменклатуре(ТекДанные.Пакет,ТекДанные.Номенклатура,ИмяТЧ);
	Для Каждого НомСтр Из НайденныеСтрокиПредварительныйРасчет Цикл 
		ВыбраноПоставщиков = ВыбраноПоставщиков + ?(НомСтр.Пометка,1,0);
	КонецЦикла;
	
	ТЧТовары.Выбрано = ВыбраноПоставщиков;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭлементыФормыИнформацию()
	
	Элементы.ДекорацияСуммаДокумента.Заголовок = "Сумма документа: "+Объект.СуммаДокумента;
	
	//Доступность страницы
	ОпределитьСтраницыПоСтатусу();
	
	//Доступность ТЧ
	ОпределитьДоступностьТаблицыПоСтатусу();
	
	//Доступность команд
	ОпределитьДоступностьКомандПоСтатусу();
	
	//Доступность формы
	ОпределитьДоступностьФормыПоСтатусу();
	
	//Доступность по профилю
	ОпределитьДоступностьПоПрофилю();
	
	ОбновитьИнфоПоВыбранномуТовару();
		
КонецПроцедуры

#КонецОбласти	

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_ЭЛЕМЕНТОВ_УПРАВЛЕНИЯ_ФОРМЫ  

&НаКлиенте
Процедура ВыделитьДоставкуПриИзменении(Элемент)	
	Текст = "Выделить доставку, табличная часть счета будет очищена?";
	СтруктураСобытия = Новый Структура("ИмяСобытия,ВыделитьДоставку","ВопросВыделитьДоставку",Объект.ВыделитьДоставку);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);		
КонецПроцедуры

&НаКлиенте
Процедура УсреднитьЦеныПриИзменении(Элемент)	
	Текст = "Усреднить цену, табличная часть счета будет очищена?";
	СтруктураСобытия = Новый Структура("ИмяСобытия,УсреднитьЦены","ВопросУсреднитьЦены",Объект.УсреднитьЦены);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтогиПоСчету()		
	Если Объект.СчетНаОплату.Количество()>0 Тогда
		Элементы.СчетНаОплату.ПодчиненныеЭлементы.СчетНаОплатуПроцентРучнойСкидки.ТекстПодвала 	= Формат(Объект.СчетНаОплату.Итог("ПроцентРучнойСкидки")/Объект.СчетНаОплату.Количество(),"ЧДЦ=2");
		Элементы.СчетНаОплату.ПодчиненныеЭлементы.СчетНаОплатуСуммаРучнойСкидки.ТекстПодвала 	= Объект.СчетНаОплату.Итог("СуммаРучнойСкидки");
		Элементы.СчетНаОплату.ПодчиненныеЭлементы.СчетНаОплатуСумма.ТекстПодвала 				= Объект.СчетНаОплату.Итог("Сумма");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаСчетНаОплату Тогда 
		ОбновитьИтогиПоСчету();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьДокумент(Команда)
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат;
	КонецЕсли;
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	ОбновитьТаблицуСДокументами();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиДокумент(Команда)
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыпискаДокументов(Команда)
	Текст = "Отправить на выписку документов?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросОтправитьВыпискуДокментов");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
КонецПроцедуры


&НаКлиенте
Функция ПроверитьВозможностьВернутьНаОкончательныйРасчет(СообщениеОбОшибки)
	
	Отказ = Ложь;	
	Если Объект.Документы.Количество()>0 Тогда 
		Отказ = Истина;
		СообщениеОбОшибки = "Нельзя вернуть документ на окончательный расчет, т.к. по нему выписаны документы!!!";
		Возврат Отказ;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ВернутьНаОкончательныйРасчет()
	
	СообщениеОбОшибки = "";
	Сообщение = Новый СообщениеПользователю;
	Отказ = ПроверитьВозможностьВернутьНаОкончательныйРасчет(СообщениеОбОшибки);
	Если Отказ Тогда
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ОкончательныйРасчет");
	Записать();
	ОбновитьЭлементыФормыИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВернутьНаОкончательныйРасчет(Команда)	
	Текст = "Вернуть на окончательный расчет?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросВернутьНаОкончательныйРасчет");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьЗаказПокупателя(Команда)
	Текст = "Создать документ Заказ клиента?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросОтправитьЗаказКлиента");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);	
КонецПроцедуры

&НаСервере
Функция ВыполнитьКомандуСоздатьПередачаВОтгрузкуСервер(Ссылка,Отказ,СообщениеОбОшибки)
	
	ПередачаВОтгрузкуСсылка = Документы.ЖБИ_ПередачаВОтгрузку.СоздатьПередачаВОтгрузку(Объект.Ссылка,Отказ,СообщениеОбОшибки);
	Если Отказ Тогда
		Возврат Отказ;
	КонецЕсли;
	
	СтруктураДобавления = Новый Структура("Дата,ДокументыОтгрузки,Автор",ТекущаяДата(),ПередачаВОтгрузкуСсылка,Пользователи.ТекущийПользователь());
	Отказ = ЗаполнитьДокументыОтгрузки(СтруктураДобавления,СообщениеОбОшибки);
	
	Возврат ПередачаВОтгрузкуСсылка;
	
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьСозданияПередачаВОтгрузку(СообщениеОбОшибки)
	
	Отказ = Ложь;			
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВыпискаДокументов")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВОтгрузке") Тогда
	Иначе 
		Отказ = Истина;
		СообщениеОбОшибки = "Создавать док-ты можно только из статуса <Выписка документов> или <В отгрузке>";
		Возврат Отказ;
	КонецЕсли;
	
	ПереданоВОтгрузку = ПолучитьОстатокПереданныхВОтгрузку(Объект.Ссылка);
	Если ПереданоВОтгрузку = Объект.СчетНаОплату.Итог("Количество") Тогда 
		Отказ = Истина;
		СообщениеОбОшибки = "Все товары переданы в отгрузку";
		Возврат Отказ;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура СоздатьПередачаВОтгрузку()
	
	СообщениеОбОшибки = "";
	Сообщение = Новый СообщениеПользователю;
	Отказ = ПроверитьВозможностьСозданияПередачаВОтгрузку(СообщениеОбОшибки);
	Если Отказ Тогда
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Записать();
	ЗаказПокупателяСсылка = ВыполнитьКомандуСоздатьПередачаВОтгрузкуСервер(Объект.Ссылка,Отказ,СообщениеОбОшибки);
	Если Отказ Тогда
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	//Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВОтгрузке") Тогда 
	//	Статус 	= ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВОтгрузке");	
	//	Отказ 	= ИзменитьСтатусыДокументов(СообщениеОбОшибки, Статус);
	//КонецЕсли;
	Если Отказ Тогда
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	ОткрытьФорму("Документ.ЖБИ_ПередачаВОтгрузку.Форма.ФормаДокумента",Новый Структура("Ключ",ЗаказПокупателяСсылка));
	ОбновитьЭлементыФормыИнформацию();
	ОбновитьТаблицуСДокументами();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПередачаВОтгрузку(Команда)
	Текст = "Создать документ Передача в отгрузку?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросПередачаВОтгрузку");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьИзменитьДоговор(Команда)
	Текст = "Выбрать договор?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросСоздатьДоговор");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьНаРасчетПлановыхСтавок(Команда)	
	Текст = "Отправить на расчет плановых ставок?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросОтправитьНаРасчетПлановыхСтавок");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтправитьНаПодтвержденеиЛогистам(Команда)	
	Текст = "Отправить на подтверждение логистам?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросОтправитьНаПодтвержденеиЛогистам");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИндивидуальныеУсловияПоставки(Команда)	
	Текст = "Отправить на расчет индивидуальных цен поставки?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросИндивидуальныеУсловияПоставки");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьЗаказКлиента(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Документы");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента",
	Новый Структура("Ключ",ТекДанные.ДокументыОтгрузки),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеДокумента"));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьДокумент(Команда)	
	ИзменитьДокументВыписки();		
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзменитьПередачаВОтгрузку(Команда)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"Документы");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ОткрытьФорму("Документ.ЖБИ_ПередачаВОтгрузку.Форма.ФормаДокумента",
	Новый Структура("Ключ",ТекДанные.ДокументыОтгрузки),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированиеДокумента"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЧат(Команда)	
	ЖБИ_ОбщийМодульДокументы.ПоказатьДиалогДобавленияКомментарияВЧат(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЧат(Команда)		
	ЖБИ_ОбщийМодульДокументы.ОбновитьЧат(ЭтаФорма);	
КонецПроцедуры

&НаСервере
Функция ПроверитьВозможностьОтправитьСчетНаОплату(СообщениеОбОшибки)
	
	Отказ = Ложь;
	НайденныеСтроки = Объект.КонтрольТранспорта.НайтиСтроки(Новый Структура("СогласованоОЛиЗ",Истина));
	Если НайденныеСтроки.Количество()>0 Тогда
		Отказ = Истина;
		СообщениеОбОшибки = "Необходимо согласование с ОЛиЗ";
		Возврат Отказ;
	КонецЕсли;

	НайденныеСтроки = Объект.ОкончательныйРасчет.НайтиСтроки(Новый Структура("Пометка",Истина));
	Если НайденныеСтроки.Количество()=0 Тогда
		Отказ = Истина;
		СообщениеОбОшибки = "Не выбран поставщик на закладке Окончательный расчет";
		Возврат Отказ;
	КонецЕсли;
	
	НайденныеСтроки = Объект.ОкончательныйРасчет.НайтиСтроки(Новый Структура("Пометка",Истина));
	Для Каждого НомСтр Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(НомСтр.ЦенаПоставщика) Тогда
			Отказ = Истина;
			СообщениеОбОшибки = "Не указана цена поставщика "+НомСтр.Номенклатура;
			Возврат Отказ;
			Прервать;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НомСтр.Цена) Тогда
			Отказ = Истина;
			СообщениеОбОшибки = "Не указана цена с НДС "+НомСтр.Номенклатура;
			Возврат Отказ;
			Прервать;
		КонецЕсли;
		Если НомСтр.ИндивидуальнаяЦена Тогда
			Отказ = Истина;
			СообщениеОбОшибки = "Указан расчет индивидуальных цен "+НомСтр.Номенклатура;
			Возврат Отказ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
				
	Возврат Отказ;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТЧСчетНаОплату(СообщениеОбОшибки, ТаблицаРасчет = Неопределено, ТаблицаКонтроль = Неопределено, ВыделитьДоставку = 0, УсреднитьЦены = Ложь)
	
	Отказ = Ложь;  
	Если ТаблицаРасчет = Неопределено Тогда
		ТаблицаРасчет = Объект.ОкончательныйРасчет.Выгрузить();	
	КонецЕсли; 
	
	Если ТаблицаКонтроль = Неопределено Тогда
		ТаблицаКонтроль = Объект.КонтрольТранспорта.Выгрузить();	
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаРасчет.НайтиСтроки(Новый Структура("Пометка",Истина));
	Если НайденныеСтроки.Количество()=0 Тогда
		Отказ = Истина;
		СообщениеОбОшибки = "Не выбран поставщик на закладке Окончательный расчет";
		Возврат Отказ;
	КонецЕсли;
	 
	Объект.СчетНаОплату.Очистить(); 
	Для Каждого НомСтр Из НайденныеСтроки Цикл
		НоваяСтр 						= Объект.СчетНаОплату.Добавить();
		НоваяСтр.Пометка 				= Истина;
		НоваяСтр.КодСтроки 				= НомСтр.КодСтроки;
		НоваяСтр.Поставщик 				= НомСтр.Поставщик;
		НоваяСтр.Номенклатура 			= НомСтр.Номенклатура;
		НоваяСтр.НоменклатураПоставщика = НомСтр.НоменклатураПоставщика;
		НоваяСтр.Количество 			= НомСтр.Количество;
		НоваяСтр.Цена 					= НомСтр.Цена;
		НоваяСтр.ЦенаСоСкидкой 			= НомСтр.Цена;
		НоваяСтр.Сумма 					= НомСтр.Цена*НомСтр.Количество;
		НоваяСтр.СуммаСНДС 				= НомСтр.Цена*НомСтр.Количество;
		НоваяСтр.НормаАвто 				= НомСтр.НормаАвто;
		
		СтавкаНДС						= ЖБИ_ОбщегоНазначенияСервер.ПолучитьСтавкуНДСНаСервере(НоваяСтр.Номенклатура);
		СтавкаНДСЧисло 					= УчетНДСУПКлиентСервер.ПолучитьСтавкуНДС(СтавкаНДС);
		НоваяСтр.ЦенаБезНДС				= НоваяСтр.ЦенаСоСкидкой - НоваяСтр.ЦенаСоСкидкой * СтавкаНДСЧисло/(100 + СтавкаНДСЧисло);
		НоваяСтр.ЦенаПоставщика 		= НомСтр.ЦенаПоставщика - НомСтр.ЦенаПоставщика * СтавкаНДСЧисло/(100 + СтавкаНДСЧисло);
		НоваяСтр.СуммаБезНДС 			= НоваяСтр.ЦенаБезНДС*НомСтр.Количество;		
	КонецЦикла;
	
	Если ВыделитьДоставку = 2 Тогда	 
		//габарит  								
		ТаблицаПараметровРасчетаПоставщика 			= ЖБИ_ОбщийМодульДокументы.ПолучитьТаблицуРасчетаПоЗаявке(Объект.Ссылка,ТаблицаРасчет,ТаблицаКонтроль); 				
		НайденныеСтроки 							= ТаблицаРасчет.НайтиСтроки(Новый Структура("Пометка,Негабаритный",Истина,Ложь));
		СуммаТранспортныеРасходыГабарит 			= 0; 
		СуммаТранспортныеРасходыГабаритБезПовышКоэф = 0;
		Для Каждого НомСтр Из НайденныеСтроки Цикл			
			НайденныеСтрокиПараметры = ТаблицаПараметровРасчетаПоставщика.НайтиСтроки(Новый Структура("Поставщик,Негабаритный",НомСтр.Поставщик,НомСтр.Негабаритный));
			Если НайденныеСтрокиПараметры.Количество()=0 Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыРасчета 				    		= НайденныеСтрокиПараметры[0];	
			ЗатратыНаТранспортировку  		 			= НомСтр.ЗатратыНаТранспортировку + НомСтр.СогласнованноеКоличествоАМ;
			СуммаТранспортныеРасходыГабарит  		    = СуммаТранспортныеРасходыГабарит + (ЗатратыНаТранспортировку)*НомСтр.Количество;   
			КоэфПовышПроцент							= 1 +(ПараметрыРасчета.ПовышающийПроцент/100);
			СуммаТранспортныеРасходыГабаритБезПовышКоэф = СуммаТранспортныеРасходыГабаритБезПовышКоэф + (ЗатратыНаТранспортировку/КоэфПовышПроцент)*НомСтр.Количество;
  		КонецЦикла;
		
		НайденныеСтроки 		 = Объект.КонтрольТранспорта.НайтиСтроки(Новый Структура("Негабаритный",Ложь));
		КолРейсовГабарит 		 = 0;
		Для Каждого НомСтр Из НайденныеСтроки Цикл
			КолРейсовГабарит = КолРейсовГабарит + НомСтр.КоличествоТранспорта;							
		КонецЦикла;
		
		//не габарит
		НайденныеСтроки 								= ТаблицаРасчет.НайтиСтроки(Новый Структура("Пометка,Негабаритный",Истина,Истина));
		СуммаТранспортныеРасходыГабаритНеГабарит 		= 0;
		СуммаТранспортныеРасходыНеГабаритБезПовышКоэф 	= 0;
		Для Каждого НомСтр Из НайденныеСтроки Цикл   
			НайденныеСтрокиПараметры = ТаблицаПараметровРасчетаПоставщика.НайтиСтроки(Новый Структура("Поставщик,Негабаритный",НомСтр.Поставщик,НомСтр.Негабаритный));
			Если НайденныеСтрокиПараметры.Количество()=0 Тогда 
				Продолжить;
			КонецЕсли;
			
			ПараметрыРасчета 				    		  = НайденныеСтрокиПараметры[0];
			ЗатратыНаТранспортировку  					  = НомСтр.ЗатратыНаТранспортировку + НомСтр.СогласнованноеКоличествоАМ;	
			СуммаТранспортныеРасходыГабаритНеГабарит 	  = СуммаТранспортныеРасходыГабаритНеГабарит + (ЗатратыНаТранспортировку)*НомСтр.Количество;
			КоэфПовышПроцент							  = 1 +(ПараметрыРасчета.ПовышающийПроцент/100);
			СуммаТранспортныеРасходыНеГабаритБезПовышКоэф = СуммаТранспортныеРасходыНеГабаритБезПовышКоэф + (ЗатратыНаТранспортировку/КоэфПовышПроцент)*НомСтр.Количество
		КонецЦикла;
		
		НайденныеСтроки = Объект.КонтрольТранспорта.НайтиСтроки(Новый Структура("Негабаритный",Истина));
		КолРейсовНеГабарит = 0;
		Для Каждого НомСтр Из НайденныеСтроки Цикл
			КолРейсовНеГабарит = КолРейсовНеГабарит + НомСтр.КоличествоТранспорта;							
		КонецЦикла;
		
		Если СуммаТранспортныеРасходыГабаритБезПовышКоэф>0
			И КолРейсовГабарит>0 Тогда 
			НоменклатураДоставкаАМ 	= Справочники.Номенклатура.НайтиПоРеквизиту("Артикул","Доставка А/М");
			Если НЕ НоменклатураДоставкаАМ.Пустая() Тогда
				НоваяСтр 						= Объект.СчетНаОплату.Добавить();
				НоваяСтр.Пометка 				= Истина;
				НоваяСтр.КодСтроки 				= ПолучитьМаксимумКодСтроки("СчетНаОплату");
				НоваяСтр.Номенклатура 			= НоменклатураДоставкаАМ;
				НоваяСтр.Количество 			= КолРейсовГабарит;
				НоваяСтр.Цена 					= СуммаТранспортныеРасходыГабаритБезПовышКоэф/КолРейсовГабарит;
				НоваяСтр.ЦенаСоСкидкой 			= СуммаТранспортныеРасходыГабаритБезПовышКоэф/КолРейсовГабарит;
				НоваяСтр.Сумма 					= НоваяСтр.Цена*НоваяСтр.Количество;
				НоваяСтр.СуммаСНДС 				= НоваяСтр.Цена*НоваяСтр.Количество;
				
				СтавкаНДС						= ЖБИ_ОбщегоНазначенияСервер.ПолучитьСтавкуНДСНаСервере(НоваяСтр.Номенклатура);
				СтавкаНДСЧисло 					= УчетНДСУПКлиентСервер.ПолучитьСтавкуНДС(СтавкаНДС);
				НоваяСтр.ЦенаБезНДС				= НоваяСтр.ЦенаСоСкидкой - НоваяСтр.ЦенаСоСкидкой * СтавкаНДСЧисло/(100 + СтавкаНДСЧисло);
				НоваяСтр.ЦенаПоставщика 		= 0;
				НоваяСтр.СуммаБезНДС 			= НоваяСтр.ЦенаБезНДС*НоваяСтр.Количество;				
			КонецЕсли;			
		КонецЕсли;
		
		Если СуммаТранспортныеРасходыНеГабаритБезПовышКоэф>0
			И КолРейсовНеГабарит>0 Тогда 
			НоменклатураДоставкаАМ 	= Справочники.Номенклатура.НайтиПоРеквизиту("Артикул","Доставка А/М, НЕГАБАРИТ", Истина);
			Если НЕ НоменклатураДоставкаАМ.Пустая() Тогда				
				НоваяСтр 						= Объект.СчетНаОплату.Добавить();
				НоваяСтр.Пометка 				= Истина;
				НоваяСтр.КодСтроки 				= ПолучитьМаксимумКодСтроки("СчетНаОплату");
				НоваяСтр.Номенклатура 			= НоменклатураДоставкаАМ;
				НоваяСтр.Количество 			= КолРейсовНеГабарит;
				НоваяСтр.Цена 					= СуммаТранспортныеРасходыНеГабаритБезПовышКоэф/КолРейсовНеГабарит;
				НоваяСтр.ЦенаСоСкидкой 			= СуммаТранспортныеРасходыНеГабаритБезПовышКоэф/КолРейсовНеГабарит;
				НоваяСтр.Сумма 					= НоваяСтр.Цена*НоваяСтр.Количество;
				НоваяСтр.СуммаСНДС 				= НоваяСтр.Цена*НоваяСтр.Количество;
				
				СтавкаНДС						= ЖБИ_ОбщегоНазначенияСервер.ПолучитьСтавкуНДСНаСервере(НоваяСтр.Номенклатура);
				СтавкаНДСЧисло 					= УчетНДСУПКлиентСервер.ПолучитьСтавкуНДС(СтавкаНДС);
				НоваяСтр.ЦенаБезНДС				= НоваяСтр.ЦенаСоСкидкой - НоваяСтр.ЦенаСоСкидкой * СтавкаНДСЧисло/(100 + СтавкаНДСЧисло);
				НоваяСтр.ЦенаПоставщика 		= 0;
				НоваяСтр.СуммаБезНДС 			= НоваяСтр.ЦенаБезНДС*НоваяСтр.Количество;				
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Если УсреднитьЦены Тогда 		
		ТаблСчетНаОплату = Объект.СчетНаОплату.Выгрузить(Новый Структура("Пометка",Истина),"Номенклатура");
		ТаблСчетНаОплату.Свернуть("Номенклатура");
		ТаблСчетНаОплату.Колонки.Добавить("СредняяЦена", Новый ОписаниеТипов("Число"));
		Для Каждого НомСтр Из ТаблСчетНаОплату Цикл
			НайденныеСтроки = Объект.СчетНаОплату.НайтиСтроки(Новый Структура("Номенклатура,Пометка",НомСтр.Номенклатура, Истина));
			Сумма 			= 0;
			Количество 		= 0;
			Для Каждого Ном Из НайденныеСтроки Цикл 
				//СтруктураОтбора 					= Новый Структура("Партнер",Ном.Поставщик);
				//СтруктураПараметрыЦенообразования 	= РегистрыСведений.ЖБИ_ПараметрыЦенообразования.ПолучитьПараметрыЦенообразования(СтруктураОтбора);
				//ПроценНаценкиНаПоставщика 			= СтруктураПараметрыЦенообразования.ПроцентНаценки;
				Количество 							= Количество + Ном.Количество;
				Сумма			  					= Сумма + Ном.Цена*Ном.Количество;
			КонецЦикла;
			НомСтр.СредняяЦена = Сумма/Количество;		
		КонецЦикла;	

		Для Каждого НомСтр Из ТаблСчетНаОплату Цикл 
			НайденныеСтроки = ТаблицаРасчет.НайтиСтроки(Новый Структура("Номенклатура,Пометка",НомСтр.Номенклатура, Истина));
			Для Каждого Ном Из НайденныеСтроки Цикл 
				Ном.Цена = НомСтр.СредняяЦена;	
			КонецЦикла;
		КонецЦикла;
        Отказ = ЗаполнитьТЧСчетНаОплату(СообщениеОбОшибки, ТаблицаРасчет, ТаблицаКонтроль, ВыделитьДоставку, Ложь);
	КонецЕсли;
	
	Возврат Отказ;

КонецФункции

&НаСервере
Процедура ОтправитьСчетНаОплату()
	
	СообщениеОбОшибки = "";
	Отказ = ПроверитьВозможностьОтправитьСчетНаОплату(СообщениеОбОшибки);
	Если Отказ Тогда  
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);	
		Возврат;
	КонецЕсли;
	
	Отказ = ЗаполнитьТЧСчетНаОплату(СообщениеОбОшибки,,,Объект.ВыделитьДоставку,Объект.УсреднитьЦены);
	Если Отказ Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибки);
		Возврат;
	КонецЕсли;
	
	//Объект.УсреднитьЦены = Истина;	
	Объект.Статус 		 = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ПодготовкаСчета");
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСчетНаОплату(Команда)
	
	Текст = "Подготовить счет на оплату?";
	СтруктураСобытия = Новый Структура("ИмяСобытия","ВопросСчетНаОплату");
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьРасчетаПлановыхСтавок(СообщениеОбОшибки)
	
	Отказ = Ложь;	
	Если Объект.Ссылка.Пустая() Тогда 
		Отказ = Истина;
		СообщениеОбОшибки = "Необходимо записать документ";
		Возврат Отказ;
	КонецЕсли;
	
	Для Каждого НомСтр Из Объект.Товары Цикл 
		Если НомСтр.Выбрано = 0 Тогда 
			Отказ = Истина;
			СообщениеОбОшибки = "Укажите поставщика для товара, № строки "+НомСтр.НомерСтроки;
			Возврат Отказ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НайденныеСтроки = Объект.ПредварительныйРасчет.НайтиСтроки(Новый Структура("Пометка",Истина));
	Для Каждого НомСтр Из НайденныеСтроки Цикл
		Если НЕ НомСтр.ИндивидуальнаяЦена 
			И НЕ ЗначениеЗаполнено(НомСтр.ЦенаПоставщика) Тогда
			Отказ = Истина;
			СообщениеОбОшибки = "Не указана цена поставщика "+НомСтр.Номенклатура;
			Возврат Отказ;
			Прервать;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НомСтр.Количество) Тогда
			Отказ = Истина;
			СообщениеОбОшибки = "Не указано количество товара "+НомСтр.Номенклатура;
			Возврат Отказ;
			Прервать;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НомСтр.ПунктОтгрузки) Тогда
			Отказ = Истина;
			СообщениеОбОшибки = "Не указан пункт отгрузки для товара "+НомСтр.Номенклатура;
			Возврат Отказ;
			Прервать;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НомСтр.НормаАвто) Тогда
			Отказ = Истина;
			СообщениеОбОшибки = "Не указана норма погрузки "+НомСтр.Номенклатура;
			Возврат Отказ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Функция ВыполнитьКомандуРасчетПлановыхСтавокСервер(УстановитьСтатусОкончательныйРасчет, СообщениеОбОшибки)
	
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	НужноСчитатьЦены = Ложь;
	НайденныеСтроки = Объект.ПредварительныйРасчет.НайтиСтроки(Новый Структура("Пометка,ИндивидуальнаяЦена",Истина,Истина));
	Если НайденныеСтроки.Количество()>0 Тогда 
		НужноСчитатьЦены = Истина;	
	КонецЕсли;
	
	ТаблицаРасчетаСтавок = ПолучитьРасчетнуюТаблицуРасчетСтавок(Объект.ПредварительныйРасчет);
	Если ТаблицаРасчетаСтавок.Количество() = 0 Тогда
		Если НЕ НужноСчитатьЦены Тогда 
			ИзменитьСтатусЗаявкиСервер();
			УстановитьСтатусОкончательныйРасчет = Истина;
			Возврат Отказ;
		Иначе 
			//отправляем на расчет инд. цен
			Отказ = Документы.ЖБИ_ЗаявкиПокупателей.ВыполнитьКомандуРасчетИндивидуальныхУсловияПоставкиПоДокументу(Объект.Ссылка, СообщениеОбОшибки);
			ЗафиксироватьТранзакцию();
			Возврат Отказ;
		КонецЕсли;
	Иначе 
		//отправляем на расчет ставок
		Отказ = Документы.ЖБИ_ЗаявкиПокупателей.ВыполнитьКомандуРасчетПлановыхСтавок(Объект.Ссылка, Объект.ПредварительныйРасчет.Выгрузить(), СообщениеОбОшибки);
		Если Отказ Тогда 
			Возврат Отказ;
		КонецЕсли;
	КонецЕсли;	
	
	//отправляем на расчет инд. цен
	Отказ = Документы.ЖБИ_ЗаявкиПокупателей.ВыполнитьКомандуРасчетИндивидуальныхУсловияПоставкиПоДокументу(Объект.Ссылка, СообщениеОбОшибки); 
	Если Отказ Тогда 
		Возврат Отказ;
	КонецЕсли;
		
	ЗафиксироватьТранзакцию();
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция ИзменитьСтатусыДокументов(СообщениеОбОшибки, Статус)
	
	Отказ = Ложь;
	Объект.Статус = Статус;
	Попытка
		Записать();
	Исключение
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
	КонецПопытки;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусЗаявкиСервер()
	
	Отказ = Ложь;
	ОбъекЗаявка = РеквизитФормыВЗначение("Объект");
	Документы.ЖБИ_РасчетПлановыхСтавок.ИзменитьСтатусЗаявкиПокупателяОкончательныйРасчетБезДокумента(ОбъекЗаявка);
	ЗначениеВРеквизитФормы(ОбъекЗаявка, "Объект");
	
КонецПроцедуры

//&НаКлиенте
//Функция ПроверитьРасчетСтавок()
//	
//	СтавкиРассчитаны = Истина;
//	НайденныеСтроки = Объект.ПредварительныйРасчет.НайтиСтроки(Новый Структура("Пометка",Истина));
//	Для Каждого НомСтр Из НайденныеСтроки Цикл
//		Если НомСтр.ИндивидуальнаяПлановаяСтавка Тогда  //ставка должна быть обязательно расчитана
//			СтавкиРассчитаны = Ложь;
//			Прервать;
//		КонецЕсли;
//		Если НомСтр.УкрупненнаяСтавка=0 Тогда 
//			СтавкиРассчитаны = Ложь;
//			Прервать;
//		КонецЕсли;
//		Если НомСтр.Негабаритный Тогда 
//			СтавкиРассчитаны = Ложь;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	
//	Возврат СтавкиРассчитаны;
//	
//КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРасчетнуюТаблицуРасчетСтавок(ПредварительныйРасчет)
	
	ТЗФормы = ПредварительныйРасчет.Выгрузить();
	ТаблицаРасчетаСтавок = ТЗФормы.СкопироватьКолонки();
	
	СтавкиРассчитаны = Истина;
	НайденныеСтроки = ТЗФормы.НайтиСтроки(Новый Структура("Пометка",Истина));
	Для Каждого НомСтр Из НайденныеСтроки Цикл
		Если НомСтр.ИндивидуальнаяПлановаяСтавка //ставка должна быть обязательно расчитана
			ИЛИ НомСтр.УкрупненнаяСтавка=0 
			ИЛИ НомСтр.Негабаритный Тогда  
			НоваяСтр = ТаблицаРасчетаСтавок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр,НомСтр);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРасчетаСтавок;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьНаРасчетПлановыхСтавок()
	
	Записать();
	
	СообщениеОбОшибки = "";
	Сообщение = Новый СообщениеПользователю;
	Отказ = ПроверитьВозможностьРасчетаПлановыхСтавок(СообщениеОбОшибки);
	Если Отказ Тогда
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	////если ставки рассчитаны, не нужно создавать документ расчет ставок
	//СтавкиРассчитаны = ПроверитьРасчетСтавок();
	//Если СтавкиРассчитаны Тогда
	//	Отказ = ИзменитьСтатусЗаявкиСервер(Объект.Ссылка,СообщениеОбОшибки);
	//	Если Отказ Тогда
	//		Сообщение.Текст = СообщениеОбОшибки;
	//		Сообщение.Сообщить();
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Сообщение.Текст = "Документ отправлен на окончательный расчет!";
	//	Сообщение.Сообщить();
	//	ЭтаФорма.Прочитать();
	//	ОбновитьЭлементыФормыИнформацию();
	//	Возврат;	
	//КонецЕсли;
	
	//ИмяТЧ = "ПредварительныйРасчет";
	
	УстановитьСтатусОкончательныйРасчет = Ложь;
	Отказ = ВыполнитьКомандуРасчетПлановыхСтавокСервер(УстановитьСтатусОкончательныйРасчет, СообщениеОбОшибки);
	Если Отказ Тогда
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли; 
	
	Если НЕ УстановитьСтатусОкончательныйРасчет Тогда 
		Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ОтправленНаРасчетПлановыхСтавок");
		Отказ = ИзменитьСтатусыДокументов(СообщениеОбОшибки, Статус);
		Если Отказ Тогда
			Сообщение.Текст = СообщениеОбОшибки;
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	Иначе 
		Если Отказ Тогда
			Сообщение.Текст = СообщениеОбОшибки;
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		Записать();
	КонецЕсли;
	
	Сообщение.Текст = "Документ отправлен на расчет плановых ставок!";
	Сообщение.Сообщить();
	ОбновитьЭлементыФормыИнформацию();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьОтправитьНаПодтвержденеиЛогистам(СообщениеОбОшибки)
	
	Отказ = Ложь;		
	НайденныеСтроки = Объект.КонтрольТранспорта.НайтиСтроки(Новый Структура("СогласованоОЛиЗ",Истина));
	Если НайденныеСтроки.Количество()=0 Тогда
		Отказ = Истина;
		СообщениеОбОшибки = "Не заполнено поле <Согласовано с ОЛиЗ>";
		Возврат Отказ;
	КонецЕсли;
	
	НайденныеСтроки = Объект.ОкончательныйРасчет.НайтиСтроки(Новый Структура("Пометка",Истина));
	Для Каждого НомСтр Из НайденныеСтроки Цикл
		Если НомСтр.ИндивидуальнаяЦена Тогда
			Отказ = Истина;
			СообщениеОбОшибки = "Указан расчет индивидуальных цен "+НомСтр.Номенклатура;
			Возврат Отказ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция ПроверитьРасчетИндивидуальныхУсловияПоставки(ТекДанныеСтроки,СообщениеОбОшибки)
	
	Отказ = Ложь;
	Если Не ТекДанныеСтроки.Пометка Тогда 
		Отказ = Истина;
		СообщениеОбОшибки = "Укажите поставщика";
		Возврат Отказ;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьКомандуПодтвержденияПлановыхСтавок(Ссылка,СообщениеОбОшибки)
	
	НачатьТранзакцию();
	Отказ = Документы.ЖБИ_ЗаявкиПокупателей.ВыполнитьКомандуПодтвержденияПлановыхСтавок(Ссылка,СообщениеОбОшибки);
	ЗафиксироватьТранзакцию();
	Возврат Отказ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьКомандуОтправитьНаИндивидуальныеУсловияПоставки(Ссылка,СообщениеОбОшибки)
	
	НачатьТранзакцию();
	Отказ = Документы.ЖБИ_ЗаявкиПокупателей.ВыполнитьКомандуОтправитьНаИндивидуальныеУсловияПоставки(Ссылка,СообщениеОбОшибки);
	ЗафиксироватьТранзакцию();
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьНаПодтвержденеиЛогистам()
	
	Записать();
	
	СообщениеОбОшибки = "";
	Сообщение = Новый СообщениеПользователю;
	Отказ = ПроверитьВозможностьОтправитьНаПодтвержденеиЛогистам(СообщениеОбОшибки);
	Если Отказ Тогда
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Отказ = ВыполнитьКомандуПодтвержденияПлановыхСтавок(Объект.Ссылка,СообщениеОбОшибки);
	Если Отказ Тогда
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ПодтверждениеЛогистами");	
	Отказ = ИзменитьСтатусыДокументов(СообщениеОбОшибки, Статус);
	Если Отказ Тогда
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	Сообщение.Текст = "Документ отправлен на подтверждение логистам!";
	Сообщение.Сообщить();
	ОбновитьЭлементыФормыИнформацию();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьОтправитьНаВыпискаДокументов(СообщениеОбОшибки)
	
	Отказ = Ложь;	
	НайденныеСтроки = Объект.СчетНаОплату.НайтиСтроки(Новый Структура("Пометка",Истина));
	Если НайденныеСтроки.Количество()=0 Тогда
		Отказ = Истина;
		СообщениеОбОшибки = "Не выбран поставщик на закладке Счет на оплату";
		Возврат Отказ;
	КонецЕсли;
	
	НайденныеСтроки = Объект.СчетНаОплату.НайтиСтроки(Новый Структура("Пометка",Истина));
	Для Каждого НомСтр Из НайденныеСтроки Цикл
		Если Не ЗначениеЗаполнено(НомСтр.Цена) Тогда
			Отказ = Истина;
			СообщениеОбОшибки = "Не указана цена с НДС "+НомСтр.Номенклатура;
			Возврат Отказ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьНаВыпискаДокументов()
	
	СообщениеОбОшибки = "";
	Сообщение = Новый СообщениеПользователю;
	Отказ = ПроверитьВозможностьОтправитьНаВыпискаДокументов(СообщениеОбОшибки);
	Если Отказ Тогда
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВыпискаДокументов");
	Записать();
	Сообщение.Текст = "Документ отправлен на выписку документов";
	Сообщение.Сообщить();
	ОбновитьЭлементыФормыИнформацию();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьСозданияЗаказаПокупателя(СообщениеОбОшибки)
	
	Отказ = Ложь;			
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.ВыпискаДокументов") Тогда
		Отказ = Истина;
		СообщениеОбОшибки = "Создавать док-ты можно только из статуса <Выписка документов>";
		Возврат Отказ;
	КонецЕсли;
	
	Для Каждого НомСтр Из Объект.Документы Цикл 
		Если ЗначениеЗаполнено(НомСтр.ДокументыОтгрузки)
			И ТипЗнч(НомСтр.ДокументыОтгрузки) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Отказ = Истина;
			СообщениеОбОшибки = "Нельзя создавать несколько счетов по заявке";
			Возврат Отказ;		
		КонецЕсли
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДокументыОтгрузки(СтруктураДобавления,СообщениеОбОшибки)
	
	Отказ = Ложь;
	НоваяСтр = Объект.Документы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтр,СтруктураДобавления);
	
	Если Не ЗначениеЗаполнено(НоваяСтр.ДокументыОтгрузки)
		И Не ЗначениеЗаполнено(НоваяСтр.СправочникиОтгрузки) Тогда 
		СообщениеОбОшибки = "Ошибка заполнения таблицы Документы";
		Отказ = Истина;
		Возврат Отказ;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
	КонецПопытки;
	
	Возврат Отказ;
	
КонецФункции

&НаСервере
Функция ВыполнитьКомандуСоздатьЗаказКлиентаСервер(Ссылка,Отказ,СообщениеОбОшибки)
	
	ЗаказПокупателяСсылка = Документы.ЖБИ_ЗаявкиПокупателей.СоздатьЗаказКлиента(Объект.Ссылка,Отказ,СообщениеОбОшибки);
	Если Отказ Тогда
		Возврат Отказ;
	КонецЕсли;
	
	СтруктураДобавления = Новый Структура("Дата,ДокументыОтгрузки,Автор",ТекущаяДата(),ЗаказПокупателяСсылка,Пользователи.ТекущийПользователь());
	Отказ = ЗаполнитьДокументыОтгрузки(СтруктураДобавления,СообщениеОбОшибки);
	
	Возврат ЗаказПокупателяСсылка;
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаказКлиента()	
	
	СообщениеОбОшибки = "";
	Сообщение = Новый СообщениеПользователю;
	Отказ = ПроверитьВозможностьСозданияЗаказаПокупателя(СообщениеОбОшибки);
	Если Отказ Тогда
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Записать();
	ЗаказПокупателяСсылка = ВыполнитьКомандуСоздатьЗаказКлиентаСервер(Объект.Ссылка,Отказ,СообщениеОбОшибки);
	Если Отказ Тогда
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.ЗаказКлиента.Форма.ФормаДокумента",Новый Структура("Ключ",ЗаказПокупателяСсылка));
	ОбновитьЭлементыФормыИнформацию();
	ОбновитьТаблицуСДокументами();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзменитьДоговор(СсылкаНаДоговор = Неопределено)	
	
	Если СсылкаНаДоговор = Неопределено Тогда
		НомерЗаказа = "";
		Для Каждого НомСтр Из Объект.Документы Цикл 
			Если ЗначениеЗаполнено(НомСтр.ДокументыОтгрузки)
				И ТипЗнч(НомСтр.ДокументыОтгрузки) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				НомерЗаказа = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(НомСтр.ДокументыОтгрузки,"Номер");		
			КонецЕсли
		КонецЦикла;
		
		Если ПустаяСтрока(НомерЗаказа) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Нельзя создать договор, т.к. не добавлен Заказ покупателя");
			Возврат;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура("Партнер,Контрагент,НомерЗаказа",Объект.Партнер, Объект.Контрагент,НомерЗаказа);
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента",
		Новый Структура("ЗначенияЗаполнения",ДанныеЗаполнения),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаСозданияДоговора"),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе 
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента",
		Новый Структура("Ключ",СсылкаНаДоговор),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаРедактированияДоговора"),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговор()	
	
	ХозяйственнаяОперация 	= Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Объект.Договор 			= ПродажиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															ХозяйственнаяОперация, 
															Объект.Валюта);	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()	
	Объект.Контрагент = ЖБИ_ОбщийМодульДокументы.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер);	
	ЗаполнитьДоговор();	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	ПартнерПриИзмененииСервер();		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	ЗаполнитьДоговор();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогИзмененияПроцентаНаценки(ДополнительныеПараметры)
	
	ДополнительныеПараметры.ИмяСобытия = "ВводаЗначенияИзмененияПроцентаНаценки";
	ВыбЗнач = 0;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(10);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите значение", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентНаценкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отказ = ПоверитьДоступностьПоляПоСтатусу();
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Изменить % наценки?";
	СтруктураСобытия = Новый Структура("ИмяСобытия,ТекДанные","ВопросИзмененияПроцента",Элемент);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры


&НаКлиенте
Процедура ПунктНазначенияПриИзменении(Элемент)	
	ВыполнитьПредварительныйРасчет();		
КонецПроцедуры

&НаКлиенте
Процедура ПунктНазначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("РегистрСведений.ЖБИ_ПунктыНазначенияОтгрузки.Форма.ФормаВыбора",
	Новый Структура("Партнер",Объект.Партнер),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаВыбораПунктНазначения"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктНазначенияСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Владелец, ЭтоДокумент", Объект.Партнер, Истина);
	ОткрытьФорму("Справочник.ЖБИ_ПунктыНазначенияОтгрузки.Форма.ФормаЭлемента",
	СтруктураПараметров,
	ЭтаФорма,,,,);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ОбновитьЭлементыФормыИнформацию();
	ОбновитьТаблицуСДокументами();
	
КонецПроцедуры

#Область ТоварыПредвРасчет

&НаСервере
Процедура РасчитатьЦенуПоставщикаСервер(Пакет, Номенклатура);
	
	ТаблПредвРасчет = Объект.ПредварительныйРасчет.Выгрузить();
	НайденыеСтроки = НайтиСтрокиТЗПоНоменклатуре(Пакет,Номенклатура,ТаблПредвРасчет);
	Для Каждого НомСтр Из НайденыеСтроки Цикл 
		Если НомСтр.ЦенаПоставщика>0 Тогда 
			Продолжить;
		КонецЕсли;
		ЖБИ_ОбщийМодульДокументы.РасчитатьЦенуПоставщикаСервер(НомСтр);
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТаблПредвРасчет,Объект.ПредварительныйРасчет);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьЦенуПоставщика(Пакет, Номенклатура);
 	
	РасчитатьЦенуПоставщикаСервер(Пакет, Номенклатура);
			
КонецПроцедуры

&НаСервере
Процедура РасчитатьСтавкиТЧЗаявкиСервер(Пакет, Номенклатура)
	
	//СтруктураПараметров = Новый Структура("Пометка,Номенклатура,ПунктНазначения",Ложь,Номенклатура,Объект.ПунктНазначения); //Пометка = Ложь, значит расчет делаем только по новым позициям
	ТаблПредвРасчет = Объект.ПредварительныйРасчет.Выгрузить();
	НайденыеСтроки = НайтиСтрокиТЗПоНоменклатуре(Пакет,Номенклатура,ТаблПредвРасчет);
	Для Каждого НомСтр Из НайденыеСтроки Цикл 
		СтруктураПараметров = Новый Структура("Поставщик,КодСтроки,Номенклатура,Негабаритный,ПунктНазначения",НомСтр.Поставщик,НомСтр.КодСтроки,НомСтр.Номенклатура,НомСтр.Негабаритный,Объект.ПунктНазначения);
		ЖБИ_ОбщийМодульДокументы.РасчитатьСтавкиТЧЗаявки(ТаблПредвРасчет,СтруктураПараметров);
		ЖБИ_ОбщийМодульДокументы.РасчитатьПредварительныеСтавкиТЧЗаявки(ТаблПредвРасчет,СтруктураПараметров);	
		ЗначениеВДанныеФормы(ТаблПредвРасчет,Объект.ПредварительныйРасчет);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьСтоимостьСервер(ИмяТаблицы, ТекДанныеСтруктура = Неопределено)
	
	ТаблРасчет = Объект[ИмяТаблицы].Выгрузить();
	ТаблицаКонтроль = Объект.КонтрольТранспорта.Выгрузить();
	Если ТаблРасчет.Количество()>0 Тогда 
		ЖБИ_ОбщийМодульДокументы.РасчитатьСтоимость(Объект.Ссылка,ТаблРасчет,ТаблицаКонтроль);
		ЗначениеВДанныеФормы(ТаблРасчет,Объект[ИмяТаблицы]);
	КонецЕсли;
	
	Если ТекДанныеСтруктура <> Неопределено Тогда 
		СтруктураОтбора = Новый Структура("Пометка,Поставщик,Негабаритный",Истина,ТекДанныеСтруктура.Поставщик,ТекДанныеСтруктура.Негабаритный);
		НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда 
			НомСтрКонтроль 	= РассчитатьИтогиПоТаблицеКонтрольТранспорта(Ложь,"",ТекДанныеСтруктура,НайденныеСтроки,Истина);
			СтрКонтроль	 	= Объект.КонтрольТранспорта[НомСтрКонтроль.НомерСтроки-1];
			ЗаполнитьЗначенияСвойств(СтрКонтроль,НомСтрКонтроль);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьНоменклатуруПоПоставщикамСервер(СтруктураСтрокаТЧ)
	ТоварыПоставщика = Документы.ЖБИ_ЗаявкиПокупателей.ЗаполнитьНоменклатуруПоПоставщикам(СтруктураСтрокаТЧ.Номенклатура);
	Возврат ТоварыПоставщика;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоПоставщикамКлиент(СтруктураСтрокаТЧ, ИмяТаблицы)
	
	НайденныеСтроки = НайтиСтрокиТЧПоНоменклатуре(СтруктураСтрокаТЧ.Пакет,СтруктураСтрокаТЧ.Номенклатура,ИмяТаблицы); 
	КодСтроки 		= 0;
	Если НайденныеСтроки.Количество()>0 Тогда
		Для Каждого НомСтр Из НайденныеСтроки Цикл 
			ЗаполнитьЗначенияСвойств(НомСтр,СтруктураСтрокаТЧ);
			Если Не ЗначениеЗаполнено(НомСтр.КодСтроки) Тогда
				Если КодСтроки>0 Тогда
					КодСтроки 		 = КодСтроки + 1;
					НомСтр.КодСтроки = КодСтроки;
				Иначе
					КодСтроки 		 = ПолучитьМаксимумКодСтроки(ИмяТаблицы);
					НомСтр.КодСтроки = КодСтроки;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ТоварыПоставщика = ЗаполнитьНоменклатуруПоПоставщикамСервер(СтруктураСтрокаТЧ); 
	КодСтроки		 = 0;
	Для Каждого НомСтр Из ТоварыПоставщика Цикл 
		НоваяСтр  = Объект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,НомСтр);
		Если Не ЗначениеЗаполнено(НоваяСтр.Пакет) Тогда
			НоваяСтр.Пакет = СтруктураСтрокаТЧ.Пакет;	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтр.КодСтроки) Тогда
			Если КодСтроки>0 Тогда 
				КодСтроки 		   = КодСтроки + 1;
				НоваяСтр.КодСтроки = КодСтроки;
			Иначе
				КодСтроки 		   = ПолучитьМаксимумКодСтроки(ИмяТаблицы);
				НоваяСтр.КодСтроки = КодСтроки;
			КонецЕсли;	
		КонецЕсли;
		Если Не ЗначениеЗаполнено(НоваяСтр.Номенклатура) Тогда
			НоваяСтр.Номенклатура = СтруктураСтрокаТЧ.Номенклатура;	
		КонецЕсли;
		НоваяСтр.Количество = СтруктураСтрокаТЧ.Количество;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоПоПоставщикамКлиент(СтруктураСтрокаТЧ)
	
	КолВо = 0;
	НайденныеСтроки = НайтиСтрокиТЧПоНоменклатуре(СтруктураСтрокаТЧ.Пакет,СтруктураСтрокаТЧ.Номенклатура,"ОкончательныйРасчет");
	Для Каждого НомСтр Из НайденныеСтроки Цикл 
		КолВо = КолВо + НомСтр.Количество;
	КонецЦикла;
	
	НайденныеСтроки = НайтиСтрокиТЧПоНоменклатуре(СтруктураСтрокаТЧ.Пакет,СтруктураСтрокаТЧ.Номенклатура,"Товары");
	НайденныеСтроки[0].Количество = КолВо;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоОкончательныйРасчет(СтруктураСтрокаТЧ)

	//НайденныеСтроки = Объект.ОкончательныйРасчет.НайтиСтроки(Новый Структура("Пакет,Пометка,Номенклатура",СтруктураСтрокаТЧ.Пакет,Истина,СтруктураСтрокаТЧ.Номенклатура));
	//Если НайденныеСтроки.Количество()>1 Тогда
	//	Для Каждого НомСтр Из НайденныеСтроки Цикл
	//		НомСтр.Количество = 0;	
	//	КонецЦикла;
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокТаблицыРасчета(Пакет, Номенклатура, ИмяТаблицы)
	
	Если Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
		Элементы[ИмяТаблицы].ОтборСтрок = Неопределено;
	Иначе 
		Элементы[ИмяТаблицы].ОтборСтрок = Новый ФиксированнаяСтруктура("Пакет, Номенклатура", Пакет, Номенклатура);	
	КонецЕсли
	
КонецПроцедуры

Процедура УстановитьСортировкуПоУмолчанию(ИмяТаблицы)		
	Объект.ПредварительныйРасчет.Сортировать("Цена");	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьТекСтрокуКакСтруктура(ТекДанные,ИмяТаблицы)
	
	Если ИмяТаблицы = "ТоварыПредвРасчет"
		ИЛИ ИмяТаблицы = "ТоварыОкончРасчет" Тогда 
		СтруктураСтрокаТЧ = Новый Структура("Пакет,КодСтроки,Номенклатура,Количество,Выбрано");
	ИначеЕсли ИмяТаблицы = "ОкончательныйРасчет" Тогда
		СтруктураСтрокаТЧ = Новый Структура("Пакет,КодСтроки,Пометка,Поставщик,Негабаритный,Номенклатура,Количество,Поставщик,Негабаритный,НормаАвто,ОбщийВес,ОбщийОбъем,Сумма,ДопЗатратыНаМатериалы");
	ИначеЕсли ИмяТаблицы = "КонтрольТранспорта" Тогда
		СтруктураСтрокаТЧ = Новый Структура("НомерСтроки,Поставщик,Негабаритный,КоличествоТранспорта,НормаАвто,ОбщийВес,ОбщийОбъем,Сумма,ПроцентНаценки,СогласованоОЛиЗ,ДопЗатратыНаМатериалы,УдалитьСтроку");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураСтрокаТЧ,ТекДанные);
	
	Возврат СтруктураСтрокаТЧ;
		
КонецФункции

&НаСервере
Функция ЗаполнитьТекСтрокуКакСтруктураСервер(ТекДанныеТЗ,ИмяТаблицы)
	
	Если ИмяТаблицы = "ТоварыПредвРасчет"
		ИЛИ ИмяТаблицы = "ТоварыОкончРасчет" Тогда 
		СтруктураСтрокаТЧ = Новый Структура("Номенклатура,Количество,Выбрано");
	ИначеЕсли ИмяТаблицы = "ОкончательныйРасчет" Тогда
		СтруктураСтрокаТЧ = Новый Структура("Пометка,Номенклатура,Количество,Поставщик,Негабаритный,НормаАвто,ОбщийВес,ОбщийОбъем,Сумма,ДопЗатратыНаМатериалы");
	ИначеЕсли ИмяТаблицы = "КонтрольТранспорта" Тогда
		СтруктураСтрокаТЧ = Новый Структура("НомерСтроки,Поставщик,Негабаритный,КоличествоТранспорта,НормаАвто,ОбщийВес,ОбщийОбъем,Сумма,ПроцентНаценки,СогласованоОЛиЗ,ДопЗатратыНаМатериалы,УдалитьСтроку");
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураСтрокаТЧ,ТекДанныеТЗ);
	
	Возврат СтруктураСтрокаТЧ;
		
КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТоварыПредвРасчет");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	

	Если Не ЗначениеЗаполнено(ТекДанные.Пакет) Тогда
		ТекДанные.Пакет = ПолучитьМаксимумНомерПакета(ТекДанные.Пакет,"Товары");
	КонецЕсли;	
		
	Если ТекДанные.Количество = 0 Тогда 
		ТекДанные.Количество = 1;
	КонецЕсли;
		
	//расчет цены поставщика
	ТекДанныеСтруктура = ЗаполнитьТекСтрокуКакСтруктура(ТекДанные,"ТоварыПредвРасчет");
	ЗаполнитьНоменклатуруПоПоставщикамКлиент(ТекДанныеСтруктура,"ПредварительныйРасчет");
	РасчитатьЦенуПоставщика(ТекДанные.Пакет,ТекДанные.Номенклатура);
	
	//заполнение ставки
	РасчитатьСтавкиТЧЗаявкиСервер(ТекДанные.Пакет, ТекДанные.Номенклатура);
	
	//расчет стоимости
	РасчитатьСтоимостьСервер("ПредварительныйРасчет");
	
	УстановитьОтборСтрокТаблицыРасчета(ТекДанные.Пакет, ТекДанные.Номенклатура,"ПредварительныйРасчет");
	УстановитьСортировкуПоУмолчанию("ПредварительныйРасчет");

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТоварыПредвРасчет");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ТекДанныеСтруктура = ЗаполнитьТекСтрокуКакСтруктура(ТекДанные,"ТоварыПредвРасчет");
	ЗаполнитьНоменклатуруПоПоставщикамКлиент(ТекДанныеСтруктура,"ПредварительныйРасчет");
	РасчитатьЦенуПоставщика(ТекДанные.Пакет, ТекДанные.Номенклатура);
	
	//заполнение ставки	
	РасчитатьСтавкиТЧЗаявкиСервер(ТекДанные.Пакет, ТекДанные.Номенклатура);
	
	//расчет стоимости
	РасчитатьСтоимостьСервер("ПредварительныйРасчет");
	
	УстановитьОтборСтрокТаблицыРасчета(ТекДанные.Пакет, ТекДанные.Номенклатура,"ПредварительныйРасчет");
	УстановитьСортировкуПоУмолчанию("ПредварительныйРасчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)	
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТоварыПредвРасчет");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда 
		Возврат;
	КонецЕсли;	
	
	УстановитьОтборСтрокТаблицыРасчета(ТекДанные.Пакет, ТекДанные.Номенклатура,"ПредварительныйРасчет");
	ОбновитьИнфоПоВыбранномуТовару();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредвРасчетПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда 
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТоварКлиент(ДопПараметры)
	
	Номенклатура 	= ДопПараметры.ТекДанные.Номенклатура;
	Пакет 		= ДопПараметры.ТекДанные.Пакет;	
	ИндексПоследнего = Объект.ПредварительныйРасчет.Количество() - 1;
	Для Индекс = 0 По ИндексПоследнего Цикл 
		Если Объект.ПредварительныйРасчет[ИндексПоследнего - Индекс].Пакет = Пакет Тогда  
			Объект.ПредварительныйРасчет.Удалить(ИндексПоследнего - Индекс);	
		КонецЕсли;
	КонецЦикла;
		
	ИндексПоследнего = Объект.Товары.Количество() - 1;
	Для Индекс = 0 По ИндексПоследнего Цикл 
		Если Объект.Товары[ИндексПоследнего - Индекс].Пакет = Пакет Тогда  
			Объект.Товары.Удалить(ИндексПоследнего - Индекс);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТоварыПредвРасчет");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Текст = "Удалить товар: "+ТекДанные.Номенклатура+"?";
	СтруктураПраметров = Новый Структура("ТекДанные,Отказ",ТекДанные,Отказ);
	СтруктураСобытия = Новый Структура("ИмяСобытия, ДопПараметры","УдалитьТовар",СтруктураПраметров);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

#КонецОбласти

#Область ТоварыОкончРасчет

&НаКлиенте
Процедура ТоварыОкончРасчетПриАктивизацииСтроки(Элемент)	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ТоварыОкончРасчет");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьОтборСтрокТаблицыРасчета(ТекДанные.Пакет, ТекДанные.Номенклатура,"ОкончательныйРасчет");
	ОбновитьИнфоПоВыбранномуТовару();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОкончРасчетПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОкончРасчетПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ПредварительныйРасчет

 &НаКлиенте
Процедура ПредварительныйРасчетПриАктивизацииСтроки(Элемент)	
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюПредварительныйРасчет", 0.2, Истина);	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйРасчетПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)	
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйРасчетПередУдалением(Элемент, Отказ)	
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйРасчетПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйРасчетПоставщикНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйРасчетПометкаПриИзменении(Элемент)
	
	ОбновитьИнфоПоВыбранномуТовару();	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьКомандуРасчетИндивидуальныхУсловияПоставкиПоНоменклатуреСервер(СтруктураПараметрров, СообщениеОбОшибки)
	
	НачатьТранзакцию();
	Отказ = Документы.ЖБИ_ЗаявкиПокупателей.ВыполнитьКомандуРасчетИндивидуальныхУсловияПоставкиПоНоменклатуре(СтруктураПараметрров, СообщениеОбОшибки);
	ЗафиксироватьТранзакцию();
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьРасчетИндивидуальныхУсловияПоставкиПоНоменклатуре(ТекДанные, ИмяТЧ)
	
	СообщениеОбОшибки = "";
	Сообщение = Новый СообщениеПользователю;
	Отказ = ПроверитьРасчетИндивидуальныхУсловияПоставки(ТекДанные,СообщениеОбОшибки);
	Если Отказ Тогда
		ТекДанные.ИндивидуальнаяЦена = Ложь;
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	Записать();	
	СтруктураПараметров = Новый Структура("Ссылка,КодСтроки,Номенклатура,НоменклатураПоставщика,ИмяТЧ",Объект.Ссылка,ТекДанные.КодСтроки,ТекДанные.Номенклатура,ТекДанные.НоменклатураПоставщика,ИмяТЧ);
	Отказ = ВыполнитьКомандуРасчетИндивидуальныхУсловияПоставкиПоНоменклатуреСервер(СтруктураПараметров, СообщениеОбОшибки);
	Если Отказ Тогда
		ТекДанные.ИндивидуальнаяЦена = Ложь;
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ТекДанные.ИндивидуальнаяЦена = Истина;
	
	Записать();
	
	Сообщение.Текст = "Документ отправлен на расчет индивидуальных цен поставщика";
	Сообщение.Сообщить();
	ОбновитьЭлементыФормыИнформацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросРасчетаИндивидуальныхЦен()
	
	Если Элементы.ГруппаСтраницыЛево.ТекущаяСтраница = Элементы.ГруппаПредварительныйРасчет Тогда 
		ИмяТЧ = "ПредварительныйРасчет";
	Иначе 
		ИмяТЧ = "ОкончательныйРасчет";
	КонецЕсли;
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,ИмяТЧ);
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекДанные.ИндивидуальнаяЦена Тогда
		ТекДанные.ИндивидуальнаяЦена = Истина;
		Возврат;
	КонецЕсли;
	
	Текст = "Выполнить индивидуальный расчет цен?";
	СтруктураСобытия = Новый Структура("ИмяСобытия,ТекДанные,ИмяТЧ","ВопросИндивидуальныеУсловияПоставки",ТекДанные,ИмяТЧ);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйРасчетИндивидуальнаяЦенаПриИзменении(Элемент)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ПредварительныйРасчет");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.Поставщик,"ЖБИ_ИндивидуальнаяЦена") Тогда 
		ТекДанные.ИндивидуальнаяЦена = Истина;
		Возврат;
	КонецЕсли;
	
	//ПоказатьВопросРасчетаИндивидуальныхЦен();	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйРасчетПунктОтгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ПредварительныйРасчет");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("РегистрСведений.ЖБИ_ПунктыНазначенияОтгрузки.Форма.ФормаВыбора",
	Новый Структура("Партнер",ТекДанные.Поставщик),
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, "ФормаВыбораПунктОтгрузки"));
	
КонецПроцедуры

#КонецОбласти

#Область ОкончательныйРасчет 

&НаКлиенте
Процедура ОкончательныйРасчетПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработатьАктивизациюОкончательныйРасчет", 0.2, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОкончательныйРасчетКоличествоПриИзменении(Элемент)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ОкончательныйРасчет");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекДанныеСтруктура = ЗаполнитьТекСтрокуКакСтруктура(ТекДанные,"ОкончательныйРасчет");
	//ЗаполнитьКоличествоПоПоставщикамКлиент(ТекДанныеСтруктура);
	Если Не ТекДанные.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуКонтрольТранспортаПоВыбраннойСтроке(ТекДанныеСтруктура);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончательныйРасчетПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОкончательныйРасчетПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОкончательныйРасчетПоставщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОкончательныйРасчетПоставщикНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Функция ВыполнитьРасчетНедогрузаСервер(СтруктураСтроки,ПересчитатьКличествоТранспорта = Ложь)
	
	СтрокаРасчетаТЧ 				= СтруктураСтроки;	
	Поставщик 						= СтрокаРасчетаТЧ.Поставщик;
	Негабаритный					= СтрокаРасчетаТЧ.Негабаритный;
		
	СтруктураОтбора 				= Новый Структура("Пометка,Поставщик,Негабаритный",Истина,Поставщик,Негабаритный);
	СтрокаРасчетаТЧ.УдалитьСтроку 	= Ложь;
	НайденныеСтроки = Объект.ОкончательныйРасчет.НайтиСтроки(СтруктураОтбора);
	Если НайденныеСтроки.Количество()=0 Тогда //сняты все галки с товаров
		СтрокаРасчетаТЧ.УдалитьСтроку = Истина;
		Возврат СтрокаРасчетаТЧ;
	КонецЕсли;	
		
	Возврат СтрокаРасчетаТЧ;
	
КонецФункции

&НаСервере
Функция РассчитатьИтогиПоТаблицеКонтрольТранспорта(ДобавитьСтроку,СтруктураСтроки,
	ТекСтрКонтроль = Неопределено,
	ТаблицаПересчетаПоПоставщикам = Неопределено,
	ПересчитатьКличествоТранспорта = Ложь)
	
	Если ДобавитьСтроку Тогда 
		ТекСтр 									= Объект.КонтрольТранспорта.Добавить();
		ТекСтр.Поставщик 						= СтруктураСтроки.Поставщик;
		ТекСтр.НормаАвто 						= ?(СтруктураСтроки.НормаАвто=0,0,СтруктураСтроки.Количество/СтруктураСтроки.НормаАвто);
		ТекСтр.НормаАвто 						= ?(ТекСтр.НормаАвто=0,0.01,ТекСтр.НормаАвто);
		ТекСтр.КоличествоТранспорта 			= ТекСтр.НормаАвто;
		ТекСтр.Негабаритный						= СтруктураСтроки.Негабаритный;	
		
		ТекСтр.ОбщийВес         	          	= СтруктураСтроки.ОбщийВес;
		ТекСтр.ОбщийОбъем 						= СтруктураСтроки.ОбщийОбъем;
		ТекСтр.Сумма 							= СтруктураСтроки.Сумма;
		ТекСтр.ДопЗатратыНаМатериалы 			= СтруктураСтроки.ДопЗатратыНаМатериалы;
	Иначе 
		ТекСтр = ТекСтрКонтроль;
		Если ТаблицаПересчетаПоПоставщикам <> Неопределено Тогда
			ТекСтр.НормаАвто				= 0;
			ТекСтр.ОбщийВес 				= 0;
			ТекСтр.ОбщийОбъем 				= 0;
			ТекСтр.Сумма 					= 0;
			ТекСтр.ДопЗатратыНаМатериалы 	= 0;			
			Для Каждого НомСтр Из ТаблицаПересчетаПоПоставщикам Цикл 
				ТекСтр.НормаАвто 					= ТекСтр.НормаАвто + ?(НомСтр.НормаАвто=0,0,НомСтр.Количество/НомСтр.НормаАвто);
				ТекСтр.НормаАвто 					= ?(ТекСтр.НормаАвто=0,0.01,ТекСтр.НормаАвто);
				ТекСтр.КоличествоТранспорта 		= ?(ПересчитатьКличествоТранспорта,ТекСтр.КоличествоТранспорта,ТекСтр.НормаАвто);
				ТекСтр.ОбщийВес 					= ТекСтр.ОбщийВес + НомСтр.ОбщийВес;
				ТекСтр.ОбщийОбъем 					= ТекСтр.ОбщийОбъем + НомСтр.ОбщийОбъем;
				ТекСтр.Сумма 						= ТекСтр.Сумма + НомСтр.Сумма;
				ТекСтр.ДопЗатратыНаМатериалы		= ТекСтр.ДопЗатратыНаМатериалы + НомСтр.ДопЗатратыНаМатериалы;	
			КонецЦикла;
		Иначе 
			Если СтруктураСтроки.Пометка Тогда 
				ТекСтр.НормаАвто 					= ТекСтр.НормаАвто + ?(СтруктураСтроки.НормаАвто=0,0,СтруктураСтроки.Количество/СтруктураСтроки.НормаАвто);				
				ТекСтр.НормаАвто 					= ?(ТекСтр.НормаАвто=0,0.01,ТекСтр.НормаАвто);
				ТекСтр.КоличествоТранспорта 		= ТекСтр.НормаАвто;
				ТекСтр.ОбщийВес 					= ТекСтр.ОбщийВес + СтруктураСтроки.ОбщийВес;
				ТекСтр.ОбщийОбъем 					= ТекСтр.ОбщийОбъем + СтруктураСтроки.ОбщийОбъем;
				ТекСтр.Сумма 						= ТекСтр.Сумма + СтруктураСтроки.Сумма;
				ТекСтр.ДопЗатратыНаМатериалы		= ТекСтр.ДопЗатратыНаМатериалы + СтруктураСтроки.ДопЗатратыНаМатериалы;
			Иначе
				ТекСтр.НормаАвто 					= ТекСтр.НормаАвто - ?(СтруктураСтроки.НормаАвто=0,0,СтруктураСтроки.Количество/СтруктураСтроки.НормаАвто);					
				ТекСтр.НормаАвто 					= ?(ТекСтр.НормаАвто=0,0.01,ТекСтр.НормаАвто);
				ТекСтр.КоличествоТранспорта 		= ТекСтр.НормаАвто;
				ТекСтр.ОбщийВес 					= ТекСтр.ОбщийВес - СтруктураСтроки.ОбщийВес;
				ТекСтр.ОбщийОбъем 					= ТекСтр.ОбщийОбъем - СтруктураСтроки.ОбщийОбъем;
				ТекСтр.Сумма 						= ТекСтр.Сумма - СтруктураСтроки.Сумма;
				ТекСтр.ДопЗатратыНаМатериалы		= ТекСтр.ДопЗатратыНаМатериалы - СтруктураСтроки.ДопЗатратыНаМатериалы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаКонтроль = ЗаполнитьТекСтрокуКакСтруктураСервер(ТекСтр,"КонтрольТранспорта");
	
	Возврат СтрокаКонтроль;

КонецФункции

&НаСервере
Процедура РассчитатьИтогиПоТаблицеКонтрольТранспорта_v1()
	
	Объект.КонтрольТранспорта.Очистить();
	ТаблКонтрольТранспорта = Объект.КонтрольТранспорта.Выгрузить();
	РасчитатьСтоимостьСервер("ОкончательныйРасчет");
	
	//1 габарит
	СтруктураОтбора 		= Новый Структура("Пометка,Негабаритный",Истина,Ложь);
	ТаблПоставщиков 		= Объект.ОкончательныйРасчет.Выгрузить(СтруктураОтбора,"Поставщик");
	ТаблПоставщиков.Свернуть("Поставщик");
	НайденныйСтрокиГабарит 	= Объект.ОкончательныйРасчет.НайтиСтроки(СтруктураОтбора);
	Для Каждого Ном Из НайденныйСтрокиГабарит Цикл 
		Если Ном.Количество=0 Тогда 
			Продолжить;			
		КонецЕсли;
		Для Каждого НомСтр Из ТаблПоставщиков Цикл
			Если Ном.Поставщик <> НомСтр.Поставщик Тогда 
				Продолжить;
			КонецЕсли;
			НоваяСтр	 						= ТаблКонтрольТранспорта.Добавить();
			НоваяСтр.Поставщик 					= НомСтр.Поставщик;
			НоваяСтр.Негабаритный				= Ном.Негабаритный;
			НоваяСтр.НормаАвто 					= НоваяСтр.НормаАвто + ?(Ном.НормаАвто=0,0,Ном.Количество/Ном.НормаАвто);
			НоваяСтр.НормаАвто 					= ?(НоваяСтр.НормаАвто=0,0.01,НоваяСтр.НормаАвто);
			НоваяСтр.КоличествоТранспорта 		= НоваяСтр.НормаАвто;
			НоваяСтр.ОбщийВес 					= НоваяСтр.ОбщийВес + Ном.ОбщийВес;
			НоваяСтр.ОбщийОбъем 				= НоваяСтр.ОбщийОбъем + Ном.ОбщийОбъем;
			НоваяСтр.Сумма 						= НоваяСтр.Сумма + Ном.Сумма;
			НоваяСтр.ДопЗатратыНаМатериалы		= НоваяСтр.ДопЗатратыНаМатериалы + Ном.ДопЗатратыНаМатериалы;
		КонецЦикла;
	КонецЦикла;
	
	//2 не габарит
	СтруктураОтбора 		= Новый Структура("Пометка,Негабаритный",Истина,Истина);
	ТаблПоставщиков 		= Объект.ОкончательныйРасчет.Выгрузить(СтруктураОтбора,"Поставщик");
	ТаблПоставщиков.Свернуть("Поставщик");
	НайденныйСтрокиГабарит 	= Объект.ОкончательныйРасчет.НайтиСтроки(СтруктураОтбора);
	Для Каждого Ном Из НайденныйСтрокиГабарит Цикл 
		Если Ном.Количество=0 Тогда 
			Продолжить;			
		КонецЕсли;
		Для Каждого НомСтр Из ТаблПоставщиков Цикл
			Если Ном.Поставщик <> НомСтр.Поставщик Тогда 
				Продолжить;
			КонецЕсли;
			НоваяСтр	 						= ТаблКонтрольТранспорта.Добавить();
			НоваяСтр.Поставщик 					= НомСтр.Поставщик;
			НоваяСтр.Негабаритный				= Ном.Негабаритный;
			НоваяСтр.НормаАвто 					= НоваяСтр.НормаАвто + ?(Ном.НормаАвто=0,0,Ном.Количество/Ном.НормаАвто);
			НоваяСтр.НормаАвто 					= ?(НоваяСтр.НормаАвто=0,0.01,НоваяСтр.НормаАвто);
			НоваяСтр.КоличествоТранспорта 		= НоваяСтр.НормаАвто;
			НоваяСтр.ОбщийВес 					= НоваяСтр.ОбщийВес + Ном.ОбщийВес;
			НоваяСтр.ОбщийОбъем 				= НоваяСтр.ОбщийОбъем + Ном.ОбщийОбъем;
			НоваяСтр.Сумма 						= НоваяСтр.Сумма + Ном.Сумма;
			НоваяСтр.ДопЗатратыНаМатериалы		= НоваяСтр.ДопЗатратыНаМатериалы + Ном.ДопЗатратыНаМатериалы;
		КонецЦикла;
	КонецЦикла;
	
	ТаблКонтрольТранспорта.Свернуть("Поставщик,Негабаритный,СогласованоОЛиЗ","КоличествоТранспорта,НормаАвто,ОбщийВес,ОбщийОбъем,Сумма,ДопЗатратыНаМатериалы");
	Для Каждого НомСтр Из ТаблКонтрольТранспорта Цикл
		НоваяСтр = Объект.КонтрольТранспорта.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,НомСтр);
	КонецЦикла;
	
	РасчитатьСтоимостьСервер("ОкончательныйРасчет");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуКонтрольТранспортаПоВыбраннойСтроке(СтруктураСтроки)
	
	РассчитатьИтогиПоТаблицеКонтрольТранспорта_v1();
	
	//СтруктураПоиска = Новый Структура("Поставщик,Негабаритный",СтруктураСтроки.Поставщик,СтруктураСтроки.Негабаритный);
	//НайденнаяСтрока = Объект.КонтрольТранспорта.НайтиСтроки(СтруктураПоиска); 
	//Если НайденнаяСтрока.Количество()=0 Тогда
	//	
	//	НомСтрКонтроль 	= РассчитатьИтогиПоТаблицеКонтрольТранспорта(Истина,СтруктураСтроки);			
	//	СтрокаРасчетаТЧ = ВыполнитьРасчетНедогрузаСервер(НомСтрКонтроль,Истина); //возвращает итоговую строку для таблицы КонтрольТранспорта
	//	//РасчитатьСтоимостьСервер("ОкончательныйРасчет");
	//	
	//Иначе
	//	
	//	Для Каждого НомСтрКонтроль Из НайденнаяСтрока Цикл
	//		ТекСтрКонтроль 	= ЗаполнитьТекСтрокуКакСтруктура(НомСтрКонтроль,"КонтрольТранспорта");
	//		НоваяСтр 		= РассчитатьИтогиПоТаблицеКонтрольТранспорта(Ложь,СтруктураСтроки,ТекСтрКонтроль);
	//		Прервать;
	//	КонецЦикла;

	//	СтрокаРасчетаТЧ 	= ВыполнитьРасчетНедогрузаСервер(НоваяСтр,Истина); //возвращает итоговую строку для таблицы КонтрольТранспорта
	//	Если НоваяСтр.УдалитьСтроку Тогда
	//		Объект.КонтрольТранспорта.Удалить(НомСтрКонтроль);
	//	КонецЕсли;		
	//	ЗаполнитьЗначенияСвойств(НомСтрКонтроль,СтрокаРасчетаТЧ);
	//	
	//	//1 пересчитаем строки, где сняты галки по поставщикам
	//	РасчитатьСтоимостьСервер("ОкончательныйРасчет");
	//	
	//КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОкончательныйРасчетПометкаПриИзменении(Элемент)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"ОкончательныйРасчет");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Сообщение = Новый СообщениеПользователю;
	Если ТекДанные.Пометка
		И ТекДанные.ИндивидуальнаяЦена Тогда
		ТекДанные.Пометка = Ложь;
		СообщениеОбОшибки = "Необходимо выполнить расчет индивидуальных цен "+ТекДанные.Номенклатура;
		Сообщение.Текст = СообщениеОбОшибки;
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	ТекДанныеСтруктура = ЗаполнитьТекСтрокуКакСтруктура(ТекДанные,"ОкончательныйРасчет");
	ЗаполнитьКоличествоОкончательныйРасчет(ТекДанныеСтруктура);	
	ЗаполнитьТаблицуКонтрольТранспортаПоВыбраннойСтроке(ТекДанныеСтруктура);
	ОбновитьИнфоПоВыбранномуТовару();
		
КонецПроцедуры

&НаКлиенте
Процедура ОкончательныйРасчетИндивидуальнаяЦенаПриИзменении(Элемент)
	ПоказатьВопросРасчетаИндивидуальныхЦен();
КонецПроцедуры

#КонецОбласти

#Область КонтрольТранспорта

&НаКлиенте
Процедура ПоказатьДиалогВводаЗначения(ДополнительныеПараметры)
	
	ДополнительныеПараметры.ИмяСобытия = "ВводЗначенияЧисло";
	ВыбЗнач = ДополнительныеПараметры.ТекДанные.КоличествоТранспорта;
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(15,2);
	ОписаниеТипов = Новый ОписаниеТипов(Массив, КЧ);
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, ДополнительныеПараметры);
	ПоказатьВводЗначения(Оповещение,ВыбЗнач, "Введите значение", ОписаниеТипов);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольТранспортаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя <> "КонтрольТранспортаКоличествоТранспорта" Тогда 
		Возврат
	КонецЕсли;
	
	Отказ = ПоверитьДоступностьПоляПоСтатусу();
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"КонтрольТранспорта");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Изменить кол-во транспотра?";
	СтруктураСобытия = Новый Структура("ИмяСобытия,ТекДанные","ВопросИзменениеКоличестваАМ",ТекДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольТранспортаКоличествоТранспортаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отказ = ПоверитьДоступностьПоляПоСтатусу();
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"КонтрольТранспорта");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Текст = "Изменить кол-во транспотра?";
	СтруктураСобытия = Новый Структура("ИмяСобытия,ТекДанные","ВопросИзменениеКоличестваАМ",ТекДанные);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаОповещения", ЭтаФорма, СтруктураСобытия);
	ПоказатьВопрос(ОписаниеОповещения,Текст,РежимДиалогаВопрос.ДаНет,15);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольТранспортаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КонтрольТранспортаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область СчетНаОплату

&НаКлиенте
Процедура СчетНаОплатуПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦенаСоСкидкой(ТекДанные)		  
	ТекДанные.ЦенаСоСкидкой = ТекДанные.Цена - ТекДанные.Цена*ТекДанные.ПроцентРучнойСкидки/100;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПроцентРучнойСкидки(ТекДанные)		
	ТекДанные.ПроцентРучнойСкидки = ?(ТекДанные.ЦенаСоСкидкой = 0,0,-(ТекДанные.ЦенаСоСкидкой-ТекДанные.Цена)/ТекДанные.Цена*100);	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуСчета(ТекДанные)
	
	Цена 							= ?(ТекДанные.ЦенаСоСкидкой>0,ТекДанные.ЦенаСоСкидкой,ТекДанные.Цена);
	
	СтавкаНДС						= ЖБИ_ОбщегоНазначенияСервер.ПолучитьСтавкуНДСНаСервере(ТекДанные.Номенклатура);
	СтавкаНДСЧисло 					= УчетНДСУПКлиентСервер.ПолучитьСтавкуНДС(СтавкаНДС);
	ТекДанные.ЦенаБезНДС			= Цена - Цена * СтавкаНДСЧисло/(100 + СтавкаНДСЧисло);
	
	ТекДанные.СуммаРучнойСкидки 	= ТекДанные.Цена*ТекДанные.Количество - ТекДанные.ЦенаСоСкидкой*ТекДанные.Количество;
	ТекДанные.Сумма 				= Цена*ТекДанные.Количество;
	
	ОбновитьИтогиПоСчету();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуЦенаПриИзменении(Элемент)	
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"СчетНаОплату");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуСчета(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДопустимуюСкидкуПоставщика(ТекДанные)

	СообщениеОбОшибки = "";
	Отказ = ЖБИ_ОбщийМодульДокументыСервер.ПроверитьДопустимуюСкидкуПоставщика(ТекДанные.Поставщик,ТекДанные.ПроцентРучнойСкидки,СообщениеОбОшибки);
	Если Отказ Тогда
		ТекДанные.ПроцентРучнойСкидки = 0;
		ТекДанные.ЦенаСоСкидкой = 0;
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибки);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"СчетНаОплату");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПроверитьДопустимуюСкидкуПоставщика(ТекДанные);
	РассчитатьЦенаСоСкидкой(ТекДанные);
	РассчитатьСуммуСчета(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуЦенаСоСкидкойПриИзменении(Элемент)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"СчетНаОплату");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьПроцентРучнойСкидки(ТекДанные);
	ПроверитьДопустимуюСкидкуПоставщика(ТекДанные);	
	РассчитатьСуммуСчета(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетНаОплатуКоличествоПриИзменении(Элемент)
	
	ТекДанные = ЖБИ_ОбщийМодульКлиентСервер.ПроверитьТекСтрокуНаДоступность(ЭтаФорма,"СчетНаОплату");
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	РассчитатьСуммуСчета(ТекДанные);
	
КонецПроцедуры

#КонецОбласти

#Область Документы

&НаКлиенте
Процедура ДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	ИзменитьДокументВыписки();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПРОЦЕДУРЫ_ОБРАБОТЧИКИ_СОБЫТИЙ_ФОРМЫ

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	РезультатВыполнения = Новый Структура("СообщениеОбОшибке","");	
	Если Результат = КодВозвратаДиалога.Отмена Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда 
		Если ДополнительныеПараметры.Свойство("ИмяСобытия")
			И ЗначениеЗаполнено(ДополнительныеПараметры.ИмяСобытия) Тогда
			Если ДополнительныеПараметры.ИмяСобытия = "УдалитьТовар" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				ДопПараметры = ДополнительныеПараметры.ДопПараметры;
				УдалитьТоварКлиент(ДопПараметры);
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросОтправитьНаРасчетПлановыхСтавок" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				ОтправитьНаРасчетПлановыхСтавок();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросОтправитьНаПодтвержденеиЛогистам" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;
				ОтправитьНаПодтвержденеиЛогистам();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросИзменениеКоличестваАМ" Тогда
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;			
				ПоказатьДиалогВводаЗначения(ДополнительныеПараметры);
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросИзмененияПроцента" Тогда 
				 Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;			
				ПоказатьДиалогИзмененияПроцентаНаценки(ДополнительныеПараметры);
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросСчетНаОплату" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;			
				ОтправитьСчетНаОплату();
				ОбновитьЭлементыФормыИнформацию();
				ОбновитьИтогиПоСчету();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросОтправитьВыпискуДокментов" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;			
				ОтправитьНаВыпискаДокументов();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросВернутьНаОкончательныйРасчет" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;			
				ВернутьНаОкончательныйРасчет();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросОтправитьЗаказКлиента" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				СоздатьЗаказКлиента();				
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросПередачаВОтгрузку" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				СоздатьПередачаВОтгрузку();				
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросСоздатьДоговор" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;	
				СоздатьИзменитьДоговор();
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВводЗначенияЧисло" Тогда 
				
				ТекДанные 						= ДополнительныеПараметры.ТекДанные;
				ТекДанные.КоличествоТранспорта 	= ?(Результат=Неопределено,ТекДанные.НормаАвто,Результат);
				ТекДанныеСтруктура 				= ЗаполнитьТекСтрокуКакСтруктура(ТекДанные,"КонтрольТранспорта");
				СтрокаРасчетаТЧ 				= ВыполнитьРасчетНедогрузаСервер(ТекДанныеСтруктура,Ложь); //возвращает итоговую строку для таблицы КонтрольТранспорта
				
				//СтруктураОтбора = Новый Структура("Поставщик",ТекДанные.Поставщик);
				//НайденныеСтроки = Объект.КонтрольТранспорта.НайтиСтроки(СтруктураОтбора);
				//Для Каждого НомСтр Из НайденныеСтроки Цикл 
				//	ЗаполнитьЗначенияСвойств(НомСтр,СтрокаРасчетаТЧ);	
				//КонецЦикла;

				ЗаполнитьЗначенияСвойств(ТекДанные,СтрокаРасчетаТЧ);
				
				//1 пересчитаем строки, где сняты галки по поставщикам
				РасчитатьСтоимостьСервер("ОкончательныйРасчет",ТекДанныеСтруктура);
				
				Если ТекДанные.КоличествоТранспорта<ТекДанные.НормаАвто Тогда 
					ТекДанные.СогласованоОЛиЗ = Истина;
				Иначе 
					ТекДанные.СогласованоОЛиЗ = Ложь;
				КонецЕсли;
				
				ОбновитьЭлементыФормыИнформацию();
				
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросИндивидуальныеУсловияПоставки" Тогда 
				
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					ТекДанные = ДополнительныеПараметры.ТекДанные;
					ТекДанные.ИндивидуальнаяЦена = Ложь;
					Возврат;
				КонецЕсли;
				
				ТекДанные 	= ДополнительныеПараметры.ТекДанные;
				ИмяТЧ		= ДополнительныеПараметры.ИмяТЧ;
				ВыполнитьРасчетИндивидуальныхУсловияПоставкиПоНоменклатуре(ТекДанные,ИмяТЧ);
				
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВводаЗначенияИзмененияПроцентаНаценки" Тогда
				Объект.ПроцентНаценки = ?(Результат=Неопределено,Объект.ПроцентНаценки,Результат);
				РасчитатьСтоимостьСервер("ПредварительныйРасчет");
				РасчитатьСтоимостьСервер("ОкончательныйРасчет");
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ДобавитьКомментарийВЧат" Тогда
				Если Результат = Неопределено Тогда
					Возврат;
				КонецЕсли;
				ЖБИ_ОбщийМодульДокументы.ДобавитьКомментарийВЧат(ЭтаФорма, Результат); 
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросВыделитьДоставку" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;  
				ВыделитьДоставку(); 
			ИначеЕсли ДополнительныеПараметры.ИмяСобытия = "ВопросУсреднитьЦены" Тогда 
				Если Результат = КодВозвратаДиалога.Нет ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
					Возврат;
				КонецЕсли;  
				УсреднитьЦены();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры = "ФормаВыбораПоставщика" Тогда // выбор поставщика
		
	ИначеЕсли ДополнительныеПараметры = "ФормаВыбораДоговора" Тогда //выбор договора
		Если Результат <> Неопределено Тогда 
			СообщениеОбОшибки = "";
			СтруктураДобавления = Новый Структура("Дата,СправочникиОтгрузки,Автор",ТекущаяДата(),Результат, ТекущийПользователь);
			Отказ = ЗаполнитьДокументыОтгрузки(СтруктураДобавления,СообщениеОбОшибки);
			Если Отказ Тогда
				Сообщение.Текст = СообщениеОбОшибки;
				Сообщение.Сообщить();
				Возврат;
			КонецЕсли;
			ОбновитьТаблицуСДокументами();
		КонецЕсли;	
	ИначеЕсли ДополнительныеПараметры = "ФормаРедактированиеДокумента" Тогда 
		ЭтаФорма.Прочитать();
		ОбновитьТаблицуСДокументами();	
	ИначеЕсли ДополнительныеПараметры = "ФормаВыбораПунктОтгрузки" Тогда 		
		Элементы.ПредварительныйРасчет.ТекущиеДанные.ПунктОтгрузки = Результат;
	ИначеЕсли ДополнительныеПараметры = "ФормаВыбораПунктНазначения" Тогда
		Объект.ПунктНазначения = Результат;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 		
		Если ВыбранноеЗначение.Свойство("ИмяСобытия")
			И ЗначениеЗаполнено(ВыбранноеЗначение.ИмяСобытия) Тогда 
			ИмяСобытия = ВыбранноеЗначение.ИмяСобытия;
			Если ИмяСобытия = "ПунктНазначенияСоздание" Тогда 
				Объект.ПунктНазначения = ВыбранноеЗначение.РезультатВыбора;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
			
	Если ИмяСобытия = "ФормаСозданияДоговора" Тогда 
		Объект.Договор = Параметр;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ЭтаФорма.Параметры) = Тип("ДанныеФормыСтруктура") Тогда
		Для Каждого Реквизит Из ЭтаФорма.ПолучитьРеквизиты() Цикл
			Если ЭтаФорма.Параметры.Свойство(Реквизит.Имя) Тогда
				ЭтаФорма[Реквизит.Имя] = ЭтаФорма.Параметры[Реквизит.Имя];
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		И Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
		ЗаполнитьНачальныеНастройки();	
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	УстановитьПараметрыДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачальныеНастройки()
	
	Объект.Статус 		= ПредопределенноеЗначение("Перечисление.ЖБИ_СтатусЗаявкиПокупателя.Новый");
	Объект.ТипОтгрузки 	= ПредопределенноеЗначение("Перечисление.ЖБИ_ТипыОтгрузки.Авто");
	Объект.Организация 	= Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
	Объект.Менеджер 	= Пользователи.ТекущийПользователь();
	Объект.Автор 		= Пользователи.ТекущийПользователь();
	Объект.Подразделение= Пользователи.ТекущийПользователь().Подразделение;
	Объект.Валюта 		= Константы.ВалютаРегламентированногоУчета.Получить();
	ЭтоНовыйДокумент    = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	ОбновитьЭлементыФормыИнформацию();
	ОбновитьТаблицуСДокументами();
	ОбновитьИтогиПоСчету();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ЭтоНовыйДокумент Тогда
		Результат = ЗаполнитьЖурналСостоянийОбъектовСервер(Объект.Ссылка,Объект.Статус);
		ЗаполнитьЧатЗаявкиПокупателейСервер();
		ЭтоНовыйДокумент = Ложь;
		Элементы.ЖурналСостоянийСтатусов.Обновить();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

