#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПРОЦЕДУРЫ_И_ФУНКЦИИ_ОБЩЕГО_НАЗНАЧЕНИЯ

Функция МожноПереводитьДокументНаОкончательныйРасчет(ЗаявкаСсылка, ТекущийДокументРасчета) Экспорт 
	
	СтатусЗавершен = Истина;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование",ЗаявкаСсылка);
	Запрос.УстановитьПараметр("ТекущийДокументРасчета",ТекущийДокументРасчета);
	Запрос.Текст = "ВЫБРАТЬ
					|	ЖБИ_РасчетПлановыхСтавок.Ссылка КАК Ссылка,
					|	ЖБИ_РасчетПлановыхСтавок.Статус КАК Статус
					|ИЗ
					|	Документ.ЖБИ_РасчетПлановыхСтавок КАК ЖБИ_РасчетПлановыхСтавок
					|ГДЕ
					|	ЖБИ_РасчетПлановыхСтавок.ДокументОснование = &ДокументОснование 
					|	И ЖБИ_РасчетПлановыхСтавок.Ссылка <> &ТекущийДокументРасчета
					|	И НЕ ЖБИ_РасчетПлановыхСтавок.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ЖБИ_ИндивидуальныеУсловияПоставки.Ссылка,	 		
					|	ЖБИ_ИндивидуальныеУсловияПоставки.Статус
					|ИЗ
					|	Документ.ЖБИ_ИндивидуальныеУсловияПоставки КАК ЖБИ_ИндивидуальныеУсловияПоставки
					|ГДЕ
					|	ЖБИ_ИндивидуальныеУсловияПоставки.ДокументОснование = &ДокументОснование
					|	И ЖБИ_ИндивидуальныеУсловияПоставки.Ссылка <> &ТекущийДокументРасчета
					|	И НЕ ЖБИ_ИндивидуальныеУсловияПоставки.ПометкаУдаления
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ
					|	ЖБИ_ПодтверждениеПлановыхСтавок.Ссылка,	 		
					|	ЖБИ_ПодтверждениеПлановыхСтавок.Статус
					|ИЗ
					|	Документ.ЖБИ_ПодтверждениеПлановыхСтавок КАК ЖБИ_ПодтверждениеПлановыхСтавок
					|ГДЕ
					|	ЖБИ_ПодтверждениеПлановыхСтавок.ДокументОснование = &ДокументОснование
					|	И ЖБИ_ПодтверждениеПлановыхСтавок.Ссылка <> &ТекущийДокументРасчета
					|	И НЕ ЖБИ_ПодтверждениеПлановыхСтавок.ПометкаУдаления";
	 
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Пока РезультатЗапроса.Следующий() Цикл
		Если РезультатЗапроса.Статус = Перечисления.ЖБИ_СтатусРасчетаСтавки.Расчет
			ИЛИ РезультатЗапроса.Статус = Перечисления.ЖБИ_СтатусРасчетаСтавки.ВРаботе Тогда 
			СтатусЗавершен = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтатусЗавершен;
	
КонецФункции

Функция ОбработатьЗапросРасчетаИндивидуальныхЦен(ЗапросВыборка, Ссылка)
	
	Отказ = Ложь;
	
	Пока ЗапросВыборка.Следующий() Цикл
		ВыборкаНегабарит = ЗапросВыборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНегабарит.Следующий() Цикл
			ДокИндивидуальныеУсловияПоставки = Документы.ЖБИ_ИндивидуальныеУсловияПоставки.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ДокИндивидуальныеУсловияПоставки,Ссылка);
			ДокИндивидуальныеУсловияПоставки.УстановитьНовыйНомер();
			ДокИндивидуальныеУсловияПоставки.Дата 					= ТекущаяДатаСеанса();
			ДокИндивидуальныеУсловияПоставки.Валюта                	= ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(ДокИндивидуальныеУсловияПоставки.Валюта);
			ДокИндивидуальныеУсловияПоставки.ДокументОснование 		= Ссылка;
			ДокИндивидуальныеУсловияПоставки.Партнер				= ЗапросВыборка.Поставщик;
			ДокИндивидуальныеУсловияПоставки.Контрагент 			= ЖБИ_ОбщийМодульДокументы.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ЗапросВыборка.Поставщик);
			ДокИндивидуальныеУсловияПоставки.Статус 				= Перечисления.ЖБИ_СтатусРасчетаСтавки.Расчет;
			ДокИндивидуальныеУсловияПоставки.Негабаритный			= ВыборкаНегабарит.Негабаритный;
			ДокИндивидуальныеУсловияПоставки.БизнесРегион 			= ЗапросВыборка.Поставщик.БизнесРегион;
			ДокИндивидуальныеУсловияПоставки.Менеджер      			= ЗапросВыборка.Поставщик.ОсновнойМенеджер;
			ДокИндивидуальныеУсловияПоставки.Автор                	= Пользователи.ТекущийПользователь();
			ДокИндивидуальныеУсловияПоставки.Организация           	= ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(ДокИндивидуальныеУсловияПоставки.Организация);
			ДокИндивидуальныеУсловияПоставки.Подразделение		  	= ДокИндивидуальныеУсловияПоставки.Автор.Подразделение;
			ДокИндивидуальныеУсловияПоставки.БанковскийСчет 		= Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДокИндивидуальныеУсловияПоставки.Организация, ДокИндивидуальныеУсловияПоставки.Валюта);
			
			ВыборкаДетали = ВыборкаНегабарит.Выбрать();
			Пока ВыборкаДетали.Следующий() Цикл	
				НоваяСтр = ДокИндивидуальныеУсловияПоставки.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтр,ВыборкаДетали);
			КонецЦикла;
			Попытка 
				ДокИндивидуальныеУсловияПоставки.Записать();
			Исключение
				СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				Отказ = Истина;
				Прервать;
			КонецПопытки;
		КонецЦикла;	
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции

Функция ВыполнитьКомандуРасчетИндивидуальныхУсловияПоставкиПоДокументу(Ссылка, СообщениеОбОшибки) Экспорт
	
	Отказ 	= Ложь;
	Запрос 	= Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Ссылка КАК Ссылка,
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Поставщик КАК Поставщик,
				   |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.КодСтроки КАК КодСтроки,
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Номенклатура КАК Номенклатура,
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.НоменклатураПоставщика КАК НоменклатураПоставщика,
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Негабаритный КАК Негабаритный,
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.ЦенаПоставщика КАК ЦенаПоставщика,
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Количество КАК Количество
	               |ПОМЕСТИТЬ ТаблРасчетИндЦен
	               |ИЗ
	               |	Документ.ЖБИ_ЗаявкиПокупателей.ПредварительныйРасчет КАК ЖБИ_ЗаявкиПокупателейПредварительныйРасчет
	               |ГДЕ
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Ссылка = &Ссылка
				   |	И ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Пометка
	               |	И ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.ИндивидуальнаяЦена
	               |	И НЕ ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Ссылка.ПометкаУдаления 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблРасчетИндЦен.Ссылка КАК Ссылка,
	               |	ТаблРасчетИндЦен.Поставщик КАК Поставщик,
				   |	ТаблРасчетИндЦен.КодСтроки КАК КодСтроки,
	               |	ТаблРасчетИндЦен.Номенклатура КАК Номенклатура,
	               |	ТаблРасчетИндЦен.НоменклатураПоставщика КАК НоменклатураПоставщика,
	               |	ТаблРасчетИндЦен.Негабаритный КАК Негабаритный,
	               |	ТаблРасчетИндЦен.ЦенаПоставщика КАК ЦенаПоставщика,
	               |	ТаблРасчетИндЦен.Количество КАК Количество
	               |ИЗ
	               |	ТаблРасчетИндЦен КАК ТаблРасчетИндЦен
	               |ИТОГИ ПО
	               |	Поставщик,
				   |	Негабаритный";			   	
	ВыборкаПоставщик = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	Отказ = ОбработатьЗапросРасчетаИндивидуальныхЦен(ВыборкаПоставщик, Ссылка);
	
	Возврат Отказ;
	
КонецФункции

Функция ВыполнитьКомандуРасчетИндивидуальныхУсловияПоставкиПоНоменклатуре(СтруктураПараметров, СообщениеОбОшибки) Экспорт
	
	Отказ 	= Ложь;
	ИмяТЧ 	= СтруктураПараметров.ИмяТЧ;
	Ссылка	= СтруктураПараметров.Ссылка;
	Запрос 	= Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",СтруктураПараметров.Ссылка);
	Запрос.УстановитьПараметр("КодСтроки",СтруктураПараметров.КодСтроки);
	Запрос.УстановитьПараметр("Номенклатура",СтруктураПараметров.Номенклатура);
	Запрос.УстановитьПараметр("НоменклатураПоставщика",СтруктураПараметров.НоменклатураПоставщика);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Ссылка КАК Ссылка,
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Поставщик КАК Поставщик,
				   |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.КодСтроки КАК КодСтроки,
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Номенклатура КАК Номенклатура,
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.НоменклатураПоставщика КАК НоменклатураПоставщика,
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Негабаритный КАК Негабаритный,
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.ЦенаПоставщика КАК ЦенаПоставщика,
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Количество КАК Количество
	               |ПОМЕСТИТЬ ТаблРасчетИндЦен
	               |ИЗ
	               |	Документ.ЖБИ_ЗаявкиПокупателей.ПредварительныйРасчет КАК ЖБИ_ЗаявкиПокупателейПредварительныйРасчет
	               |ГДЕ
	               |	ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Ссылка = &Ссылка
				   |	И ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Пометка
	               |	И ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.ИндивидуальнаяЦена
				   |	И ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.КодСтроки = &КодСтроки
	               |	И ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Номенклатура = &Номенклатура
	               |	И ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.НоменклатураПоставщика = &НоменклатураПоставщика
	               |	И НЕ ЖБИ_ЗаявкиПокупателейПредварительныйРасчет.Ссылка.ПометкаУдаления 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблРасчетИндЦен.Ссылка КАК Ссылка,
	               |	ТаблРасчетИндЦен.Поставщик КАК Поставщик,
				   |	ТаблРасчетИндЦен.КодСтроки КАК КодСтроки,
	               |	ТаблРасчетИндЦен.Номенклатура КАК Номенклатура,
	               |	ТаблРасчетИндЦен.НоменклатураПоставщика КАК НоменклатураПоставщика,
	               |	ТаблРасчетИндЦен.Негабаритный КАК Негабаритный,
	               |	ТаблРасчетИндЦен.ЦенаПоставщика КАК ЦенаПоставщика,
	               |	ТаблРасчетИндЦен.Количество КАК Количество
	               |ИЗ
	               |	ТаблРасчетИндЦен КАК ТаблРасчетИндЦен
	               |ИТОГИ ПО
	               |	Поставщик,
				   |	Негабаритный";
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЖБИ_ЗаявкиПокупателей.ПредварительныйРасчет","ЖБИ_ЗаявкиПокупателей."+ИмяТЧ);			   	
	ВыборкаПоставщик = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Отказ = ОбработатьЗапросРасчетаИндивидуальныхЦен(ВыборкаПоставщик, Ссылка);
	
	Возврат Отказ;
	
КонецФункции

Функция ВыполнитьКомандуПодтвержденияПлановыхСтавок(Ссылка,СообщениеОбОшибки) Экспорт 
	
	Отказ 					= Ложь;
	ТЧОкончательныйРасчет 	= Ссылка.ОкончательныйРасчет.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖБИ_ЗаявкиПокупателейКонтрольТранспорта.Ссылка КАК Ссылка,
	               |	ЖБИ_ЗаявкиПокупателейКонтрольТранспорта.Поставщик КАК Поставщик,
				   |	ЖБИ_ЗаявкиПокупателейКонтрольТранспорта.Негабаритный КАК Негабаритный,
	               |	ЖБИ_ЗаявкиПокупателейКонтрольТранспорта.НормаАвто КАК НормаАвто,
	               |	ЖБИ_ЗаявкиПокупателейКонтрольТранспорта.КоличествоТранспорта КАК КоличествоТранспорта,
	               |	ЖБИ_ЗаявкиПокупателейКонтрольТранспорта.ДопЗатратыНаМатериалы КАК ДопЗатратыНаМатериалы 
	               |ИЗ
	               |	Документ.ЖБИ_ЗаявкиПокупателей.КонтрольТранспорта КАК ЖБИ_ЗаявкиПокупателейКонтрольТранспорта
	               |ГДЕ
	               |	ЖБИ_ЗаявкиПокупателейКонтрольТранспорта.Ссылка = &Ссылка
	               |	И ЖБИ_ЗаявкиПокупателейКонтрольТранспорта.СогласованоОЛиЗ
	               |	И НЕ ЖБИ_ЗаявкиПокупателейКонтрольТранспорта.Ссылка.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл			
		ДокПодтверждениеПлановыхСтавок = Документы.ЖБИ_ПодтверждениеПлановыхСтавок.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокПодтверждениеПлановыхСтавок,Ссылка);
		ДокПодтверждениеПлановыхСтавок.УстановитьНовыйНомер();
		ДокПодтверждениеПлановыхСтавок.Дата 				= ТекущаяДатаСеанса();
		ДокПодтверждениеПлановыхСтавок.ДокументОснование 	= Ссылка;
		ДокПодтверждениеПлановыхСтавок.Партнер				= Выборка.Поставщик;
		ДокПодтверждениеПлановыхСтавок.Статус 				= Перечисления.ЖБИ_СтатусРасчетаСтавки.Расчет;
		ДокПодтверждениеПлановыхСтавок.Негабаритный			= Выборка.Негабаритный;
		ДокПодтверждениеПлановыхСтавок.БизнесРегион 		= Выборка.Поставщик.БизнесРегион;
		ДокПодтверждениеПлановыхСтавок.МенеджерЛогист      	= Выборка.Поставщик.ОсновнойМенеджер;
		ДокПодтверждениеПлановыхСтавок.Автор				= Пользователи.ТекущийПользователь();
		
		ДокПодтверждениеПлановыхСтавок.НормаАвто			= Выборка.НормаАвто;
		ДокПодтверждениеПлановыхСтавок.КоличествоТранспорта	= Выборка.КоличествоТранспорта;
		ДокПодтверждениеПлановыхСтавок.ДопЗатратыНаМатериалы= Выборка.ДопЗатратыНаМатериалы;
		
		Номенклатура 	= Справочники.Номенклатура.ПустаяСсылка();
		НайденныеСтроки = ТЧОкончательныйРасчет.НайтиСтроки(Новый Структура("Пометка,Поставщик,Негабаритный",Истина,Выборка.Поставщик,Выборка.Негабаритный));
		//НайденныеСтроки = ТЧОкончательныйРасчет.НайтиСтроки(Новый Структура("Пометка,Поставщик",Истина,Выборка.Поставщик));
		Для Каждого НомСтр Из НайденныеСтроки Цикл		
			НоваяСтр = ДокПодтверждениеПлановыхСтавок.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтр,НомСтр);
		КонецЦикла;			
		Попытка 
			ДокПодтверждениеПлановыхСтавок.Записать();
		Исключение
			СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Отказ = Истина;
			Прервать;
		КонецПопытки;	
	КонецЦикла;
	
	Возврат Отказ;
		
КонецФункции

Функция СоздатьЗаказКлиента(Ссылка,Отказ,СообщениеОбОшибки) Экспорт
	
	Отказ 				= Ложь;
	ДатаАктуальности 	= ТекущаяДатаСеанса();
	
	ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
	ДокументОбъект.Дата = ДатаАктуальности;
	ДокументОбъект.УстановитьНовыйНомер();
	
	//1 Шапка	
	ДокументОбъект.Менеджер = Ссылка.Менеджер;
	ДокументОбъект.Валюта = Ссылка.Валюта;
	ДокументОбъект.Организация = Ссылка.Организация;
	ДокументОбъект.БанковскийСчет = ЖБИ_ОбщийМодульСправочники.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(ДокументОбъект.Организация,ДокументОбъект.Валюта);
	ДокументОбъект.Подразделение = Ссылка.Подразделение;
	ДокументОбъект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(
		ДокументОбъект.Склад, ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи"));
		
	ЗаполнитьОбособленно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Соглашение,
	"ОбеспечиватьЗаказыОбособленно");
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	ОбеспечениеСервер.ЗаполнитьВариантОбеспеченияПоУмолчанию(ДокументОбъект.Товары,
	ЗаполнитьОбособленно, ДокументОбъект.Статус);
		
	ДокументОбъект.Приоритет = Справочники.Приоритеты.ПолучитьПриоритетПоУмолчанию(ДокументОбъект.Приоритет);
	ДокументОбъект.НеОтгружатьЧастями = Истина;
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ДокументОбъект);
	
	//

	ДокументОбъект.Партнер 					= Ссылка.Партнер;
	ДокументОбъект.Контрагент 				= Ссылка.Контрагент;
	ДокументОбъект.Договор 					= Ссылка.Договор;
	ДокументОбъект.ХозяйственнаяОперация 	= Ссылка.Договор.ХозяйственнаяОперация;	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ХозяйственнаяОперация) Тогда
		ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	КонецЕсли;	
	ДокументОбъект.ПорядокРасчетов 			= Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;	
	ДокументОбъект.ИдентификаторПлатежа 	= ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ДокументОбъект);
	
	ПараметрыЗаполнения 					= Документы.ЗаказКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(ДокументОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ДокументОбъект.НалогообложениеНДС,	ПараметрыЗаполнения);
	
	ДокументОбъект.Комментарий 				= "Создан на основании заявки покупателей № "+Ссылка.Номер;
	
	//ДокументОбъект.ДатаОтгрузки = ТекущаяДатаСеанса();
	//ДокументОбъект.ЖелаемаяДатаОтгрузки = ТекущаяДатаСеанса();
	
	//2 Адрес доставки	
	АдресДоставки = Ссылка.ПунктНазначения.Адрес;
	Если НЕ ЗначениеЗаполнено(АдресДоставки) И ЗначениеЗаполнено(ДокументОбъект.Партнер) Тогда
		АдресДоставки = ФормированиеПечатныхФорм.ПолучитьАдресИзКонтактнойИнформации(ДокументОбъект.Партнер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДоставки) Тогда
		ДокументОбъект.АдресДоставки = АдресДоставки;
		ОбщегоНазначенияУТВызовСервера.ЗаполнитьЗначенияПолейКИПоПредставлению(АдресДоставки,
			Ссылка.ПунктНазначения.АдресЗначенияПолей);
	Иначе
		ДокументОбъект.АдресДоставки = НСтр("ru = '<адрес не указан/>'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	КонецЕсли;	
	ДокументОбъект.СпособДоставки 			= Перечисления.СпособыДоставки.ДоКлиента;
	ДокументОбъект.ПорядокОплаты  			= Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
	ДокументОбъект.ЦенаВключаетНДС 			= Ложь;
	
	ДокументОбъект.ЖБИ_ДатаСпецификации 	= ДатаАктуальности;
	НомерСпецификации						= Документы.ЗаказКлиента.ЗаполнитьНомерСпецификации();
	ДокументОбъект.ЖБИ_НомерСпецификации	= НомерСпецификации;  
	
	Подписант = ЖБИ_ОбщегоНазначенияСервер.ПолучитьПодписантаПоПраву(ДокументОбъект.Ссылка, ДокументОбъект.Организация);
	Если ЗначениеЗаполнено(Подписант) Тогда 
		ДокументОбъект.ЖБИ_ПодписантПоставщик	= Подписант;	
	Иначе 
		ДокументОбъект.ЖБИ_ПодписантПоставщик	= ДокументОбъект.Договор.ЖБИ_ПодписантОрганизация;	
	КонецЕсли;
		
	ДокументОбъект.ЖБИ_ПодписантПокупатель	= ДокументОбъект.Договор.ЖБИ_ПодписантКонтрагент;
	
	//3 Табличная часть
	ТабличнаяЧастьТовары = ДокументОбъект.Товары;
	ТабличнаяЧастьТовары.Очистить();
	
	// Выполняем необходимые операции для дозаполнения/проверки для строки ТЧ.
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
		Новый Структура("НалогообложениеНДС, Дата", ДокументОбъект.НалогообложениеНДС, ДокументОбъект.Дата));		
	СтруктураДействий.Вставить("ЗаполнитьСодержание",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(
			Новый Структура("ХозяйственнаяОперация", ДокументОбъект.ХозяйственнаяОперация), Ложь));		
	ВариантыОбеспечения = ПродажиСервер.ВариантыОбеспеченияПоУмолчанию(ДокументОбъект.Соглашение, ДокументОбъект.Статус);
	ПараметрыДействия = ОбеспечениеКлиентСервер.ПараметрыДействияПроверитьЗаполнитьОбеспечение(ВариантыОбеспечения);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	 
	НайденныеСтроки 	 = Ссылка.СчетНаОплату.НайтиСтроки(Новый Структура("Пометка",Истина));		
	КодСтроки 			 = 0;
	Для Каждого СтрокаТовара Из НайденныеСтроки Цикл
		СтрокаДокумента 							= ТабличнаяЧастьТовары.Добавить();
		//ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТовара);
		СтрокаДокумента.КодСтроки					= СтрокаТовара.КодСтроки;
		СтрокаДокумента.Номенклатура				= СтрокаТовара.Номенклатура;
		СтрокаДокумента.ЖБИ_НоменклатураПоставщика	= СтрокаТовара.НоменклатураПоставщика;
		СтрокаДокумента.Количество					= СтрокаТовара.Количество;
		СтрокаДокумента.КоличествоУпаковок			= СтрокаТовара.Количество;
		СтрокаДокумента.Цена						= СтрокаТовара.ЦенаБезНДС;//?(СтрокаТовара.ЦенаСоСкидкой>0,СтрокаТовара.ЦенаСоСкидкой,СтрокаТовара.Цена);	
		//СтрокаДокумента.ВидЦены = Справочники.ВидыЦен.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовара.ВидЦены));
		СтрокаДокумента.ДатаОтгрузки 				= ДокументОбъект.ДатаОтгрузки;
		СтрокаДокумента.Склад 						= Справочники.Склады.СкладПоУмолчанию();	
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаДокумента, СтруктураДействий, КэшированныеЗначения);
		КодСтроки = СтрокаТовара.КодСтроки;
	КонецЦикла;
	
	ДокументОбъект.ЗаполнитьЭтапыГрафикаОплаты();
	
	//4 Запись
	Попытка
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		Возврат Документы.ЗаказКлиента.ПустаяСсылка();
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция ЗаполнитьНоменклатуруПоПоставщикам(Номенклатура) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
	Запрос.Текст ="ВЫБРАТЬ
	              |	НоменклатураПоставщиков.Владелец КАК Поставщик,
	              |	НоменклатураПоставщиков.Номенклатура КАК Номенклатура,
	              |	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика,
	              |	НоменклатураПоставщиков.Артикул КАК Артикул,
	              |	НоменклатураПоставщиков.Владелец.ОсновнойМенеджер КАК Исполнитель,
	              |	ЖБИ_НоменклатураПоставщиков.ПунктОтгрузки КАК ПунктОтгрузки,
	              |	ЖБИ_НоменклатураПоставщиков.НормаАвто КАК НормаАвто,
	              |	ЖБИ_НоменклатураПоставщиков.Вес КАК Вес,
	              |	ЖБИ_НоменклатураПоставщиков.Объем КАК Объем,
	              |	ЖБИ_НоменклатураПоставщиков.Негабаритный КАК Негабаритный,
	              |	ЖБИ_НоменклатураПоставщиков.НормативныйДокумент КАК НормативныйДокумент,
	              |	ЖБИ_НоменклатураПоставщиков.Длина КАК Длина,
	              |	ЖБИ_НоменклатураПоставщиков.ДиаметрММ КАК ДиаметрММ,
	              |	ЖБИ_НоменклатураПоставщиков.ДиаметрВх КАК ДиаметрВх,
	              |	ЖБИ_НоменклатураПоставщиков.ДиаметрВых КАК ДиаметрВых,
	              |	ЖБИ_НоменклатураПоставщиков.РабочаяДлина КАК РабочаяДлина,
	              |	ЖБИ_НоменклатураПоставщиков.Глубина КАК Глубина,
	              |	ЖБИ_НоменклатураПоставщиков.ШиринаМакс КАК ШиринаМакс,
	              |	ЖБИ_НоменклатураПоставщиков.ВысотаМакс КАК ВысотаМакс,
	              |	ЖБИ_НоменклатураПоставщиков.СертифицированДо КАК СертифицированДо,
	              |	ЖБИ_НоменклатураПоставщиков.ВесАвто КАК ВесАвто,
				  |	ЖБИ_НоменклатураПоставщиков.БетонВ КАК БетонВ,
				  |	ЖБИ_НоменклатураПоставщиков.ВодонепрW КАК ВодонепрW,
				  |	ЖБИ_НоменклатураПоставщиков.МорозF КАК МорозF,
	              |	ЖБИ_НоменклатураПоставщиков.Направление КАК Направление,
	              |	ЖБИ_ПараметрыЦенообразования.ПроцентНаценки КАК ПроцентНаценкиПоставщика,
	              |	ЖБИ_ПараметрыЦенообразования.ПовышающийПроцент КАК ПовышающийПроцент,
	              |	ЖБИ_НоменклатураПоставщиков.СтатусОсторожно КАК СтатусОсторожно
	              |ИЗ
	              |	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖБИ_НоменклатураПоставщиков КАК ЖБИ_НоменклатураПоставщиков
	              |		ПО НоменклатураПоставщиков.Ссылка = ЖБИ_НоменклатураПоставщиков.НоменклатураПоставщика
	              |			И НоменклатураПоставщиков.Владелец = ЖБИ_НоменклатураПоставщиков.Партнер
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖБИ_ПараметрыЦенообразования КАК ЖБИ_ПараметрыЦенообразования
	              |		ПО НоменклатураПоставщиков.Владелец = ЖБИ_ПараметрыЦенообразования.Партнер
	              |ГДЕ
	              |	НоменклатураПоставщиков.Номенклатура = &Номенклатура
	              |	И НоменклатураПоставщиков.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
				  |	И НЕ НоменклатураПоставщиков.Владелец.ЖБИ_НаПаузе
				  |	И НЕ ЖБИ_НоменклатураПоставщиков.НаПаузе
	              |	И НЕ НоменклатураПоставщиков.ЖБИ_НеИспользуется
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	НоменклатураПоставщиков.Ссылка,
	              |	НоменклатураПоставщиков.Владелец,
	              |	НоменклатураПоставщиков.Номенклатура,
	              |	НоменклатураПоставщиков.Владелец.ОсновнойМенеджер,
	              |	ЖБИ_НоменклатураПоставщиков.ПунктОтгрузки,
	              |	ЖБИ_НоменклатураПоставщиков.НормаАвто,
	              |	ЖБИ_НоменклатураПоставщиков.Вес,
	              |	ЖБИ_НоменклатураПоставщиков.Объем,
	              |	ЖБИ_НоменклатураПоставщиков.Негабаритный,
	              |	ЖБИ_НоменклатураПоставщиков.НормативныйДокумент,
	              |	ЖБИ_НоменклатураПоставщиков.Длина,
	              |	ЖБИ_НоменклатураПоставщиков.ДиаметрММ,
	              |	ЖБИ_НоменклатураПоставщиков.ДиаметрВх,
	              |	ЖБИ_НоменклатураПоставщиков.ДиаметрВых,
	              |	ЖБИ_НоменклатураПоставщиков.РабочаяДлина,
	              |	ЖБИ_НоменклатураПоставщиков.Глубина,
	              |	ЖБИ_НоменклатураПоставщиков.ШиринаМакс,
	              |	ЖБИ_НоменклатураПоставщиков.ВысотаМакс,
	              |	ЖБИ_НоменклатураПоставщиков.СертифицированДо,
	              |	ЖБИ_НоменклатураПоставщиков.ВесАвто,
				  |	ЖБИ_НоменклатураПоставщиков.БетонВ,
				  |	ЖБИ_НоменклатураПоставщиков.ВодонепрW,
				  |	ЖБИ_НоменклатураПоставщиков.МорозF,
	              |	ЖБИ_НоменклатураПоставщиков.Направление,
	              |	ЖБИ_ПараметрыЦенообразования.ПроцентНаценки,
	              |	ЖБИ_ПараметрыЦенообразования.ПовышающийПроцент,
	              |	НоменклатураПоставщиков.Артикул,
	              |	ЖБИ_НоменклатураПоставщиков.СтатусОсторожно";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатЗапроса);
		
КонецФункции

#Область Расчеты

Функция ВыполнитьКомандуРасчетПлановыхСтавок(Ссылка,ТаблицаРасчетаСтавок,СообщениеОбОшибки) Экспорт 
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ТаблицаРасчетаСтавок",ТаблицаРасчетаСтавок);
	Запрос.Текст = "ВЫБРАТЬ
					|    *
					|ПОМЕСТИТЬ ВременнаяТаблицаРасчетаСтавок
					|ИЗ
					|    &ТаблицаРасчетаСтавок КАК ТаблицаРасчетаСтавок
					| ;
					| 
					| ВЫБРАТЬ 
					| 	*
					| ПОМЕСТИТЬ ТаблИтоги
					| ИЗ
					| 	ВременнаяТаблицаРасчетаСтавок КАК ВременнаяТаблицаРасчетаСтавок
					| ГДЕ
					| 	ВременнаяТаблицаРасчетаСтавок.Пометка			   
					|    
					|;
					|ВЫБРАТЬ
					|	ЖБИ_ЗаявкиПокупателей.Ссылка КАК Ссылка,
					|	ЖБИ_ЗаявкиПокупателей.Поставщик КАК Поставщик,
					|	ЖБИ_ЗаявкиПокупателей.ПунктОтгрузки КАК ПунктОтгрузки,
					|	ЖБИ_ЗаявкиПокупателей.КодСтроки КАК КодСтроки,
					|	ЖБИ_ЗаявкиПокупателей.Номенклатура КАК Номенклатура,
					|	ЖБИ_ЗаявкиПокупателей.НоменклатураПоставщика КАК НоменклатураПоставщика,
					|	ЖБИ_ЗаявкиПокупателей.Количество КАК Количество,
					|	ЖБИ_ЗаявкиПокупателей.УкрупненнаяСтавка КАК УкрупненнаяСтавка,
					|	ЖБИ_ЗаявкиПокупателей.ИндивидуальнаяПлановаяСтавка КАК ИндивидуальнаяПлановаяСтавка,
					|	ЖБИ_ЗаявкиПокупателей.НормаАвто КАК НормаАвто,
					|	ЖБИ_ЗаявкиПокупателей.Негабаритный КАК Негабаритный,
					|	ЖБИ_ЗаявкиПокупателей.ОбщийВес КАК ОбщийВес,
					|	ЖБИ_ЗаявкиПокупателей.ВесАвто КАК ВесАвто
					|ИЗ
					|	Документ.ЖБИ_ЗаявкиПокупателей.ПредварительныйРасчет КАК ЖБИ_ЗаявкиПокупателей
					|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблИтоги КАК ТаблИтоги
					|		ПО ЖБИ_ЗаявкиПокупателей.КодСтроки = ТаблИтоги.КодСтроки
					|		И  ЖБИ_ЗаявкиПокупателей.Номенклатура = ТаблИтоги.Номенклатура
					|		И  ЖБИ_ЗаявкиПокупателей.НоменклатураПоставщика = ТаблИтоги.НоменклатураПоставщика
					|		И  ЖБИ_ЗаявкиПокупателей.Поставщик = ТаблИтоги.Поставщик
					|ГДЕ
					|	ЖБИ_ЗаявкиПокупателей.Ссылка = &Ссылка
					|	И ЖБИ_ЗаявкиПокупателей.Пометка
					|	И НЕ ЖБИ_ЗаявкиПокупателей.Ссылка.ПометкаУдаления
					|ИТОГИ ПО
					|	Поставщик,
					|	ПунктОтгрузки,
					|	Негабаритный";
	
	ВыборкаПоставщики = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если ВыборкаПоставщики.Количество()=0 Тогда 
		СообщениеОбОшибки = "Не удалось создать документы <Расчет плановых ставок>";
		Отказ = Истина;
		Возврат Отказ;
	КонецЕсли;
	
	Пока ВыборкаПоставщики.Следующий() Цикл
		ВыборкаПунктОтгрузки = ВыборкаПоставщики.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПунктОтгрузки.Следующий() Цикл				
			ВыборкаНегабарит = ВыборкаПунктОтгрузки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаНегабарит.Следующий() Цикл 
				ДокРасчетПлановыхСтавок = Документы.ЖБИ_РасчетПлановыхСтавок.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ДокРасчетПлановыхСтавок,Ссылка);
				ДокРасчетПлановыхСтавок.УстановитьНовыйНомер();
				ДокРасчетПлановыхСтавок.Дата 				= ТекущаяДатаСеанса();
				ДокРасчетПлановыхСтавок.ДокументОснование 	= Ссылка;
				ДокРасчетПлановыхСтавок.Партнер				= ВыборкаПунктОтгрузки.Поставщик;
				ДокРасчетПлановыхСтавок.ПунктОтгрузки       = ВыборкаПунктОтгрузки.ПунктОтгрузки;
				ДокРасчетПлановыхСтавок.Статус 				= Перечисления.ЖБИ_СтатусРасчетаСтавки.Расчет;
				ДокРасчетПлановыхСтавок.БизнесРегион 		= ДокРасчетПлановыхСтавок.Партнер.БизнесРегион;
				//ДокРасчетПлановыхСтавок.МенеджерЛогист      = ВыборкаПунктОтгрузки.Поставщик.ОсновнойМенеджер;
				ДокРасчетПлановыхСтавок.Автор				= Пользователи.ТекущийПользователь();
				
				ВыборкаДетали = ВыборкаНегабарит.Выбрать();
				Пока ВыборкаДетали.Следующий() Цикл
					
					ДелаемРасчетСтавок = Ложь;
					Если ВыборкаДетали.Негабаритный Тогда //всегда делаем расчет ставок
						ДелаемРасчетСтавок = Истина;
					ИначеЕсли ВыборкаДетали.УкрупненнаяСтавка >= 0 Тогда  
						ДелаемРасчетСтавок = Истина;
					ИначеЕсли ВыборкаДетали.ИндивидуальнаяПлановаяСтавка Тогда  
						ДелаемРасчетСтавок = Истина;
					КонецЕсли;
					Если Не ДелаемРасчетСтавок Тогда 
						Продолжить;
					КонецЕсли;
					
					ДокРасчетПлановыхСтавок.ПунктОтгрузки 	= ВыборкаДетали.ПунктОтгрузки;
					НоваяСтр = ДокРасчетПлановыхСтавок.ДопЗатраты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтр,ВыборкаДетали); 
					НоваяСтр.БазовоеКолвоМашин = ?(НоваяСтр.НормаАвто = 0,0,НоваяСтр.Количество/НоваяСтр.НормаАвто);					
					Если НоваяСтр.Негабаритный Тогда 
						ДокРасчетПлановыхСтавок.Негабаритный = НоваяСтр.Негабаритный;	
					КонецЕсли;	
				КонецЦикла;
				Если ДелаемРасчетСтавок Тогда 
					Попытка 
						ДокРасчетПлановыхСтавок.Записать();
					Исключение
						СообщениеОбОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
						Отказ = Истина;
						Прервать;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;		
	КонецЦикла;
	
	Возврат Отказ;
		
КонецФункции

Процедура ЗаполнитьТаблицуОкончательныйРасчет(ОбъекЗаявка,ТаблицаРасчет) Экспорт
	
	ОбъекЗаявка.ОкончательныйРасчет.Очистить();
	Для Каждого НомСтр Из ТаблицаРасчет Цикл
		Если Не НомСтр.Пометка Тогда Продолжить;КонецЕсли;
		НоваяСтр = ОбъекЗаявка.ОкончательныйРасчет.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтр,НомСтр);
		НоваяСтр.Исполнитель 	= НоваяСтр.Поставщик.ОсновнойМенеджер;
		НоваяСтр.Пометка 		= Ложь;
		НомСтр.Пометка 			= Ложь;
	КонецЦикла;
	
	ТаблицаКонтроль = ОбъекЗаявка.КонтрольТранспорта.Выгрузить();
	ЖБИ_ОбщийМодульДокументы.РасчитатьСтоимость(ОбъекЗаявка.Ссылка,ТаблицаРасчет,ТаблицаКонтроль,Истина);
	ОбъекЗаявка.ОкончательныйРасчет.Загрузить(ТаблицаРасчет);
	
	ТЧТовары = ОбъекЗаявка.Товары;
	Для Каждого НомСтр Из ТЧТовары Цикл 
		НомСтр.Выбрано = 0;	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьАктуальнуюРасчетнуюСтавку(СтруктураЗапроса) Экспорт
	
	Ставка = 0;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПунктОтгрузки",СтруктураЗапроса.ПунктОтгрузки);
	Запрос.УстановитьПараметр("ПунктНазначения",СтруктураЗапроса.ПунктНазначения);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ЖБИ_Маршрут.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЖБИ_Маршрут КАК ЖБИ_Маршрут
	               |ГДЕ
	               |	ЖБИ_Маршрут.ПунктОтгрузки = &ПунктОтгрузки
	               |	И ЖБИ_Маршрут.ПунктНазначения = &ПунктНазначения";	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		МаршрутСсылка = РезультатЗапроса.Ссылка;
	Иначе
		Возврат Ставка;
	КонецЕсли;

	Запрос.УстановитьПараметр("Маршрут",МаршрутСсылка);
	Запрос.УстановитьПараметр("Негабаритный",СтруктураЗапроса.Негабаритный);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЖБИ_РасчетСтавокСрезПоследних.Маршрут КАК Маршрут,
	               |	ЖБИ_РасчетСтавокСрезПоследних.СрокДействияС КАК СрокДействияС,
	               |	ЖБИ_РасчетСтавокСрезПоследних.СрокДействияПо КАК СрокДействияПо,
	               |	ЖБИ_РасчетСтавокСрезПоследних.Сумма КАК Сумма
	               |ИЗ
	               |	РегистрСведений.ЖБИ_РасчетСтавок.СрезПоследних(, Маршрут = &Маршрут И Негабаритный = &Негабаритный) КАК ЖБИ_РасчетСтавокСрезПоследних
	               |ГДЕ
	               |	ЖБИ_РасчетСтавокСрезПоследних.ВидСтавки = ЗНАЧЕНИЕ(Перечисление.ЖБИ_ВидыСтавок.Плановая)";
				   //|	И ЖБИ_РасчетСтавокСрезПоследних.Негабаритный = &Негабаритный";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Если РезультатЗапроса.СрокДействияПо>ТекущаяДатаСеанса() Тогда
			Ставка = РезультатЗапроса.Сумма;	
		КонецЕсли;
	КонецЕсли;
	 	
	Возврат Ставка;	
	
КонецФункции

//Процедура РасчитатьСтавкиДопРасходыНаРейс(ТаблицаРасчет, СтруктураПараметров) Экспорт
//	
//	НайденныеСтроки = ТаблицаРасчет.НайтиСтроки(Новый Структура("Пометка,Номенклатура,Поставщик",Истина,СтруктураПараметров.Номенклатура,СтруктураПараметров.Поставщик));
//	Если НайденныеСтроки.Количество()=0 Тогда 
//		Возврат;
//	КонецЕсли;

//	Для Каждого НомСтр Из НайденныеСтроки Цикл 
//		НомСтр.ДопРасходыНаРейс = СтруктураПараметров.ДопРасходыНаРейс;
//	КонецЦикла;	
//		
//КонецПроцедуры

Функция ВыполнитьРасчетНедогруза(ТаблТовары,СтруктураПараметры) Экспорт
	
	СтрокаРасчетаТЧ = СтруктураПараметры;
	
	//1 считаем разницу между Кол-вом транспорта (который указал пользователь) и нормы погрузки товара по поставщику
	ПроцентНаценки 			= СтрокаРасчетаТЧ.ПроцентНаценки;
	КоличествоТранспорта 	= СтрокаРасчетаТЧ.КоличествоТранспорта;
	КолВоРейсовАМ 			= СтрокаРасчетаТЧ.НормаАвто;
	РазницаВКолвоРейсов 	= КоличествоТранспорта - КолВоРейсовАМ;
		
	//2 посчитаем цену с учетом недогруза по каждой выбранной позиции товара по поставщику
	ТаблТовары.Колонки.Добавить("НормаЗагрузкиАМ");
	ТаблТовары.Колонки.Добавить("СуммаНедогрузаТовара");
	Для Каждого НомСтр Из ТаблТовары Цикл
		
		СтруктураОтбора = Новый Структура("Партнер",НомСтр.Поставщик);
		СтруктураПараметрыЦенообразования = РегистрыСведений.ЖБИ_ПараметрыЦенообразования.ПолучитьПараметрыЦенообразования(СтруктураОтбора);
		
		НомСтр.НормаЗагрузкиАМ 		= ?(НомСтр.НормаАвто = 0,0,НомСтр.Количество/НомСтр.НормаАвто); 
		НомСтр.СуммаНедогрузаТовара = ?(НомСтр.Количество=0,0,((РазницаВКолвоРейсов*НомСтр.УкрупненнаяСтавка)*(НомСтр.НормаЗагрузкиАМ/КолВоРейсовАМ))/НомСтр.Количество);
		НомСтр.ЦенаРасчета 			= (НомСтр.ЦенаПоставщика*СтруктураПараметрыЦенообразования.ПроцентНаценки/100+НомСтр.ЦенаПоставщика) + НомСтр.СуммаНедогрузаТовара;		
		НомСтр.Цена 				= НомСтр.ЦенаРасчета;
		НомСтр.Цена 				= НомСтр.Цена + НомСтр.Цена*ПроцентНаценки/100; 
		НомСтр.Сумма 				= НомСтр.Цена*НомСтр.Количество;
		НомСтр.Вес 					= НомСтр.Вес*НомСтр.Количество;
		НомСтр.Объем 				= НомСтр.Объем*НомСтр.Количество;
	КонецЦикла;
	
	//3 посчитаем сумму с учетом недогруза по каждой выбранной позиции товара по поставщику
	ТаблИтоги = ТаблТовары.Скопировать();
	ТаблИтоги.Свернуть("Поставщик,Негабаритный","НормаАвто,Вес,Объем,Сумма,ДопРасходыНаРейс");
	Если ТаблИтоги.Количество()>0 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаРасчетаТЧ,ТаблИтоги[0]);
		СтрокаРасчетаТЧ.НормаАвто = КолВоРейсовАМ;
		СтрокаРасчетаТЧ.КоличествоТранспорта = КоличествоТранспорта;
	КонецЕсли;
	
	Возврат СтрокаРасчетаТЧ;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВводОстатковЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#КонецОбласти

#КонецЕсли
